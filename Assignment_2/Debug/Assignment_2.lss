
Assignment_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000472  00800100  00002ee0  00002f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001c0  00800572  00800572  000033e6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000033e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000320  00000000  00000000  00003484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042e8  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000012fc  00000000  00000000  00007a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000250b  00000000  00000000  00008d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a8  00000000  00000000  0000b294  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e79  00000000  00000000  0000bc3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000022af  00000000  00000000  0000cab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b8  00000000  00000000  0000ed64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c1 01 	jmp	0x382	; 0x382 <__ctors_end>
       4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
       8:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
       c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      10:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      14:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_5>
      18:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      1c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      20:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      24:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      28:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      2c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      30:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      34:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      38:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      3c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      40:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <__vector_16>
      44:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      48:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      4c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      50:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__vector_20>
      54:	0c 94 85 10 	jmp	0x210a	; 0x210a <__vector_21>
      58:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      5c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      60:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      64:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      68:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      6c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      70:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      74:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>
      78:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 6f       	ori	r18, 0xF0	; 240
      8c:	72 20       	and	r7, r2
      8e:	27 73       	andi	r18, 0x37	; 55
      90:	27 2f       	mov	r18, r23
      92:	27 53       	subi	r18, 0x37	; 55
      94:	27 20       	and	r2, r7
      96:	74 6f       	ori	r23, 0xF4	; 244
      98:	20 73       	andi	r18, 0x30	; 48
      9a:	74 61       	ori	r23, 0x14	; 20
      9c:	72 74       	andi	r23, 0x42	; 66
      9e:	20 61       	ori	r18, 0x10	; 16
      a0:	20 6e       	ori	r18, 0xE0	; 224
      a2:	65 77       	andi	r22, 0x75	; 117
      a4:	20 67       	ori	r18, 0x70	; 112
      a6:	61 6d       	ori	r22, 0xD1	; 209
      a8:	65 00       	.word	0x0065	; ????

000000aa <__c.2478>:
      aa:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b4 <__c.2453>:
      b4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 41 32     CSSE2010/7201 A2
      c4:	20 62 79 20 41 6c 76 69 6e 20 42 65 6e 6e 79 20      by Alvin Benny 
      d4:	2d 20 34 38 30 31 32 38 33 36 00                    - 48012836.

000000df <__c.2451>:
      df:	20 5c 24 24 20 20 20 5c 24 24 20 20 20 20 20 5c      \$$   \$$     \
      ef:	24 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20     $     \$$   \$$ 
      ff:	20 20 20 20 20 20 5c 24 24 20 20 20 5c 24 24 20           \$$   \$$ 
     10f:	20 5c 24 24 24 24 24 24 24 20 5c 24 24 20 20 20      \$$$$$$$ \$$   
     11f:	20 20 20 20 20 5c 24 24 24 24 24 24 00                   \$$$$$$.

0000012c <__c.2449>:
     12c:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 20 5c 24     | $$  | $$    \$
     13c:	24 24 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20     $$   | $$  | $$ 
     14c:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     15c:	5c 24 24 20 20 20 20 20 5c 7c 20 24 24 20 20 20     \$$     \| $$   
     16c:	20 20 20 20 5c 24 24 20 20 20 20 24 24 00               \$$    $$.

0000017a <__c.2447>:
     17a:	7c 20 24 24 20 20 7c 20 24 24 20 20 20 5c 24 24     | $$  | $$   \$$
     18a:	20 24 24 20 20 7c 20 24 24 20 20 7c 20 24 24 20      $$  | $$  | $$ 
     19a:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 7c          | $$  | $$|
     1aa:	20 24 24 24 24 24 24 24 24 7c 20 24 24 20 20 20      $$$$$$$$| $$   
     1ba:	20 20 20 7c 20 24 24 5f 5f 2f 20 24 24 00              | $$__/ $$.

000001c8 <__c.2445>:
     1c8:	7c 20 24 24 24 24 24 24 24 24 20 20 5c 24 24 5c     | $$$$$$$$  \$$\
     1d8:	20 20 24 24 20 7c 20 24 24 24 24 24 24 24 5c 20       $$ | $$$$$$$\ 
     1e8:	20 20 20 20 20 7c 20 24 24 24 24 24 24 24 24 7c          | $$$$$$$$|
     1f8:	20 24 24 20 20 20 20 24 24 7c 20 24 24 20 20 20      $$    $$| $$   
     208:	5c 24 24 7c 20 24 24 20 20 7c 20 24 24 00           \$$| $$  | $$.

00000216 <__c.2443>:
     216:	7c 20 24 24 20 20 20 20 24 24 20 5c 24 24 5c 20     | $$    $$ \$$\ 
     226:	2f 20 20 24 24 7c 20 24 24 20 20 20 20 24 24 20     /  $$| $$    $$ 
     236:	20 20 20 20 20 7c 20 24 24 20 20 20 20 24 24 7c          | $$    $$|
     246:	20 20 24 24 24 24 24 24 5c 7c 20 20 24 24 24 24       $$$$$$\|  $$$$
     256:	24 24 5c 7c 20 20 24 24 24 24 24 24 5c 00           $$\|  $$$$$$\.

00000264 <__c.2441>:
     264:	7c 20 24 24 5f 5f 7c 20 24 24 7c 20 24 24 20 20     | $$__| $$| $$  
     274:	20 7c 20 24 24 7c 20 24 24 5f 5f 7c 20 24 24 20      | $$| $$__| $$ 
     284:	20 20 20 20 20 7c 20 24 24 5f 5f 7c 20 24 24 20          | $$__| $$ 
     294:	2f 20 20 20 20 20 20 5c 20 20 2f 20 20 20 20 20     /      \  /     
     2a4:	20 5c 20 20 2f 20 20 20 20 20 20 5c 00               \  /      \.

000002b1 <__c.2439>:
     2b1:	7c 20 20 24 24 24 24 24 24 5c 7c 20 24 24 20 20     |  $$$$$$\| $$  
     2c1:	20 7c 20 24 24 7c 20 24 24 24 24 24 24 24 5c 20      | $$| $$$$$$$\ 
     2d1:	20 20 20 20 20 7c 20 24 24 20 20 7c 20 24 24 20          | $$  | $$ 
     2e1:	20 5f 5f 5f 5f 5f 5f 20 20 20 20 5f 5f 5f 5f 5f      ______    _____
     2f1:	5f 20 20 20 20 5f 5f 5f 5f 5f 5f 00                 _    ______.

000002fd <__c.2437>:
     2fd:	20 2f 20 20 20 20 20 20 5c 20 7c 20 20 5c 20 20      /      \ |  \  
     30d:	20 7c 20 20 5c 7c 20 20 20 20 20 20 20 5c 20 20      |  \|       \  
     31d:	20 20 20 20 20 7c 20 20 5c 20 20 7c 20 20 5c 00          |  \  |  \.

0000032d <__c.2435>:
     32d:	20 20 5f 5f 5f 5f 5f 5f 20 20 20 5f 5f 20 20 20       ______   __   
     33d:	20 20 5f 5f 20 20 5f 5f 5f 5f 5f 5f 5f 20 20 20       __  _______   
     34d:	20 20 20 20 20 20 5f 5f 20 20 20 20 5f 5f 00              __    __.

0000035c <__c.2058>:
     35c:	1b 5b 3f 32 35 68 00                                .[?25h.

00000363 <__c.2054>:
     363:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000036a <__c.2050>:
     36a:	1b 5b 25 64 6d 00                                   .[%dm.

00000370 <__c.2045>:
     370:	1b 5b 4b 00                                         .[K.

00000374 <__c.2040>:
     374:	1b 5b 32 4a 00                                      .[2J.

00000379 <__c.2025>:
     379:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000382 <__ctors_end>:
     382:	11 24       	eor	r1, r1
     384:	1f be       	out	0x3f, r1	; 63
     386:	cf ef       	ldi	r28, 0xFF	; 255
     388:	d8 e0       	ldi	r29, 0x08	; 8
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	cd bf       	out	0x3d, r28	; 61

0000038e <__do_copy_data>:
     38e:	15 e0       	ldi	r17, 0x05	; 5
     390:	a0 e0       	ldi	r26, 0x00	; 0
     392:	b1 e0       	ldi	r27, 0x01	; 1
     394:	e0 ee       	ldi	r30, 0xE0	; 224
     396:	fe e2       	ldi	r31, 0x2E	; 46
     398:	02 c0       	rjmp	.+4      	; 0x39e <__do_copy_data+0x10>
     39a:	05 90       	lpm	r0, Z+
     39c:	0d 92       	st	X+, r0
     39e:	a2 37       	cpi	r26, 0x72	; 114
     3a0:	b1 07       	cpc	r27, r17
     3a2:	d9 f7       	brne	.-10     	; 0x39a <__do_copy_data+0xc>

000003a4 <__do_clear_bss>:
     3a4:	27 e0       	ldi	r18, 0x07	; 7
     3a6:	a2 e7       	ldi	r26, 0x72	; 114
     3a8:	b5 e0       	ldi	r27, 0x05	; 5
     3aa:	01 c0       	rjmp	.+2      	; 0x3ae <.do_clear_bss_start>

000003ac <.do_clear_bss_loop>:
     3ac:	1d 92       	st	X+, r1

000003ae <.do_clear_bss_start>:
     3ae:	a2 33       	cpi	r26, 0x32	; 50
     3b0:	b2 07       	cpc	r27, r18
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <.do_clear_bss_loop>
     3b4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <main>
     3b8:	0c 94 6e 17 	jmp	0x2edc	; 0x2edc <_exit>

000003bc <__bad_interrupt>:
     3bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003c0 <init_button_interrupts>:
     3c0:	e8 e6       	ldi	r30, 0x68	; 104
     3c2:	f0 e0       	ldi	r31, 0x00	; 0
     3c4:	80 81       	ld	r24, Z
     3c6:	82 60       	ori	r24, 0x02	; 2
     3c8:	80 83       	st	Z, r24
     3ca:	8b b3       	in	r24, 0x1b	; 27
     3cc:	82 60       	ori	r24, 0x02	; 2
     3ce:	8b bb       	out	0x1b, r24	; 27
     3d0:	ec e6       	ldi	r30, 0x6C	; 108
     3d2:	f0 e0       	ldi	r31, 0x00	; 0
     3d4:	80 81       	ld	r24, Z
     3d6:	8f 60       	ori	r24, 0x0F	; 15
     3d8:	80 83       	st	Z, r24
     3da:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <__data_end>
     3de:	08 95       	ret

000003e0 <button_pushed>:
     3e0:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <__data_end>
     3e4:	18 16       	cp	r1, r24
     3e6:	14 f5       	brge	.+68     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     3e8:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <button_queue>
     3ec:	6f b7       	in	r22, 0x3f	; 63
     3ee:	f8 94       	cli
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	09 c0       	rjmp	.+18     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     3f4:	f9 01       	movw	r30, r18
     3f6:	ed 58       	subi	r30, 0x8D	; 141
     3f8:	fa 4f       	sbci	r31, 0xFA	; 250
     3fa:	40 81       	ld	r20, Z
     3fc:	f9 01       	movw	r30, r18
     3fe:	ee 58       	subi	r30, 0x8E	; 142
     400:	fa 4f       	sbci	r31, 0xFA	; 250
     402:	40 83       	st	Z, r20
     404:	9f 5f       	subi	r25, 0xFF	; 255
     406:	29 2f       	mov	r18, r25
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	40 91 72 05 	lds	r20, 0x0572	; 0x800572 <__data_end>
     40e:	04 2e       	mov	r0, r20
     410:	00 0c       	add	r0, r0
     412:	55 0b       	sbc	r21, r21
     414:	24 17       	cp	r18, r20
     416:	35 07       	cpc	r19, r21
     418:	6c f3       	brlt	.-38     	; 0x3f4 <button_pushed+0x14>
     41a:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <__data_end>
     41e:	91 50       	subi	r25, 0x01	; 1
     420:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <__data_end>
     424:	66 23       	and	r22, r22
     426:	1c f4       	brge	.+6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     428:	78 94       	sei
     42a:	08 95       	ret
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	08 95       	ret

00000430 <__vector_5>:
     430:	1f 92       	push	r1
     432:	0f 92       	push	r0
     434:	0f b6       	in	r0, 0x3f	; 63
     436:	0f 92       	push	r0
     438:	11 24       	eor	r1, r1
     43a:	2f 93       	push	r18
     43c:	3f 93       	push	r19
     43e:	4f 93       	push	r20
     440:	8f 93       	push	r24
     442:	9f 93       	push	r25
     444:	ef 93       	push	r30
     446:	ff 93       	push	r31
     448:	43 b1       	in	r20, 0x03	; 3
     44a:	4f 70       	andi	r20, 0x0F	; 15
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	26 c0       	rjmp	.+76     	; 0x49c <__vector_5+0x6c>
     450:	90 91 72 05 	lds	r25, 0x0572	; 0x800572 <__data_end>
     454:	94 30       	cpi	r25, 0x04	; 4
     456:	0c f5       	brge	.+66     	; 0x49a <__vector_5+0x6a>
     458:	24 2f       	mov	r18, r20
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	08 2e       	mov	r0, r24
     45e:	02 c0       	rjmp	.+4      	; 0x464 <__vector_5+0x34>
     460:	35 95       	asr	r19
     462:	27 95       	ror	r18
     464:	0a 94       	dec	r0
     466:	e2 f7       	brpl	.-8      	; 0x460 <__vector_5+0x30>
     468:	20 ff       	sbrs	r18, 0
     46a:	17 c0       	rjmp	.+46     	; 0x49a <__vector_5+0x6a>
     46c:	20 91 77 05 	lds	r18, 0x0577	; 0x800577 <last_button_state>
     470:	30 e0       	ldi	r19, 0x00	; 0
     472:	08 2e       	mov	r0, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <__vector_5+0x4a>
     476:	35 95       	asr	r19
     478:	27 95       	ror	r18
     47a:	0a 94       	dec	r0
     47c:	e2 f7       	brpl	.-8      	; 0x476 <__vector_5+0x46>
     47e:	20 fd       	sbrc	r18, 0
     480:	0c c0       	rjmp	.+24     	; 0x49a <__vector_5+0x6a>
     482:	e0 91 72 05 	lds	r30, 0x0572	; 0x800572 <__data_end>
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	9e 0f       	add	r25, r30
     48a:	90 93 72 05 	sts	0x0572, r25	; 0x800572 <__data_end>
     48e:	0e 2e       	mov	r0, r30
     490:	00 0c       	add	r0, r0
     492:	ff 0b       	sbc	r31, r31
     494:	ed 58       	subi	r30, 0x8D	; 141
     496:	fa 4f       	sbci	r31, 0xFA	; 250
     498:	80 83       	st	Z, r24
     49a:	8f 5f       	subi	r24, 0xFF	; 255
     49c:	84 30       	cpi	r24, 0x04	; 4
     49e:	c0 f2       	brcs	.-80     	; 0x450 <__vector_5+0x20>
     4a0:	40 93 77 05 	sts	0x0577, r20	; 0x800577 <last_button_state>
     4a4:	ff 91       	pop	r31
     4a6:	ef 91       	pop	r30
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	4f 91       	pop	r20
     4ae:	3f 91       	pop	r19
     4b0:	2f 91       	pop	r18
     4b2:	0f 90       	pop	r0
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	0f 90       	pop	r0
     4b8:	1f 90       	pop	r1
     4ba:	18 95       	reti

000004bc <update_start_screen>:
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	18 2f       	mov	r17, r24
     4c4:	d4 e0       	ldi	r29, 0x04	; 4
     4c6:	36 c0       	rjmp	.+108    	; 0x534 <update_start_screen+0x78>
     4c8:	ce 30       	cpi	r28, 0x0E	; 14
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <update_start_screen+0x14>
     4cc:	4f ef       	ldi	r20, 0xFF	; 255
     4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <update_start_screen+0x16>
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	2c 2f       	mov	r18, r28
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	20 5e       	subi	r18, 0xE0	; 224
     4d8:	3f 4f       	sbci	r19, 0xFF	; 255
     4da:	21 1b       	sub	r18, r17
     4dc:	31 09       	sbc	r19, r1
     4de:	ed 2f       	mov	r30, r29
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	bf 01       	movw	r22, r30
     4e4:	62 50       	subi	r22, 0x02	; 2
     4e6:	71 09       	sbc	r23, r1
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	dc 01       	movw	r26, r24
     4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <update_start_screen+0x38>
     4f0:	aa 0f       	add	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	6a 95       	dec	r22
     4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <update_start_screen+0x34>
     4f8:	bd 01       	movw	r22, r26
     4fa:	61 50       	subi	r22, 0x01	; 1
     4fc:	71 09       	sbc	r23, r1
     4fe:	26 23       	and	r18, r22
     500:	37 23       	and	r19, r23
     502:	33 97       	sbiw	r30, 0x03	; 3
     504:	02 c0       	rjmp	.+4      	; 0x50a <update_start_screen+0x4e>
     506:	88 0f       	add	r24, r24
     508:	99 1f       	adc	r25, r25
     50a:	ea 95       	dec	r30
     50c:	e2 f7       	brpl	.-8      	; 0x506 <update_start_screen+0x4a>
     50e:	01 97       	sbiw	r24, 0x01	; 1
     510:	28 17       	cp	r18, r24
     512:	39 07       	cpc	r19, r25
     514:	29 f4       	brne	.+10     	; 0x520 <update_start_screen+0x64>
     516:	ce 30       	cpi	r28, 0x0E	; 14
     518:	10 f4       	brcc	.+4      	; 0x51e <update_start_screen+0x62>
     51a:	4f e0       	ldi	r20, 0x0F	; 15
     51c:	01 c0       	rjmp	.+2      	; 0x520 <update_start_screen+0x64>
     51e:	40 ef       	ldi	r20, 0xF0	; 240
     520:	6d 2f       	mov	r22, r29
     522:	8c 2f       	mov	r24, r28
     524:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
     528:	cf 5f       	subi	r28, 0xFF	; 255
     52a:	01 c0       	rjmp	.+2      	; 0x52e <update_start_screen+0x72>
     52c:	cb e0       	ldi	r28, 0x0B	; 11
     52e:	c0 31       	cpi	r28, 0x10	; 16
     530:	58 f2       	brcs	.-106    	; 0x4c8 <update_start_screen+0xc>
     532:	df 5f       	subi	r29, 0xFF	; 255
     534:	d8 30       	cpi	r29, 0x08	; 8
     536:	d0 f3       	brcs	.-12     	; 0x52c <update_start_screen+0x70>
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	1f 91       	pop	r17
     53e:	08 95       	ret

00000540 <show_start_screen>:
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
     54a:	28 97       	sbiw	r28, 0x08	; 8
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
     55a:	10 e0       	ldi	r17, 0x00	; 0
     55c:	31 c0       	rjmp	.+98     	; 0x5c0 <show_start_screen+0x80>
     55e:	e1 2f       	mov	r30, r17
     560:	f0 e0       	ldi	r31, 0x00	; 0
     562:	ea 5d       	subi	r30, 0xDA	; 218
     564:	fe 4f       	sbci	r31, 0xFE	; 254
     566:	90 81       	ld	r25, Z
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	21 c0       	rjmp	.+66     	; 0x5ae <show_start_screen+0x6e>
     56c:	28 2f       	mov	r18, r24
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	49 2f       	mov	r20, r25
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	08 2e       	mov	r0, r24
     576:	02 c0       	rjmp	.+4      	; 0x57c <show_start_screen+0x3c>
     578:	55 95       	asr	r21
     57a:	47 95       	ror	r20
     57c:	0a 94       	dec	r0
     57e:	e2 f7       	brpl	.-8      	; 0x578 <show_start_screen+0x38>
     580:	40 ff       	sbrs	r20, 0
     582:	0d c0       	rjmp	.+26     	; 0x59e <show_start_screen+0x5e>
     584:	84 30       	cpi	r24, 0x04	; 4
     586:	10 f4       	brcc	.+4      	; 0x58c <show_start_screen+0x4c>
     588:	4f e0       	ldi	r20, 0x0F	; 15
     58a:	01 c0       	rjmp	.+2      	; 0x58e <show_start_screen+0x4e>
     58c:	40 ef       	ldi	r20, 0xF0	; 240
     58e:	e1 e0       	ldi	r30, 0x01	; 1
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	ec 0f       	add	r30, r28
     594:	fd 1f       	adc	r31, r29
     596:	e2 0f       	add	r30, r18
     598:	f3 1f       	adc	r31, r19
     59a:	40 83       	st	Z, r20
     59c:	07 c0       	rjmp	.+14     	; 0x5ac <show_start_screen+0x6c>
     59e:	e1 e0       	ldi	r30, 0x01	; 1
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	ec 0f       	add	r30, r28
     5a4:	fd 1f       	adc	r31, r29
     5a6:	e2 0f       	add	r30, r18
     5a8:	f3 1f       	adc	r31, r19
     5aa:	10 82       	st	Z, r1
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	88 30       	cpi	r24, 0x08	; 8
     5b0:	e8 f2       	brcs	.-70     	; 0x56c <show_start_screen+0x2c>
     5b2:	be 01       	movw	r22, r28
     5b4:	6f 5f       	subi	r22, 0xFF	; 255
     5b6:	7f 4f       	sbci	r23, 0xFF	; 255
     5b8:	81 2f       	mov	r24, r17
     5ba:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
     5be:	1f 5f       	subi	r17, 0xFF	; 255
     5c0:	10 31       	cpi	r17, 0x10	; 16
     5c2:	68 f2       	brcs	.-102    	; 0x55e <show_start_screen+0x1e>
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	0e 94 5e 02 	call	0x4bc	; 0x4bc <update_start_screen>
     5ca:	28 96       	adiw	r28, 0x08	; 8
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	1f 91       	pop	r17
     5dc:	08 95       	ret

000005de <default_grid>:
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	28 97       	sbiw	r28, 0x08	; 8
     5e8:	0f b6       	in	r0, 0x3f	; 63
     5ea:	f8 94       	cli
     5ec:	de bf       	out	0x3e, r29	; 62
     5ee:	0f be       	out	0x3f, r0	; 63
     5f0:	cd bf       	out	0x3d, r28	; 61
     5f2:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	09 c0       	rjmp	.+18     	; 0x60c <default_grid+0x2e>
     5fa:	e1 e0       	ldi	r30, 0x01	; 1
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	ec 0f       	add	r30, r28
     600:	fd 1f       	adc	r31, r29
     602:	e8 0f       	add	r30, r24
     604:	f1 1d       	adc	r31, r1
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	90 83       	st	Z, r25
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	a8 f3       	brcs	.-22     	; 0x5fa <default_grid+0x1c>
     610:	be 01       	movw	r22, r28
     612:	6f 5f       	subi	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	8d e0       	ldi	r24, 0x0D	; 13
     618:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	09 c0       	rjmp	.+18     	; 0x632 <default_grid+0x54>
     620:	e1 e0       	ldi	r30, 0x01	; 1
     622:	f0 e0       	ldi	r31, 0x00	; 0
     624:	ec 0f       	add	r30, r28
     626:	fd 1f       	adc	r31, r29
     628:	e8 0f       	add	r30, r24
     62a:	f1 1d       	adc	r31, r1
     62c:	95 e5       	ldi	r25, 0x55	; 85
     62e:	90 83       	st	Z, r25
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	88 30       	cpi	r24, 0x08	; 8
     634:	a8 f3       	brcs	.-22     	; 0x620 <default_grid+0x42>
     636:	be 01       	movw	r22, r28
     638:	6f 5f       	subi	r22, 0xFF	; 255
     63a:	7f 4f       	sbci	r23, 0xFF	; 255
     63c:	8c e0       	ldi	r24, 0x0C	; 12
     63e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
     642:	be 01       	movw	r22, r28
     644:	6f 5f       	subi	r22, 0xFF	; 255
     646:	7f 4f       	sbci	r23, 0xFF	; 255
     648:	8e e0       	ldi	r24, 0x0E	; 14
     64a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
     64e:	80 e0       	ldi	r24, 0x00	; 0
     650:	09 c0       	rjmp	.+18     	; 0x664 <default_grid+0x86>
     652:	e1 e0       	ldi	r30, 0x01	; 1
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	ec 0f       	add	r30, r28
     658:	fd 1f       	adc	r31, r29
     65a:	e8 0f       	add	r30, r24
     65c:	f1 1d       	adc	r31, r1
     65e:	91 e1       	ldi	r25, 0x11	; 17
     660:	90 83       	st	Z, r25
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	88 30       	cpi	r24, 0x08	; 8
     666:	a8 f3       	brcs	.-22     	; 0x652 <default_grid+0x74>
     668:	be 01       	movw	r22, r28
     66a:	6f 5f       	subi	r22, 0xFF	; 255
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	8b e0       	ldi	r24, 0x0B	; 11
     670:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
     674:	be 01       	movw	r22, r28
     676:	6f 5f       	subi	r22, 0xFF	; 255
     678:	7f 4f       	sbci	r23, 0xFF	; 255
     67a:	8f e0       	ldi	r24, 0x0F	; 15
     67c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
     680:	28 96       	adiw	r28, 0x08	; 8
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <update_combo>:

uint16_t beat_when_sounded;


void update_combo(void){
	move_terminal_cursor(10, 12);
     692:	6c e0       	ldi	r22, 0x0C	; 12
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	8a e0       	ldi	r24, 0x0A	; 10
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	clear_to_end_of_line();
     69e:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
	printf("Combo: %d", combo);
     6a2:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     6a6:	1f 92       	push	r1
     6a8:	8f 93       	push	r24
     6aa:	86 e3       	ldi	r24, 0x36	; 54
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	9f 93       	push	r25
     6b0:	8f 93       	push	r24
     6b2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
	
	if (combo == 3){
     6b6:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	83 30       	cpi	r24, 0x03	; 3
     6c4:	09 f0       	breq	.+2      	; 0x6c8 <update_combo+0x36>
     6c6:	78 c0       	rjmp	.+240    	; 0x7b8 <update_combo+0x126>
		PORTD |= (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
     6c8:	8b b1       	in	r24, 0x0b	; 11
     6ca:	80 6e       	ori	r24, 0xE0	; 224
     6cc:	8b b9       	out	0x0b, r24	; 11
		move_terminal_cursor(10, 15);
     6ce:	6f e0       	ldi	r22, 0x0F	; 15
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	8a e0       	ldi	r24, 0x0A	; 10
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("  ______    ______   __       __  _______    ______  ");
     6da:	80 e4       	ldi	r24, 0x40	; 64
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	9f 93       	push	r25
     6e0:	8f 93       	push	r24
     6e2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 16);
     6e6:	60 e1       	ldi	r22, 0x10	; 16
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	8a e0       	ldi	r24, 0x0A	; 10
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf(" /      \\  /      \\ |  \\     /  \\|       \\  /      \\");
     6f2:	86 e7       	ldi	r24, 0x76	; 118
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	9f 93       	push	r25
     6f8:	8f 93       	push	r24
     6fa:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 17);
     6fe:	61 e1       	ldi	r22, 0x11	; 17
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	8a e0       	ldi	r24, 0x0A	; 10
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("|  $$$$$$\\|  $$$$$$\\| $$\\   /  $$| $$$$$$$\\|  $$$$$$");
     70a:	8b ea       	ldi	r24, 0xAB	; 171
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	9f 93       	push	r25
     710:	8f 93       	push	r24
     712:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 18);
     716:	62 e1       	ldi	r22, 0x12	; 18
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	8a e0       	ldi	r24, 0x0A	; 10
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("| $$   \\$$| $$  | $$| $$$\\ /  $$$| $$__/ $$| $$  | $$");
     722:	80 ee       	ldi	r24, 0xE0	; 224
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 19);
     72e:	63 e1       	ldi	r22, 0x13	; 19
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	8a e0       	ldi	r24, 0x0A	; 10
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("| $$      | $$  | $$| $$$$\\  $$$$| $$    $$| $$  | $$");
     73a:	86 e1       	ldi	r24, 0x16	; 22
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 19);
     746:	63 e1       	ldi	r22, 0x13	; 19
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	8a e0       	ldi	r24, 0x0A	; 10
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("| $$   __ | $$  | $$| $$\\$$ $$ $$| $$$$$$$\\| $$  | $$");
     752:	8c e4       	ldi	r24, 0x4C	; 76
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 20);
     75e:	64 e1       	ldi	r22, 0x14	; 20
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	8a e0       	ldi	r24, 0x0A	; 10
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("| $$__/  \\| $$__/ $$| $$ \\$$$| $$| $$__/ $$| $$__/ $$");
     76a:	82 e8       	ldi	r24, 0x82	; 130
     76c:	92 e0       	ldi	r25, 0x02	; 2
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 21);
     776:	65 e1       	ldi	r22, 0x15	; 21
     778:	70 e0       	ldi	r23, 0x00	; 0
     77a:	8a e0       	ldi	r24, 0x0A	; 10
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("\\$$    $$ \\$$    $$| $$  \\$ | $$| $$    $$ \\$$    $$");
     782:	88 eb       	ldi	r24, 0xB8	; 184
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	9f 93       	push	r25
     788:	8f 93       	push	r24
     78a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
		move_terminal_cursor(10, 22);
     78e:	66 e1       	ldi	r22, 0x16	; 22
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	8a e0       	ldi	r24, 0x0A	; 10
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf(" \\$$$$$$   \\$$$$$$  \\$$      \\$$ \\$$$$$$$   \\$$$$$$ ");
     79a:	8d ee       	ldi	r24, 0xED	; 237
     79c:	92 e0       	ldi	r25, 0x02	; 2
     79e:	9f 93       	push	r25
     7a0:	8f 93       	push	r24
     7a2:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
     7a6:	8d b7       	in	r24, 0x3d	; 61
     7a8:	9e b7       	in	r25, 0x3e	; 62
     7aa:	42 96       	adiw	r24, 0x12	; 18
     7ac:	0f b6       	in	r0, 0x3f	; 63
     7ae:	f8 94       	cli
     7b0:	9e bf       	out	0x3e, r25	; 62
     7b2:	0f be       	out	0x3f, r0	; 63
     7b4:	8d bf       	out	0x3d, r24	; 61
     7b6:	08 95       	ret
		
	}
	else if (combo == 2) {
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <update_combo+0x132>
		PORTD |= (1 << PORTD5) | (1 << PORTD6);
     7bc:	8b b1       	in	r24, 0x0b	; 11
     7be:	80 66       	ori	r24, 0x60	; 96
     7c0:	8b b9       	out	0x0b, r24	; 11
     7c2:	08 95       	ret
	}
	else if (combo == 1) {
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	21 f4       	brne	.+8      	; 0x7d0 <update_combo+0x13e>
		PORTD |= (1 << PORTD5);
     7c8:	8b b1       	in	r24, 0x0b	; 11
     7ca:	80 62       	ori	r24, 0x20	; 32
     7cc:	8b b9       	out	0x0b, r24	; 11
     7ce:	08 95       	ret
	}
	else if (combo < 1){
     7d0:	81 11       	cpse	r24, r1
     7d2:	49 c0       	rjmp	.+146    	; 0x866 <__DATA_REGION_LENGTH__+0x66>
		move_terminal_cursor(10, 15);
     7d4:	6f e0       	ldi	r22, 0x0F	; 15
     7d6:	70 e0       	ldi	r23, 0x00	; 0
     7d8:	8a e0       	ldi	r24, 0x0A	; 10
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     7e0:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 16);
     7e4:	60 e1       	ldi	r22, 0x10	; 16
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	8a e0       	ldi	r24, 0x0A	; 10
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     7f0:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 17);
     7f4:	61 e1       	ldi	r22, 0x11	; 17
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	8a e0       	ldi	r24, 0x0A	; 10
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     800:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 18);
     804:	62 e1       	ldi	r22, 0x12	; 18
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	8a e0       	ldi	r24, 0x0A	; 10
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     810:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 19);
     814:	63 e1       	ldi	r22, 0x13	; 19
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	8a e0       	ldi	r24, 0x0A	; 10
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     820:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 20);
     824:	64 e1       	ldi	r22, 0x14	; 20
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	8a e0       	ldi	r24, 0x0A	; 10
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     830:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 21);
     834:	65 e1       	ldi	r22, 0x15	; 21
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	8a e0       	ldi	r24, 0x0A	; 10
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     840:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 22);
     844:	66 e1       	ldi	r22, 0x16	; 22
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	8a e0       	ldi	r24, 0x0A	; 10
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
     850:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		PORTD &= ~(1 << PORTD5);
     854:	8b b1       	in	r24, 0x0b	; 11
     856:	8f 7d       	andi	r24, 0xDF	; 223
     858:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD6);
     85a:	8b b1       	in	r24, 0x0b	; 11
     85c:	8f 7b       	andi	r24, 0xBF	; 191
     85e:	8b b9       	out	0x0b, r24	; 11
		PORTD &= ~(1 << PORTD7);
     860:	8b b1       	in	r24, 0x0b	; 11
     862:	8f 77       	andi	r24, 0x7F	; 127
     864:	8b b9       	out	0x0b, r24	; 11
     866:	08 95       	ret

00000868 <update_terminal_score>:

	}
}

void update_terminal_score(int score) {
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	8c 01       	movw	r16, r24
	move_terminal_cursor(10,4);
     872:	64 e0       	ldi	r22, 0x04	; 4
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	8a e0       	ldi	r24, 0x0A	; 10
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	clear_to_end_of_line();
     87e:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
	
	uint8_t num_of_digits = 1;
	if (abs(score) >= 10) {
     882:	c8 01       	movw	r24, r16
     884:	11 23       	and	r17, r17
     886:	24 f4       	brge	.+8      	; 0x890 <update_terminal_score+0x28>
     888:	88 27       	eor	r24, r24
     88a:	99 27       	eor	r25, r25
     88c:	80 1b       	sub	r24, r16
     88e:	91 0b       	sbc	r25, r17
     890:	8a 30       	cpi	r24, 0x0A	; 10
     892:	91 05       	cpc	r25, r1
     894:	14 f4       	brge	.+4      	; 0x89a <update_terminal_score+0x32>

void update_terminal_score(int score) {
	move_terminal_cursor(10,4);
	clear_to_end_of_line();
	
	uint8_t num_of_digits = 1;
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	01 c0       	rjmp	.+2      	; 0x89c <update_terminal_score+0x34>
	if (abs(score) >= 10) {
		num_of_digits = 2;
     89a:	22 e0       	ldi	r18, 0x02	; 2
	}
	if (abs(score) >= 100) {
     89c:	84 36       	cpi	r24, 0x64	; 100
     89e:	91 05       	cpc	r25, r1
     8a0:	0c f0       	brlt	.+2      	; 0x8a4 <update_terminal_score+0x3c>
		num_of_digits = 3;
     8a2:	23 e0       	ldi	r18, 0x03	; 3
	}
	
	if (score < 0) {
     8a4:	11 23       	and	r17, r17
     8a6:	0c f4       	brge	.+2      	; 0x8aa <update_terminal_score+0x42>
		num_of_digits = num_of_digits + 1; //cater for neg sign
     8a8:	2f 5f       	subi	r18, 0xFF	; 255
	}
	
	//'5' based on examples provided
	uint8_t num_of_spaces= 5 - num_of_digits;
     8aa:	d5 e0       	ldi	r29, 0x05	; 5
     8ac:	d2 1b       	sub	r29, r18
	
	printf("Game Score");
     8ae:	82 e2       	ldi	r24, 0x22	; 34
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	9f 93       	push	r25
     8b4:	8f 93       	push	r24
     8b6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
	for (uint8_t x=0; x < num_of_spaces; x++){
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	c0 e0       	ldi	r28, 0x00	; 0
     8c0:	05 c0       	rjmp	.+10     	; 0x8cc <update_terminal_score+0x64>
		printf(" "); //empty space
     8c2:	80 e2       	ldi	r24, 0x20	; 32
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 9f 14 	call	0x293e	; 0x293e <putchar>
	
	//'5' based on examples provided
	uint8_t num_of_spaces= 5 - num_of_digits;
	
	printf("Game Score");
	for (uint8_t x=0; x < num_of_spaces; x++){
     8ca:	cf 5f       	subi	r28, 0xFF	; 255
     8cc:	cd 17       	cp	r28, r29
     8ce:	c8 f3       	brcs	.-14     	; 0x8c2 <update_terminal_score+0x5a>
		printf(" "); //empty space
	}
	printf("%d", score);
     8d0:	1f 93       	push	r17
     8d2:	0f 93       	push	r16
     8d4:	8d e3       	ldi	r24, 0x3D	; 61
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	9f 93       	push	r25
     8da:	8f 93       	push	r24
     8dc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
}
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	0f 91       	pop	r16
     8f0:	08 95       	ret

000008f2 <find_next_note>:

uint8_t find_next_note(uint8_t indx)
{
	for (uint8_t f_note = indx + 1; f_note < TRACK_LENGTH; f_note++)
     8f2:	8f 5f       	subi	r24, 0xFF	; 255
     8f4:	0a c0       	rjmp	.+20     	; 0x90a <__stack+0xb>
	{
		if (track[f_note] & 0x0F) //Check if next note exists
     8f6:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <track>
     8fa:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <track+0x1>
     8fe:	e8 0f       	add	r30, r24
     900:	f1 1d       	adc	r31, r1
     902:	90 81       	ld	r25, Z
     904:	9f 70       	andi	r25, 0x0F	; 15
     906:	21 f4       	brne	.+8      	; 0x910 <__stack+0x11>
	printf("%d", score);
}

uint8_t find_next_note(uint8_t indx)
{
	for (uint8_t f_note = indx + 1; f_note < TRACK_LENGTH; f_note++)
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	81 38       	cpi	r24, 0x81	; 129
     90c:	a0 f3       	brcs	.-24     	; 0x8f6 <find_next_note+0x4>
		if (track[f_note] & 0x0F) //Check if next note exists
		{
			return f_note;
		}
	}
	return 0;
     90e:	80 e0       	ldi	r24, 0x00	; 0
}
     910:	08 95       	ret

00000912 <freq_to_clock_period>:
uint16_t b3_note =   783.9909;

uint16_t freq;

uint16_t freq_to_clock_period(uint16_t freq) {
	return (1000000UL / freq);
     912:	9c 01       	movw	r18, r24
     914:	40 e0       	ldi	r20, 0x00	; 0
     916:	50 e0       	ldi	r21, 0x00	; 0
     918:	60 e4       	ldi	r22, 0x40	; 64
     91a:	72 e4       	ldi	r23, 0x42	; 66
     91c:	8f e0       	ldi	r24, 0x0F	; 15
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
}
     924:	c9 01       	movw	r24, r18
     926:	08 95       	ret

00000928 <duty_cycle_to_pulse_width>:

uint16_t duty_cycle_to_pulse_width(float dutycycle, uint16_t clockperiod) {
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	6b 01       	movw	r12, r22
     932:	7c 01       	movw	r14, r24
	return (dutycycle * clockperiod) / 100;
     934:	ba 01       	movw	r22, r20
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
     93e:	a7 01       	movw	r20, r14
     940:	96 01       	movw	r18, r12
     942:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	48 ec       	ldi	r20, 0xC8	; 200
     94c:	52 e4       	ldi	r21, 0x42	; 66
     94e:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__divsf3>
     952:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
}
     956:	cb 01       	movw	r24, r22
     958:	ff 90       	pop	r15
     95a:	ef 90       	pop	r14
     95c:	df 90       	pop	r13
     95e:	cf 90       	pop	r12
     960:	08 95       	ret

00000962 <initialise_game>:
// Initialise the game by resetting the grid and beat
void initialise_game(void)
{
	//display_digit(score, digit);
	// initialise the display we are using.
	default_grid();
     962:	0e 94 ef 02 	call	0x5de	; 0x5de <default_grid>
	beat = 0;
     966:	10 92 12 06 	sts	0x0612, r1	; 0x800612 <beat+0x1>
     96a:	10 92 11 06 	sts	0x0611, r1	; 0x800611 <beat>
	combo = 0; //reset the combo
     96e:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
	beat_when_sounded = 0;
     972:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <beat_when_sounded+0x1>
     976:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <beat_when_sounded>
	//An array that keeps track of all the notes that have been played
	// default value 0
	for(uint8_t i=0; i < TRACK_LENGTH; i++){
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	22 c0       	rjmp	.+68     	; 0x9c2 <initialise_game+0x60>
		note_played[i] = 0;
     97e:	e8 2f       	mov	r30, r24
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	e6 57       	subi	r30, 0x76	; 118
     984:	fa 4f       	sbci	r31, 0xFA	; 250
     986:	10 82       	st	Z, r1
		
	if (current_track == 0){
     988:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <current_track>
     98c:	91 11       	cpse	r25, r1
     98e:	07 c0       	rjmp	.+14     	; 0x99e <initialise_game+0x3c>
		track = track0; 
     990:	2f e2       	ldi	r18, 0x2F	; 47
     992:	34 e0       	ldi	r19, 0x04	; 4
     994:	30 93 79 05 	sts	0x0579, r19	; 0x800579 <track+0x1>
     998:	20 93 78 05 	sts	0x0578, r18	; 0x800578 <track>
     99c:	11 c0       	rjmp	.+34     	; 0x9c0 <initialise_game+0x5e>
	}
	else if (current_track == 1){
     99e:	91 30       	cpi	r25, 0x01	; 1
     9a0:	39 f4       	brne	.+14     	; 0x9b0 <initialise_game+0x4e>
		track = track1;
     9a2:	2e ea       	ldi	r18, 0xAE	; 174
     9a4:	33 e0       	ldi	r19, 0x03	; 3
     9a6:	30 93 79 05 	sts	0x0579, r19	; 0x800579 <track+0x1>
     9aa:	20 93 78 05 	sts	0x0578, r18	; 0x800578 <track>
     9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <initialise_game+0x5e>
	}
	else if (current_track == 2){
     9b0:	92 30       	cpi	r25, 0x02	; 2
     9b2:	31 f4       	brne	.+12     	; 0x9c0 <initialise_game+0x5e>
		track = track2;
     9b4:	2d e2       	ldi	r18, 0x2D	; 45
     9b6:	33 e0       	ldi	r19, 0x03	; 3
     9b8:	30 93 79 05 	sts	0x0579, r19	; 0x800579 <track+0x1>
     9bc:	20 93 78 05 	sts	0x0578, r18	; 0x800578 <track>
	beat = 0;
	combo = 0; //reset the combo
	beat_when_sounded = 0;
	//An array that keeps track of all the notes that have been played
	// default value 0
	for(uint8_t i=0; i < TRACK_LENGTH; i++){
     9c0:	8f 5f       	subi	r24, 0xFF	; 255
     9c2:	81 38       	cpi	r24, 0x81	; 129
     9c4:	e0 f2       	brcs	.-72     	; 0x97e <initialise_game+0x1c>
	else if (current_track == 2){
		track = track2;
	}
	}
	
}
     9c6:	08 95       	ret

000009c8 <play_note>:


// Play a note in the given lane
void play_note(uint8_t lane)
{
     9c8:	ef 92       	push	r14
     9ca:	ff 92       	push	r15
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	18 2f       	mov	r17, r24
	//scoring area starts from 11
	for (uint8_t col=11; col<MATRIX_NUM_COLUMNS; col++)
     9d6:	cb e0       	ldi	r28, 0x0B	; 11
     9d8:	84 c1       	rjmp	.+776    	; 0xce2 <play_note+0x31a>
	{
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     9da:	df e0       	ldi	r29, 0x0F	; 15
     9dc:	dc 1b       	sub	r29, r28
		// notes are only drawn every five columns
		if ((future+beat)%5)
     9de:	40 91 11 06 	lds	r20, 0x0611	; 0x800611 <beat>
     9e2:	50 91 12 06 	lds	r21, 0x0612	; 0x800612 <beat+0x1>
     9e6:	4d 0f       	add	r20, r29
     9e8:	51 1d       	adc	r21, r1
     9ea:	9a 01       	movw	r18, r20
     9ec:	ad ec       	ldi	r26, 0xCD	; 205
     9ee:	bc ec       	ldi	r27, 0xCC	; 204
     9f0:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     9f4:	96 95       	lsr	r25
     9f6:	87 95       	ror	r24
     9f8:	96 95       	lsr	r25
     9fa:	87 95       	ror	r24
     9fc:	9c 01       	movw	r18, r24
     9fe:	22 0f       	add	r18, r18
     a00:	33 1f       	adc	r19, r19
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	82 0f       	add	r24, r18
     a08:	93 1f       	adc	r25, r19
     a0a:	48 17       	cp	r20, r24
     a0c:	59 07       	cpc	r21, r25
     a0e:	09 f0       	breq	.+2      	; 0xa12 <play_note+0x4a>
     a10:	67 c1       	rjmp	.+718    	; 0xce0 <play_note+0x318>
		{
			continue;
		}
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     a12:	9a 01       	movw	r18, r20
     a14:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     a18:	96 95       	lsr	r25
     a1a:	87 95       	ror	r24
     a1c:	96 95       	lsr	r25
     a1e:	87 95       	ror	r24
		// if the index is beyond the end of the track,
		// no note can be played
		if (index >= TRACK_LENGTH)
     a20:	81 38       	cpi	r24, 0x81	; 129
     a22:	08 f0       	brcs	.+2      	; 0xa26 <play_note+0x5e>
     a24:	5d c1       	rjmp	.+698    	; 0xce0 <play_note+0x318>
     a26:	7c 01       	movw	r14, r24
     a28:	ff 24       	eor	r15, r15
		}
		
		//led lane is left to right
		
		// check if there's a note in the specific path
		if (track[index] & (1<<lane))
     a2a:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <track>
     a2e:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <track+0x1>
     a32:	ee 0d       	add	r30, r14
     a34:	ff 1d       	adc	r31, r15
     a36:	20 81       	ld	r18, Z
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	01 2e       	mov	r0, r17
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <play_note+0x7a>
     a3e:	35 95       	asr	r19
     a40:	27 95       	ror	r18
     a42:	0a 94       	dec	r0
     a44:	e2 f7       	brpl	.-8      	; 0xa3e <play_note+0x76>
     a46:	20 ff       	sbrs	r18, 0
     a48:	36 c1       	rjmp	.+620    	; 0xcb6 <play_note+0x2ee>
		{
			
			// if so, colour the two pixels green
			ledmatrix_update_pixel(col, 2*lane, COLOUR_GREEN);
     a4a:	40 ef       	ldi	r20, 0xF0	; 240
     a4c:	01 2f       	mov	r16, r17
     a4e:	00 0f       	add	r16, r16
     a50:	60 2f       	mov	r22, r16
     a52:	8c 2f       	mov	r24, r28
     a54:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
			ledmatrix_update_pixel(col, 2*lane+1, COLOUR_GREEN);
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	60 0f       	add	r22, r16
     a5c:	40 ef       	ldi	r20, 0xF0	; 240
     a5e:	8c 2f       	mov	r24, r28
     a60:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
			
			//Ensure the player has not already played the note
			if (note_played[index] == 1) {
     a64:	f7 01       	movw	r30, r14
     a66:	e6 57       	subi	r30, 0x76	; 118
     a68:	fa 4f       	sbci	r31, 0xFA	; 250
     a6a:	80 81       	ld	r24, Z
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	b1 f4       	brne	.+44     	; 0xa9c <play_note+0xd4>
				score = score - 1;
     a70:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     a74:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     a7e:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
				combo = 0;
     a82:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
				update_combo();
     a86:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
				OCR1B = 0;
     a8a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     a8e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				beat_when_sounded = 0;
     a92:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <beat_when_sounded+0x1>
     a96:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <beat_when_sounded>
				break;
     a9a:	26 c1       	rjmp	.+588    	; 0xce8 <play_note+0x320>
			}
			note_played[index] = 1;
     a9c:	f7 01       	movw	r30, r14
     a9e:	e6 57       	subi	r30, 0x76	; 118
     aa0:	fa 4f       	sbci	r31, 0xFA	; 250
     aa2:	21 e0       	ldi	r18, 0x01	; 1
     aa4:	20 83       	st	Z, r18
			//scoring area when future is 0-4
			if (future == 4){
     aa6:	d4 30       	cpi	r29, 0x04	; 4
     aa8:	f9 f4       	brne	.+62     	; 0xae8 <play_note+0x120>
				score = score + 1;
     aaa:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     aae:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     ab8:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
				duty_cycle = 2;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e4       	ldi	r27, 0x40	; 64
     ac4:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <duty_cycle>
     ac8:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <duty_cycle+0x1>
     acc:	a0 93 88 05 	sts	0x0588, r26	; 0x800588 <duty_cycle+0x2>
     ad0:	b0 93 89 05 	sts	0x0589, r27	; 0x800589 <duty_cycle+0x3>
				if (combo){
     ad4:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     ad8:	88 23       	and	r24, r24
     ada:	09 f4       	brne	.+2      	; 0xade <play_note+0x116>
     adc:	92 c0       	rjmp	.+292    	; 0xc02 <play_note+0x23a>
					combo= 0;
     ade:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
					update_combo();
     ae2:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
     ae6:	8d c0       	rjmp	.+282    	; 0xc02 <play_note+0x23a>
				}
			}
			else if (future == 3){
     ae8:	d3 30       	cpi	r29, 0x03	; 3
     aea:	f9 f4       	brne	.+62     	; 0xb2a <play_note+0x162>
				score = score + 2;
     aec:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     af0:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     af4:	02 96       	adiw	r24, 0x02	; 2
     af6:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     afa:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
				duty_cycle = 10;
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e2       	ldi	r26, 0x20	; 32
     b04:	b1 e4       	ldi	r27, 0x41	; 65
     b06:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <duty_cycle>
     b0a:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <duty_cycle+0x1>
     b0e:	a0 93 88 05 	sts	0x0588, r26	; 0x800588 <duty_cycle+0x2>
     b12:	b0 93 89 05 	sts	0x0589, r27	; 0x800589 <duty_cycle+0x3>
				if (combo){
     b16:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     b1a:	88 23       	and	r24, r24
     b1c:	09 f4       	brne	.+2      	; 0xb20 <play_note+0x158>
     b1e:	71 c0       	rjmp	.+226    	; 0xc02 <play_note+0x23a>
					combo= 0;
     b20:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
					update_combo();
     b24:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
     b28:	6c c0       	rjmp	.+216    	; 0xc02 <play_note+0x23a>
				} 
			}
			else if (future == 2) {
     b2a:	d2 30       	cpi	r29, 0x02	; 2
     b2c:	59 f5       	brne	.+86     	; 0xb84 <play_note+0x1bc>
				score = score + 3;
     b2e:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     b32:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     b36:	03 96       	adiw	r24, 0x03	; 3
     b38:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     b3c:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
				combo = combo + 1;
     b40:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <combo>
				update_combo();
     b4a:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
				duty_cycle = 50;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a8 e4       	ldi	r26, 0x48	; 72
     b54:	b2 e4       	ldi	r27, 0x42	; 66
     b56:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <duty_cycle>
     b5a:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <duty_cycle+0x1>
     b5e:	a0 93 88 05 	sts	0x0588, r26	; 0x800588 <duty_cycle+0x2>
     b62:	b0 93 89 05 	sts	0x0589, r27	; 0x800589 <duty_cycle+0x3>
				if (combo >= 3) {
     b66:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     b6a:	83 30       	cpi	r24, 0x03	; 3
     b6c:	08 f4       	brcc	.+2      	; 0xb70 <play_note+0x1a8>
     b6e:	49 c0       	rjmp	.+146    	; 0xc02 <play_note+0x23a>
					score = score + 1;
     b70:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     b74:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     b7e:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
     b82:	3f c0       	rjmp	.+126    	; 0xc02 <play_note+0x23a>
					
				}
			}
			else if (future == 1) {
     b84:	d1 30       	cpi	r29, 0x01	; 1
     b86:	f1 f4       	brne	.+60     	; 0xbc4 <play_note+0x1fc>
				score = score + 2;
     b88:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     b8c:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     b90:	02 96       	adiw	r24, 0x02	; 2
     b92:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     b96:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
				duty_cycle = 90;
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a4 eb       	ldi	r26, 0xB4	; 180
     ba0:	b2 e4       	ldi	r27, 0x42	; 66
     ba2:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <duty_cycle>
     ba6:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <duty_cycle+0x1>
     baa:	a0 93 88 05 	sts	0x0588, r26	; 0x800588 <duty_cycle+0x2>
     bae:	b0 93 89 05 	sts	0x0589, r27	; 0x800589 <duty_cycle+0x3>
				if (combo){
     bb2:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     bb6:	88 23       	and	r24, r24
     bb8:	21 f1       	breq	.+72     	; 0xc02 <play_note+0x23a>
					combo= 0;
     bba:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
					update_combo();
     bbe:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
     bc2:	1f c0       	rjmp	.+62     	; 0xc02 <play_note+0x23a>
				}
			}
			else if (future == 0){
     bc4:	d1 11       	cpse	r29, r1
     bc6:	1d c0       	rjmp	.+58     	; 0xc02 <play_note+0x23a>
				score = score + 1;
     bc8:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     bcc:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     bd6:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
				duty_cycle = 98;
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	a4 ec       	ldi	r26, 0xC4	; 196
     be0:	b2 e4       	ldi	r27, 0x42	; 66
     be2:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <duty_cycle>
     be6:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <duty_cycle+0x1>
     bea:	a0 93 88 05 	sts	0x0588, r26	; 0x800588 <duty_cycle+0x2>
     bee:	b0 93 89 05 	sts	0x0589, r27	; 0x800589 <duty_cycle+0x3>
				if (combo){
     bf2:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     bf6:	88 23       	and	r24, r24
     bf8:	21 f0       	breq	.+8      	; 0xc02 <play_note+0x23a>
					combo= 0;
     bfa:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
					update_combo();
     bfe:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
				}
			}
			
			if (lane==3) {
     c02:	13 30       	cpi	r17, 0x03	; 3
     c04:	49 f4       	brne	.+18     	; 0xc18 <play_note+0x250>
				freq = b3_note;
     c06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c0a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c0e:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <freq+0x1>
     c12:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <freq>
     c16:	20 c0       	rjmp	.+64     	; 0xc58 <play_note+0x290>
			}
			else if (lane == 2) {
     c18:	12 30       	cpi	r17, 0x02	; 2
     c1a:	49 f4       	brne	.+18     	; 0xc2e <play_note+0x266>
				freq = b2_note;
     c1c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <b2_note>
     c20:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <b2_note+0x1>
     c24:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <freq+0x1>
     c28:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <freq>
     c2c:	15 c0       	rjmp	.+42     	; 0xc58 <play_note+0x290>
			}
			else if (lane == 1) {
     c2e:	11 30       	cpi	r17, 0x01	; 1
     c30:	49 f4       	brne	.+18     	; 0xc44 <play_note+0x27c>
				freq = b1_note;
     c32:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <b1_note>
     c36:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <b1_note+0x1>
     c3a:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <freq+0x1>
     c3e:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <freq>
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <play_note+0x290>
			}
			else if (lane == 0){
     c44:	11 11       	cpse	r17, r1
     c46:	08 c0       	rjmp	.+16     	; 0xc58 <play_note+0x290>
				freq = b0_note;
     c48:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <b0_note>
     c4c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <b0_note+0x1>
     c50:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <freq+0x1>
     c54:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <freq>
			}
			uint16_t clockperiod = freq_to_clock_period(freq);
     c58:	80 91 0f 06 	lds	r24, 0x060F	; 0x80060f <freq>
     c5c:	90 91 10 06 	lds	r25, 0x0610	; 0x800610 <freq+0x1>
     c60:	0e 94 89 04 	call	0x912	; 0x912 <freq_to_clock_period>
     c64:	7c 01       	movw	r14, r24
			uint16_t pulsewidth = duty_cycle_to_pulse_width(duty_cycle, clockperiod);
     c66:	60 91 86 05 	lds	r22, 0x0586	; 0x800586 <duty_cycle>
     c6a:	70 91 87 05 	lds	r23, 0x0587	; 0x800587 <duty_cycle+0x1>
     c6e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <duty_cycle+0x2>
     c72:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <duty_cycle+0x3>
     c76:	a7 01       	movw	r20, r14
     c78:	0e 94 94 04 	call	0x928	; 0x928 <duty_cycle_to_pulse_width>
		
			
			if(pulsewidth > 0) {
     c7c:	00 97       	sbiw	r24, 0x00	; 0
     c7e:	79 f0       	breq	.+30     	; 0xc9e <play_note+0x2d6>
				OCR1B = pulsewidth - 1;
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     c86:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				beat_when_sounded = beat + 5;
     c8a:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <beat>
     c8e:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <beat+0x1>
     c92:	05 96       	adiw	r24, 0x05	; 5
     c94:	90 93 0e 06 	sts	0x060E, r25	; 0x80060e <beat_when_sounded+0x1>
     c98:	80 93 0d 06 	sts	0x060D, r24	; 0x80060d <beat_when_sounded>
     c9c:	04 c0       	rjmp	.+8      	; 0xca6 <play_note+0x2de>
				} 
				else {
					OCR1B = 0;
     c9e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     ca2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			}	
			OCR1A = clockperiod - 1;
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	e8 1a       	sub	r14, r24
     caa:	f1 08       	sbc	r15, r1
     cac:	f0 92 89 00 	sts	0x0089, r15	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     cb0:	e0 92 88 00 	sts	0x0088, r14	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
     cb4:	15 c0       	rjmp	.+42     	; 0xce0 <play_note+0x318>
		}
		else {	
			score = score - 1;
     cb6:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     cba:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     cc4:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
			combo = 0;
     cc8:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
			OCR1B = 0; //disable timer
     ccc:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     cd0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
			beat_when_sounded = 0;
     cd4:	10 92 0e 06 	sts	0x060E, r1	; 0x80060e <beat_when_sounded+0x1>
     cd8:	10 92 0d 06 	sts	0x060D, r1	; 0x80060d <beat_when_sounded>
			update_combo();
     cdc:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>

// Play a note in the given lane
void play_note(uint8_t lane)
{
	//scoring area starts from 11
	for (uint8_t col=11; col<MATRIX_NUM_COLUMNS; col++)
     ce0:	cf 5f       	subi	r28, 0xFF	; 255
     ce2:	c0 31       	cpi	r28, 0x10	; 16
     ce4:	08 f4       	brcc	.+2      	; 0xce8 <play_note+0x320>
     ce6:	79 ce       	rjmp	.-782    	; 0x9da <play_note+0x12>
			beat_when_sounded = 0;
			update_combo();
			}
		}
	//display_digit(score, digit); //for SSD display
	update_terminal_score(score);
     ce8:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     cec:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     cf0:	0e 94 34 04 	call	0x868	; 0x868 <update_terminal_score>
	}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	0f 91       	pop	r16
     cfc:	ff 90       	pop	r15
     cfe:	ef 90       	pop	r14
     d00:	08 95       	ret

00000d02 <advance_note>:


// Advance the notes one row down the display
void advance_note(void)
{
     d02:	bf 92       	push	r11
     d04:	cf 92       	push	r12
     d06:	df 92       	push	r13
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29

	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     d14:	c0 e0       	ldi	r28, 0x00	; 0
     d16:	90 c0       	rjmp	.+288    	; 0xe38 <advance_note+0x136>
	{
		uint8_t future = MATRIX_NUM_COLUMNS - 1 - col;
     d18:	8f e0       	ldi	r24, 0x0F	; 15
     d1a:	d8 2e       	mov	r13, r24
     d1c:	dc 1a       	sub	r13, r28
		uint8_t index = (future + beat) / 5;
     d1e:	40 91 11 06 	lds	r20, 0x0611	; 0x800611 <beat>
     d22:	50 91 12 06 	lds	r21, 0x0612	; 0x800612 <beat+0x1>
     d26:	4d 0d       	add	r20, r13
     d28:	51 1d       	adc	r21, r1
     d2a:	9a 01       	movw	r18, r20
     d2c:	ad ec       	ldi	r26, 0xCD	; 205
     d2e:	bc ec       	ldi	r27, 0xCC	; 204
     d30:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     d34:	8c 01       	movw	r16, r24
     d36:	16 95       	lsr	r17
     d38:	07 95       	ror	r16
     d3a:	16 95       	lsr	r17
     d3c:	07 95       	ror	r16
		if (index >= TRACK_LENGTH)
     d3e:	01 38       	cpi	r16, 0x81	; 129
     d40:	20 f0       	brcs	.+8      	; 0xd4a <advance_note+0x48>
		{
			game_over_flag = 1;
     d42:	81 e0       	ldi	r24, 0x01	; 1
     d44:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <game_over_flag>
			continue;
     d48:	76 c0       	rjmp	.+236    	; 0xe36 <advance_note+0x134>
		}
		if ((future+beat) % 5)
     d4a:	9a 01       	movw	r18, r20
     d4c:	ad ec       	ldi	r26, 0xCD	; 205
     d4e:	bc ec       	ldi	r27, 0xCC	; 204
     d50:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     d54:	96 95       	lsr	r25
     d56:	87 95       	ror	r24
     d58:	96 95       	lsr	r25
     d5a:	87 95       	ror	r24
     d5c:	9c 01       	movw	r18, r24
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	22 0f       	add	r18, r18
     d64:	33 1f       	adc	r19, r19
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	48 17       	cp	r20, r24
     d6c:	59 07       	cpc	r21, r25
     d6e:	09 f0       	breq	.+2      	; 0xd72 <advance_note+0x70>
     d70:	62 c0       	rjmp	.+196    	; 0xe36 <advance_note+0x134>
     d72:	d0 e0       	ldi	r29, 0x00	; 0
     d74:	5d c0       	rjmp	.+186    	; 0xe30 <advance_note+0x12e>
     d76:	78 01       	movw	r14, r16
     d78:	ff 24       	eor	r15, r15
			continue;
		}
		
		for (uint8_t lane = 0; lane < 4; lane++)
		{	
			if (track[index] & (1<<lane))
     d7a:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <track>
     d7e:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <track+0x1>
     d82:	ee 0d       	add	r30, r14
     d84:	ff 1d       	adc	r31, r15
     d86:	80 81       	ld	r24, Z
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0d 2e       	mov	r0, r29
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <advance_note+0x90>
     d8e:	95 95       	asr	r25
     d90:	87 95       	ror	r24
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <advance_note+0x8c>
     d96:	80 ff       	sbrs	r24, 0
     d98:	4a c0       	rjmp	.+148    	; 0xe2e <advance_note+0x12c>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
     d9a:	cb 30       	cpi	r28, 0x0B	; 11
     d9c:	59 f0       	breq	.+22     	; 0xdb4 <advance_note+0xb2>
     d9e:	cf 30       	cpi	r28, 0x0F	; 15
     da0:	71 f0       	breq	.+28     	; 0xdbe <advance_note+0xbc>
				{
					colour = COLOUR_QUART_YELLOW;
				}
				else if (col==12 || col == 14)
     da2:	cc 30       	cpi	r28, 0x0C	; 12
     da4:	89 f0       	breq	.+34     	; 0xdc8 <advance_note+0xc6>
     da6:	ce 30       	cpi	r28, 0x0E	; 14
     da8:	a1 f0       	breq	.+40     	; 0xdd2 <advance_note+0xd0>
				{
					colour = COLOUR_HALF_YELLOW;
				}
				else if (col==13)
     daa:	cd 30       	cpi	r28, 0x0D	; 13
     dac:	b9 f4       	brne	.+46     	; 0xddc <advance_note+0xda>
				{
					colour = COLOUR_YELLOW;
     dae:	bb 24       	eor	r11, r11
     db0:	ba 94       	dec	r11
     db2:	15 c0       	rjmp	.+42     	; 0xdde <advance_note+0xdc>
			{
				PixelColour colour;
				// yellows in the scoring area
				if (col==11 || col == 15)
				{
					colour = COLOUR_QUART_YELLOW;
     db4:	0f 2e       	mov	r0, r31
     db6:	f1 e1       	ldi	r31, 0x11	; 17
     db8:	bf 2e       	mov	r11, r31
     dba:	f0 2d       	mov	r31, r0
     dbc:	10 c0       	rjmp	.+32     	; 0xdde <advance_note+0xdc>
     dbe:	0f 2e       	mov	r0, r31
     dc0:	f1 e1       	ldi	r31, 0x11	; 17
     dc2:	bf 2e       	mov	r11, r31
     dc4:	f0 2d       	mov	r31, r0
     dc6:	0b c0       	rjmp	.+22     	; 0xdde <advance_note+0xdc>
				}
				else if (col==12 || col == 14)
				{
					colour = COLOUR_HALF_YELLOW;
     dc8:	0f 2e       	mov	r0, r31
     dca:	f5 e5       	ldi	r31, 0x55	; 85
     dcc:	bf 2e       	mov	r11, r31
     dce:	f0 2d       	mov	r31, r0
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <advance_note+0xdc>
     dd2:	0f 2e       	mov	r0, r31
     dd4:	f5 e5       	ldi	r31, 0x55	; 85
     dd6:	bf 2e       	mov	r11, r31
     dd8:	f0 2d       	mov	r31, r0
     dda:	01 c0       	rjmp	.+2      	; 0xdde <advance_note+0xdc>
				{
					colour = COLOUR_YELLOW;
				}
				else
				{
					colour = COLOUR_BLACK;
     ddc:	b1 2c       	mov	r11, r1
				}
				ledmatrix_update_pixel(col, 2*lane, colour);
     dde:	4b 2d       	mov	r20, r11
     de0:	cd 2e       	mov	r12, r29
     de2:	cc 0c       	add	r12, r12
     de4:	6c 2d       	mov	r22, r12
     de6:	8c 2f       	mov	r24, r28
     de8:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	6c 0d       	add	r22, r12
     df0:	4b 2d       	mov	r20, r11
     df2:	8c 2f       	mov	r24, r28
     df4:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
				
				//if the note slides of the screen
				if ((future == 0) & (note_played[index] == 0)) {
     df8:	f7 01       	movw	r30, r14
     dfa:	e6 57       	subi	r30, 0x76	; 118
     dfc:	fa 4f       	sbci	r31, 0xFA	; 250
     dfe:	20 81       	ld	r18, Z
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	d1 10       	cpse	r13, r1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	21 11       	cpse	r18, r1
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	89 23       	and	r24, r25
     e0e:	79 f0       	breq	.+30     	; 0xe2e <advance_note+0x12c>
					score = score -1;
     e10:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
     e14:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <score+0x1>
     e1e:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <score>
					combo = 0;
     e22:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
					update_terminal_score(score);
     e26:	0e 94 34 04 	call	0x868	; 0x868 <update_terminal_score>
					update_combo();
     e2a:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
		if ((future+beat) % 5)
		{
			continue;
		}
		
		for (uint8_t lane = 0; lane < 4; lane++)
     e2e:	df 5f       	subi	r29, 0xFF	; 255
     e30:	d4 30       	cpi	r29, 0x04	; 4
     e32:	08 f4       	brcc	.+2      	; 0xe36 <advance_note+0x134>
     e34:	a0 cf       	rjmp	.-192    	; 0xd76 <advance_note+0x74>
// Advance the notes one row down the display
void advance_note(void)
{

	// remove all the current notes; reverse of below
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     e36:	cf 5f       	subi	r28, 0xFF	; 255
     e38:	c0 31       	cpi	r28, 0x10	; 16
     e3a:	08 f4       	brcc	.+2      	; 0xe3e <advance_note+0x13c>
     e3c:	6d cf       	rjmp	.-294    	; 0xd18 <advance_note+0x16>
	}
	
			
			
	// increment the beat
	beat++;
     e3e:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <beat>
     e42:	90 91 12 06 	lds	r25, 0x0612	; 0x800612 <beat+0x1>
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	90 93 12 06 	sts	0x0612, r25	; 0x800612 <beat+0x1>
     e4c:	80 93 11 06 	sts	0x0611, r24	; 0x800611 <beat>
	
	//turn off the sound after 5 beats
	if ((beat_when_sounded == beat) && OCR1B){
     e50:	20 91 0d 06 	lds	r18, 0x060D	; 0x80060d <beat_when_sounded>
     e54:	30 91 0e 06 	lds	r19, 0x060E	; 0x80060e <beat_when_sounded+0x1>
     e58:	82 17       	cp	r24, r18
     e5a:	93 07       	cpc	r25, r19
     e5c:	51 f4       	brne	.+20     	; 0xe72 <advance_note+0x170>
     e5e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
     e62:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     e66:	89 2b       	or	r24, r25
     e68:	21 f0       	breq	.+8      	; 0xe72 <advance_note+0x170>
		OCR1B = 0;
     e6a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     e6e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	}
	//GHOST NOTES
	ledmatrix_update_column(-1, COLOUR_BLACK);
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	70 e0       	ldi	r23, 0x00	; 0
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	0e 94 64 08 	call	0x10c8	; 0x10c8 <ledmatrix_update_column>
	uint8_t index = (MATRIX_NUM_COLUMNS+beat)/5;
     e7c:	20 91 11 06 	lds	r18, 0x0611	; 0x800611 <beat>
     e80:	30 91 12 06 	lds	r19, 0x0612	; 0x800612 <beat+0x1>
     e84:	20 5f       	subi	r18, 0xF0	; 240
     e86:	3f 4f       	sbci	r19, 0xFF	; 255
     e88:	ad ec       	ldi	r26, 0xCD	; 205
     e8a:	bc ec       	ldi	r27, 0xCC	; 204
     e8c:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     e90:	96 95       	lsr	r25
     e92:	87 95       	ror	r24
     e94:	96 95       	lsr	r25
     e96:	87 95       	ror	r24
	// if there isn't a next note
	// set the game_over flag to true and break out of the loop

	
	//ensure the track has not ended
	uint8_t n_note  = find_next_note(index);
     e98:	0e 94 79 04 	call	0x8f2	; 0x8f2 <find_next_note>
     e9c:	18 2f       	mov	r17, r24

	for (uint8_t lane=0; lane<4; lane++)
     e9e:	c0 e0       	ldi	r28, 0x00	; 0
     ea0:	27 c0       	rjmp	.+78     	; 0xef0 <advance_note+0x1ee>
	{
		
		if (n_note) //there is a next note
     ea2:	11 23       	and	r17, r17
     ea4:	21 f1       	breq	.+72     	; 0xeee <advance_note+0x1ec>
		{
			// check if there's a note in the specific path
			if (track[n_note] & (1<<lane))
     ea6:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <track>
     eaa:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <track+0x1>
     eae:	e1 0f       	add	r30, r17
     eb0:	f1 1d       	adc	r31, r1
     eb2:	80 81       	ld	r24, Z
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0c 2e       	mov	r0, r28
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <advance_note+0x1bc>
     eba:	95 95       	asr	r25
     ebc:	87 95       	ror	r24
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <advance_note+0x1b8>
     ec2:	80 ff       	sbrs	r24, 0
     ec4:	14 c0       	rjmp	.+40     	; 0xeee <advance_note+0x1ec>
			{
				uint8_t colour;
				if (combo >= 3){
     ec6:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     eca:	83 30       	cpi	r24, 0x03	; 3
     ecc:	10 f0       	brcs	.+4      	; 0xed2 <advance_note+0x1d0>
					colour = COLOUR_COMBO_GHOST;
     ece:	0f e1       	ldi	r16, 0x1F	; 31
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <advance_note+0x1d2>
				}
				else{
					colour = COLOUR_GHOST;
     ed2:	01 e0       	ldi	r16, 0x01	; 1
				}
				
				
				ledmatrix_update_pixel(0, 2*lane, colour);
     ed4:	40 2f       	mov	r20, r16
     ed6:	dc 2f       	mov	r29, r28
     ed8:	dd 0f       	add	r29, r29
     eda:	6d 2f       	mov	r22, r29
     edc:	80 e0       	ldi	r24, 0x00	; 0
     ede:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(0, 2*lane+1, colour);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	6d 0f       	add	r22, r29
     ee6:	40 2f       	mov	r20, r16
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>

	
	//ensure the track has not ended
	uint8_t n_note  = find_next_note(index);

	for (uint8_t lane=0; lane<4; lane++)
     eee:	cf 5f       	subi	r28, 0xFF	; 255
     ef0:	c4 30       	cpi	r28, 0x04	; 4
     ef2:	b8 f2       	brcs	.-82     	; 0xea2 <advance_note+0x1a0>
     ef4:	c0 e0       	ldi	r28, 0x00	; 0
     ef6:	67 c0       	rjmp	.+206    	; 0xfc6 <advance_note+0x2c4>
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
	{
		// col counts from one end, future from the other
		uint8_t future = MATRIX_NUM_COLUMNS-1-col;
     ef8:	8f e0       	ldi	r24, 0x0F	; 15
     efa:	8c 1b       	sub	r24, r28


		// notes are only drawn every five columns
		if ((future+beat)%5)
     efc:	40 91 11 06 	lds	r20, 0x0611	; 0x800611 <beat>
     f00:	50 91 12 06 	lds	r21, 0x0612	; 0x800612 <beat+0x1>
     f04:	48 0f       	add	r20, r24
     f06:	51 1d       	adc	r21, r1
     f08:	9a 01       	movw	r18, r20
     f0a:	ad ec       	ldi	r26, 0xCD	; 205
     f0c:	bc ec       	ldi	r27, 0xCC	; 204
     f0e:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     f12:	96 95       	lsr	r25
     f14:	87 95       	ror	r24
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	9c 01       	movw	r18, r24
     f1c:	22 0f       	add	r18, r18
     f1e:	33 1f       	adc	r19, r19
     f20:	22 0f       	add	r18, r18
     f22:	33 1f       	adc	r19, r19
     f24:	82 0f       	add	r24, r18
     f26:	93 1f       	adc	r25, r19
     f28:	48 17       	cp	r20, r24
     f2a:	59 07       	cpc	r21, r25
     f2c:	09 f0       	breq	.+2      	; 0xf30 <advance_note+0x22e>
     f2e:	4a c0       	rjmp	.+148    	; 0xfc4 <advance_note+0x2c2>
			
		}
		
		
		// index of which note in the track to play
		uint8_t index = (future+beat)/5;
     f30:	9a 01       	movw	r18, r20
     f32:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
     f36:	8c 01       	movw	r16, r24
     f38:	16 95       	lsr	r17
     f3a:	07 95       	ror	r16
     f3c:	16 95       	lsr	r17
     f3e:	07 95       	ror	r16
		// if the index is beyond the end of the track,
		// no note can be drawn

		if (index >= TRACK_LENGTH)
     f40:	01 38       	cpi	r16, 0x81	; 129
     f42:	e8 f1       	brcs	.+122    	; 0xfbe <advance_note+0x2bc>
		{
			game_over_flag = 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <game_over_flag>
			continue;
     f4a:	3c c0       	rjmp	.+120    	; 0xfc4 <advance_note+0x2c2>
     f4c:	98 01       	movw	r18, r16
     f4e:	33 27       	eor	r19, r19
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
		{
			
			// check if there's a note in the specific path
			if (track[index] & (1<<lane))
     f50:	e0 91 78 05 	lds	r30, 0x0578	; 0x800578 <track>
     f54:	f0 91 79 05 	lds	r31, 0x0579	; 0x800579 <track+0x1>
     f58:	e2 0f       	add	r30, r18
     f5a:	f3 1f       	adc	r31, r19
     f5c:	80 81       	ld	r24, Z
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0d 2e       	mov	r0, r29
     f62:	02 c0       	rjmp	.+4      	; 0xf68 <advance_note+0x266>
     f64:	95 95       	asr	r25
     f66:	87 95       	ror	r24
     f68:	0a 94       	dec	r0
     f6a:	e2 f7       	brpl	.-8      	; 0xf64 <advance_note+0x262>
     f6c:	80 ff       	sbrs	r24, 0
     f6e:	25 c0       	rjmp	.+74     	; 0xfba <advance_note+0x2b8>
			{	
				uint8_t colour;
				if (note_played[index] == 1){
     f70:	f9 01       	movw	r30, r18
     f72:	e6 57       	subi	r30, 0x76	; 118
     f74:	fa 4f       	sbci	r31, 0xFA	; 250
     f76:	80 81       	ld	r24, Z
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	49 f0       	breq	.+18     	; 0xf8e <advance_note+0x28c>
					colour = COLOUR_GREEN;
				}
				
				else if (combo >=3) {
     f7c:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <combo>
     f80:	83 30       	cpi	r24, 0x03	; 3
     f82:	50 f0       	brcs	.+20     	; 0xf98 <advance_note+0x296>
					colour = COLOUR_ORANGE;
     f84:	0f 2e       	mov	r0, r31
     f86:	fc e3       	ldi	r31, 0x3C	; 60
     f88:	ef 2e       	mov	r14, r31
     f8a:	f0 2d       	mov	r31, r0
     f8c:	09 c0       	rjmp	.+18     	; 0xfa0 <advance_note+0x29e>
			// check if there's a note in the specific path
			if (track[index] & (1<<lane))
			{	
				uint8_t colour;
				if (note_played[index] == 1){
					colour = COLOUR_GREEN;
     f8e:	0f 2e       	mov	r0, r31
     f90:	f0 ef       	ldi	r31, 0xF0	; 240
     f92:	ef 2e       	mov	r14, r31
     f94:	f0 2d       	mov	r31, r0
     f96:	04 c0       	rjmp	.+8      	; 0xfa0 <advance_note+0x29e>
				else if (combo >=3) {
					colour = COLOUR_ORANGE;
				}
				
				else {
					colour = COLOUR_RED;
     f98:	0f 2e       	mov	r0, r31
     f9a:	ff e0       	ldi	r31, 0x0F	; 15
     f9c:	ef 2e       	mov	r14, r31
     f9e:	f0 2d       	mov	r31, r0
				}
				
				ledmatrix_update_pixel(col, 2*lane, colour);
     fa0:	4e 2d       	mov	r20, r14
     fa2:	fd 2e       	mov	r15, r29
     fa4:	ff 0c       	add	r15, r15
     fa6:	6f 2d       	mov	r22, r15
     fa8:	8c 2f       	mov	r24, r28
     faa:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
				ledmatrix_update_pixel(col, 2*lane+1, colour);
     fae:	61 e0       	ldi	r22, 0x01	; 1
     fb0:	6f 0d       	add	r22, r15
     fb2:	4e 2d       	mov	r20, r14
     fb4:	8c 2f       	mov	r24, r28
     fb6:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
			continue;
		
		}
		
		// iterate over the four paths
		for (uint8_t lane=0; lane<4; lane++)
     fba:	df 5f       	subi	r29, 0xFF	; 255
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <advance_note+0x2be>
     fbe:	d0 e0       	ldi	r29, 0x00	; 0
     fc0:	d4 30       	cpi	r29, 0x04	; 4
     fc2:	20 f2       	brcs	.-120    	; 0xf4c <advance_note+0x24a>


	
	
	// draw the new notes
	for (uint8_t col=0; col<MATRIX_NUM_COLUMNS; col++)
     fc4:	cf 5f       	subi	r28, 0xFF	; 255
     fc6:	c0 31       	cpi	r28, 0x10	; 16
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <advance_note+0x2ca>
     fca:	96 cf       	rjmp	.-212    	; 0xef8 <advance_note+0x1f6>

			
		}


	}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	1f 91       	pop	r17
     fd2:	0f 91       	pop	r16
     fd4:	ff 90       	pop	r15
     fd6:	ef 90       	pop	r14
     fd8:	df 90       	pop	r13
     fda:	cf 90       	pop	r12
     fdc:	bf 90       	pop	r11
     fde:	08 95       	ret

00000fe0 <is_game_over>:


// Returns 1 if the game is over, 0 otherwise.
uint8_t is_game_over()
{
     fe0:	cf 93       	push	r28
	// YOUR CODE HERE
	// Detect if the game is over i.e. if a player has won.
	if (game_over_flag == 1) {
     fe2:	c0 91 81 05 	lds	r28, 0x0581	; 0x800581 <game_over_flag>
     fe6:	c1 30       	cpi	r28, 0x01	; 1
     fe8:	09 f0       	breq	.+2      	; 0xfec <is_game_over+0xc>
     fea:	47 c0       	rjmp	.+142    	; 0x107a <is_game_over+0x9a>
		OCR1B = 0; // turn off buzzer
     fec:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
     ff0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		//remove the combo (if it exists)
		move_terminal_cursor(10, 15);
     ff4:	6f e0       	ldi	r22, 0x0F	; 15
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	8a e0       	ldi	r24, 0x0A	; 10
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1000:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 16);
    1004:	60 e1       	ldi	r22, 0x10	; 16
    1006:	70 e0       	ldi	r23, 0x00	; 0
    1008:	8a e0       	ldi	r24, 0x0A	; 10
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1010:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 17);
    1014:	61 e1       	ldi	r22, 0x11	; 17
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	8a e0       	ldi	r24, 0x0A	; 10
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1020:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 18);
    1024:	62 e1       	ldi	r22, 0x12	; 18
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	8a e0       	ldi	r24, 0x0A	; 10
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1030:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 19);
    1034:	63 e1       	ldi	r22, 0x13	; 19
    1036:	70 e0       	ldi	r23, 0x00	; 0
    1038:	8a e0       	ldi	r24, 0x0A	; 10
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1040:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 20);
    1044:	64 e1       	ldi	r22, 0x14	; 20
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	8a e0       	ldi	r24, 0x0A	; 10
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1050:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 21);
    1054:	65 e1       	ldi	r22, 0x15	; 21
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	8a e0       	ldi	r24, 0x0A	; 10
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1060:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		move_terminal_cursor(10, 22);
    1064:	66 e1       	ldi	r22, 0x16	; 22
    1066:	70 e0       	ldi	r23, 0x00	; 0
    1068:	8a e0       	ldi	r24, 0x0A	; 10
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		clear_to_end_of_line();
    1070:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
		ledmatrix_clear();
    1074:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
		return 1;
    1078:	01 c0       	rjmp	.+2      	; 0x107c <is_game_over+0x9c>
	}
	else{
		return 0;
    107a:	c0 e0       	ldi	r28, 0x00	; 0
	}
}
    107c:	8c 2f       	mov	r24, r28
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <ledmatrix_setup>:
    1082:	80 e8       	ldi	r24, 0x80	; 128
    1084:	0e 94 1a 11 	call	0x2234	; 0x2234 <spi_setup_master>
    1088:	08 95       	ret

0000108a <ledmatrix_update_pixel>:
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	80 31       	cpi	r24, 0x10	; 16
    1092:	b0 f4       	brcc	.+44     	; 0x10c0 <ledmatrix_update_pixel+0x36>
    1094:	68 30       	cpi	r22, 0x08	; 8
    1096:	a0 f4       	brcc	.+40     	; 0x10c0 <ledmatrix_update_pixel+0x36>
    1098:	14 2f       	mov	r17, r20
    109a:	c6 2f       	mov	r28, r22
    109c:	d8 2f       	mov	r29, r24
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    10a4:	6c 2f       	mov	r22, r28
    10a6:	67 70       	andi	r22, 0x07	; 7
    10a8:	80 e1       	ldi	r24, 0x10	; 16
    10aa:	68 9f       	mul	r22, r24
    10ac:	90 01       	movw	r18, r0
    10ae:	11 24       	eor	r1, r1
    10b0:	8d 2f       	mov	r24, r29
    10b2:	8f 70       	andi	r24, 0x0F	; 15
    10b4:	82 2b       	or	r24, r18
    10b6:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    10ba:	81 2f       	mov	r24, r17
    10bc:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	08 95       	ret

000010c8 <ledmatrix_update_column>:
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	80 31       	cpi	r24, 0x10	; 16
    10d0:	a0 f4       	brcc	.+40     	; 0x10fa <ledmatrix_update_column+0x32>
    10d2:	8b 01       	movw	r16, r22
    10d4:	c8 2f       	mov	r28, r24
    10d6:	83 e0       	ldi	r24, 0x03	; 3
    10d8:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    10dc:	8c 2f       	mov	r24, r28
    10de:	8f 70       	andi	r24, 0x0F	; 15
    10e0:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    10e4:	c0 e0       	ldi	r28, 0x00	; 0
    10e6:	07 c0       	rjmp	.+14     	; 0x10f6 <ledmatrix_update_column+0x2e>
    10e8:	f8 01       	movw	r30, r16
    10ea:	ec 0f       	add	r30, r28
    10ec:	f1 1d       	adc	r31, r1
    10ee:	80 81       	ld	r24, Z
    10f0:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    10f4:	cf 5f       	subi	r28, 0xFF	; 255
    10f6:	c8 30       	cpi	r28, 0x08	; 8
    10f8:	b8 f3       	brcs	.-18     	; 0x10e8 <ledmatrix_update_column+0x20>
    10fa:	cf 91       	pop	r28
    10fc:	1f 91       	pop	r17
    10fe:	0f 91       	pop	r16
    1100:	08 95       	ret

00001102 <ledmatrix_clear>:
    1102:	8f e0       	ldi	r24, 0x0F	; 15
    1104:	0e 94 46 11 	call	0x228c	; 0x228c <spi_send_byte>
    1108:	08 95       	ret

0000110a <display_game_speed>:
//For combo ASCII



void display_game_speed() {
	move_terminal_cursor(10,8);
    110a:	68 e0       	ldi	r22, 0x08	; 8
    110c:	70 e0       	ldi	r23, 0x00	; 0
    110e:	8a e0       	ldi	r24, 0x0A	; 10
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	clear_to_end_of_line();
    1116:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
	if (game_speed == game_speed_normal){
    111a:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <game_speed>
    111e:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <game_speed+0x1>
    1122:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <game_speed_normal>
    1126:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <game_speed_normal+0x1>
    112a:	82 17       	cp	r24, r18
    112c:	93 07       	cpc	r25, r19
    112e:	49 f4       	brne	.+18     	; 0x1142 <display_game_speed+0x38>
		printf("Game Speed: Normal");
    1130:	80 eb       	ldi	r24, 0xB0	; 176
    1132:	94 e0       	ldi	r25, 0x04	; 4
    1134:	9f 93       	push	r25
    1136:	8f 93       	push	r24
    1138:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    113c:	0f 90       	pop	r0
    113e:	0f 90       	pop	r0
    1140:	1f c0       	rjmp	.+62     	; 0x1180 <display_game_speed+0x76>
	}
	else if (game_speed == game_speed_fast) {
    1142:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <game_speed_fast>
    1146:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <game_speed_fast+0x1>
    114a:	82 17       	cp	r24, r18
    114c:	93 07       	cpc	r25, r19
    114e:	49 f4       	brne	.+18     	; 0x1162 <display_game_speed+0x58>
		printf("Game Speed: Fast");
    1150:	83 ec       	ldi	r24, 0xC3	; 195
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	9f 93       	push	r25
    1156:	8f 93       	push	r24
    1158:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f c0       	rjmp	.+30     	; 0x1180 <display_game_speed+0x76>
	}
	else if (game_speed == game_speed_extreme){
    1162:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <game_speed_extreme>
    1166:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <game_speed_extreme+0x1>
    116a:	82 17       	cp	r24, r18
    116c:	93 07       	cpc	r25, r19
    116e:	41 f4       	brne	.+16     	; 0x1180 <display_game_speed+0x76>
		printf("Game Speed: Extreme");
    1170:	84 ed       	ldi	r24, 0xD4	; 212
    1172:	94 e0       	ldi	r25, 0x04	; 4
    1174:	9f 93       	push	r25
    1176:	8f 93       	push	r24
    1178:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
	}
	update_terminal_score(score);
    1180:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
    1184:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
    1188:	0e 94 34 04 	call	0x868	; 0x868 <update_terminal_score>
    118c:	08 95       	ret

0000118e <update_ssd>:
}

void update_ssd(void){
	//LOGIC FOR SSD
	digit = 1 ^ digit;
    118e:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <digit>
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	89 27       	eor	r24, r25
    1196:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <digit>
	//trying to get
	if(digit == 0) {
    119a:	81 11       	cpse	r24, r1
    119c:	31 c0       	rjmp	.+98     	; 0x1200 <update_ssd+0x72>
		if (score > 9) {
    119e:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
    11a2:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
    11a6:	8a 30       	cpi	r24, 0x0A	; 10
    11a8:	91 05       	cpc	r25, r1
    11aa:	54 f0       	brlt	.+20     	; 0x11c0 <update_ssd+0x32>
			PORTC = seven_seg[ (score) % 10];
    11ac:	6a e0       	ldi	r22, 0x0A	; 10
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	0e 94 ad 13 	call	0x275a	; 0x275a <__divmodhi4>
    11b4:	fc 01       	movw	r30, r24
    11b6:	e2 5f       	subi	r30, 0xF2	; 242
    11b8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ba:	80 81       	ld	r24, Z
    11bc:	88 b9       	out	0x08, r24	; 8
    11be:	3c c0       	rjmp	.+120    	; 0x1238 <update_ssd+0xaa>
		}
		else if (score >=-9 && score < 0) {
    11c0:	9c 01       	movw	r18, r24
    11c2:	27 5f       	subi	r18, 0xF7	; 247
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	29 30       	cpi	r18, 0x09	; 9
    11c8:	31 05       	cpc	r19, r1
    11ca:	68 f4       	brcc	.+26     	; 0x11e6 <update_ssd+0x58>
			PORTC = seven_seg[abs(score)];
    11cc:	9c 01       	movw	r18, r24
    11ce:	99 23       	and	r25, r25
    11d0:	24 f4       	brge	.+8      	; 0x11da <update_ssd+0x4c>
    11d2:	22 27       	eor	r18, r18
    11d4:	33 27       	eor	r19, r19
    11d6:	28 1b       	sub	r18, r24
    11d8:	39 0b       	sbc	r19, r25
    11da:	f9 01       	movw	r30, r18
    11dc:	e2 5f       	subi	r30, 0xF2	; 242
    11de:	fe 4f       	sbci	r31, 0xFE	; 254
    11e0:	80 81       	ld	r24, Z
    11e2:	88 b9       	out	0x08, r24	; 8
    11e4:	29 c0       	rjmp	.+82     	; 0x1238 <update_ssd+0xaa>
		}
		else if (score < -9) {
    11e6:	87 3f       	cpi	r24, 0xF7	; 247
    11e8:	2f ef       	ldi	r18, 0xFF	; 255
    11ea:	92 07       	cpc	r25, r18
    11ec:	1c f4       	brge	.+6      	; 0x11f4 <update_ssd+0x66>
			PORTC =  0b01000000;
    11ee:	80 e4       	ldi	r24, 0x40	; 64
    11f0:	88 b9       	out	0x08, r24	; 8
    11f2:	22 c0       	rjmp	.+68     	; 0x1238 <update_ssd+0xaa>
		}
		else{
			PORTC = seven_seg[score];
    11f4:	fc 01       	movw	r30, r24
    11f6:	e2 5f       	subi	r30, 0xF2	; 242
    11f8:	fe 4f       	sbci	r31, 0xFE	; 254
    11fa:	80 81       	ld	r24, Z
    11fc:	88 b9       	out	0x08, r24	; 8
    11fe:	1c c0       	rjmp	.+56     	; 0x1238 <update_ssd+0xaa>
		}
	}
	//If the digit is 1
	else {
		if (score > 9) {
    1200:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
    1204:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
    1208:	8a 30       	cpi	r24, 0x0A	; 10
    120a:	91 05       	cpc	r25, r1
    120c:	7c f0       	brlt	.+30     	; 0x122c <update_ssd+0x9e>
			PORTC = seven_seg[ (score / 10) % 10];
    120e:	2a e0       	ldi	r18, 0x0A	; 10
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	b9 01       	movw	r22, r18
    1214:	0e 94 ad 13 	call	0x275a	; 0x275a <__divmodhi4>
    1218:	cb 01       	movw	r24, r22
    121a:	b9 01       	movw	r22, r18
    121c:	0e 94 ad 13 	call	0x275a	; 0x275a <__divmodhi4>
    1220:	fc 01       	movw	r30, r24
    1222:	e2 5f       	subi	r30, 0xF2	; 242
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	80 81       	ld	r24, Z
    1228:	88 b9       	out	0x08, r24	; 8
    122a:	06 c0       	rjmp	.+12     	; 0x1238 <update_ssd+0xaa>
		}
		else if (score < 0) {
    122c:	99 23       	and	r25, r25
    122e:	1c f4       	brge	.+6      	; 0x1236 <update_ssd+0xa8>
			PORTC = 0b01000000; //Display negative sign
    1230:	80 e4       	ldi	r24, 0x40	; 64
    1232:	88 b9       	out	0x08, r24	; 8
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <update_ssd+0xaa>
		}
		else {
			PORTC = 0;
    1236:	18 b8       	out	0x08, r1	; 8
	
	/* Output the digit selection (CC) bit */
	
	//Need to preserve other bits as things like L7 use PORTD
	
	if (digit == 1) {
    1238:	90 91 13 06 	lds	r25, 0x0613	; 0x800613 <digit>
    123c:	91 30       	cpi	r25, 0x01	; 1
    123e:	51 f4       	brne	.+20     	; 0x1254 <update_ssd+0xc6>
		PORTD |= (digit << PORTD2);
    1240:	2b b1       	in	r18, 0x0b	; 11
    1242:	89 2f       	mov	r24, r25
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	88 0f       	add	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	82 2b       	or	r24, r18
    1250:	8b b9       	out	0x0b, r24	; 11
    1252:	03 c0       	rjmp	.+6      	; 0x125a <update_ssd+0xcc>
	}
	else{
		PORTD &= ~(1 << PORTD2);
    1254:	8b b1       	in	r24, 0x0b	; 11
    1256:	8b 7f       	andi	r24, 0xFB	; 251
    1258:	8b b9       	out	0x0b, r24	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    125a:	80 e1       	ldi	r24, 0x10	; 16
    125c:	97 e2       	ldi	r25, 0x27	; 39
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <update_ssd+0xd0>
    1262:	08 95       	ret

00001264 <print_track>:
	}
	_delay_ms(5); //To prevent ghosting
}

void print_track(void){
	if (current_track == 2){
    1264:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <current_track>
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	49 f4       	brne	.+18     	; 0x127e <print_track+0x1a>
		printf("Selected Track: A Battle For Time");
    126c:	88 ee       	ldi	r24, 0xE8	; 232
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	9f 93       	push	r25
    1272:	8f 93       	push	r24
    1274:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	08 95       	ret
	}
	else if (current_track == 1) {
    127e:	81 30       	cpi	r24, 0x01	; 1
    1280:	49 f4       	brne	.+18     	; 0x1294 <print_track+0x30>
		printf("Selected Track: How Far I Could Go");
    1282:	8a e0       	ldi	r24, 0x0A	; 10
    1284:	95 e0       	ldi	r25, 0x05	; 5
    1286:	9f 93       	push	r25
    1288:	8f 93       	push	r24
    128a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	08 95       	ret
	}
	else if (current_track == 0){
    1294:	81 11       	cpse	r24, r1
    1296:	08 c0       	rjmp	.+16     	; 0x12a8 <print_track+0x44>
		printf("Selected Track: Through the Fire and Flames");
    1298:	8d e2       	ldi	r24, 0x2D	; 45
    129a:	95 e0       	ldi	r25, 0x05	; 5
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
    12a0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	08 95       	ret

000012aa <initialise_hardware>:
	}
}

void initialise_hardware(void)
{
	ledmatrix_setup();
    12aa:	0e 94 41 08 	call	0x1082	; 0x1082 <ledmatrix_setup>
	init_button_interrupts();
    12ae:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <init_button_interrupts>
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	7b e4       	ldi	r23, 0x4B	; 75
    12b8:	80 e0       	ldi	r24, 0x00	; 0
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 32 10 	call	0x2064	; 0x2064 <init_serial_stdio>
	
	init_timer0();
    12c0:	0e 94 8e 11 	call	0x231c	; 0x231c <init_timer0>
	init_timer1();
    12c4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <init_timer1>
	init_timer2();
    12c8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <init_timer2>
	
	// Turn on global interrupts
	sei();
    12cc:	78 94       	sei
    12ce:	08 95       	ret

000012d0 <start_screen>:
}

void start_screen(void)
{
    12d0:	4f 92       	push	r4
    12d2:	5f 92       	push	r5
    12d4:	6f 92       	push	r6
    12d6:	7f 92       	push	r7
    12d8:	8f 92       	push	r8
    12da:	9f 92       	push	r9
    12dc:	af 92       	push	r10
    12de:	bf 92       	push	r11
    12e0:	cf 92       	push	r12
    12e2:	df 92       	push	r13
    12e4:	ef 92       	push	r14
    12e6:	ff 92       	push	r15
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
	PORTC = 0; //Turn off SSD
    12ec:	18 b8       	out	0x08, r1	; 8
	//Reset manual mode
	manual_mode = 0;
    12ee:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <manual_mode>
	// Clear terminal screen and output a message
	clear_terminal();
    12f2:	0e 94 5d 11 	call	0x22ba	; 0x22ba <clear_terminal>
	show_cursor();
    12f6:	0e 94 85 11 	call	0x230a	; 0x230a <show_cursor>
	clear_terminal();
    12fa:	0e 94 5d 11 	call	0x22ba	; 0x22ba <clear_terminal>
	hide_cursor();
    12fe:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <hide_cursor>
	set_display_attribute(FG_WHITE);
    1302:	85 e2       	ldi	r24, 0x25	; 37
    1304:	0e 94 6f 11 	call	0x22de	; 0x22de <set_display_attribute>
	move_terminal_cursor(10,4);
    1308:	64 e0       	ldi	r22, 0x04	; 4
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	8a e0       	ldi	r24, 0x0A	; 10
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("  ______   __     __  _______         __    __"));
    1314:	8d e2       	ldi	r24, 0x2D	; 45
    1316:	93 e0       	ldi	r25, 0x03	; 3
    1318:	9f 93       	push	r25
    131a:	8f 93       	push	r24
    131c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,5);
    1320:	65 e0       	ldi	r22, 0x05	; 5
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	8a e0       	ldi	r24, 0x0A	; 10
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR(" /      \\ |  \\   |  \\|       \\       |  \\  |  \\"));
    132c:	8d ef       	ldi	r24, 0xFD	; 253
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	9f 93       	push	r25
    1332:	8f 93       	push	r24
    1334:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,6);
    1338:	66 e0       	ldi	r22, 0x06	; 6
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	8a e0       	ldi	r24, 0x0A	; 10
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("|  $$$$$$\\| $$   | $$| $$$$$$$\\      | $$  | $$  ______    ______    ______"));
    1344:	81 eb       	ldi	r24, 0xB1	; 177
    1346:	92 e0       	ldi	r25, 0x02	; 2
    1348:	9f 93       	push	r25
    134a:	8f 93       	push	r24
    134c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,7);
    1350:	67 e0       	ldi	r22, 0x07	; 7
    1352:	70 e0       	ldi	r23, 0x00	; 0
    1354:	8a e0       	ldi	r24, 0x0A	; 10
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("| $$__| $$| $$   | $$| $$__| $$      | $$__| $$ /      \\  /      \\  /      \\"));
    135c:	84 e6       	ldi	r24, 0x64	; 100
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	9f 93       	push	r25
    1362:	8f 93       	push	r24
    1364:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,8);
    1368:	68 e0       	ldi	r22, 0x08	; 8
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	8a e0       	ldi	r24, 0x0A	; 10
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("| $$    $$ \\$$\\ /  $$| $$    $$      | $$    $$|  $$$$$$\\|  $$$$$$\\|  $$$$$$\\"));
    1374:	86 e1       	ldi	r24, 0x16	; 22
    1376:	92 e0       	ldi	r25, 0x02	; 2
    1378:	9f 93       	push	r25
    137a:	8f 93       	push	r24
    137c:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,9);
    1380:	69 e0       	ldi	r22, 0x09	; 9
    1382:	70 e0       	ldi	r23, 0x00	; 0
    1384:	8a e0       	ldi	r24, 0x0A	; 10
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("| $$$$$$$$  \\$$\\  $$ | $$$$$$$\\      | $$$$$$$$| $$    $$| $$   \\$$| $$  | $$"));
    138c:	88 ec       	ldi	r24, 0xC8	; 200
    138e:	91 e0       	ldi	r25, 0x01	; 1
    1390:	9f 93       	push	r25
    1392:	8f 93       	push	r24
    1394:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,10);
    1398:	6a e0       	ldi	r22, 0x0A	; 10
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	8a e0       	ldi	r24, 0x0A	; 10
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$   \\$$ $$  | $$  | $$      | $$  | $$| $$$$$$$$| $$      | $$__/ $$"));
    13a4:	8a e7       	ldi	r24, 0x7A	; 122
    13a6:	91 e0       	ldi	r25, 0x01	; 1
    13a8:	9f 93       	push	r25
    13aa:	8f 93       	push	r24
    13ac:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,11);
    13b0:	6b e0       	ldi	r22, 0x0B	; 11
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	8a e0       	ldi	r24, 0x0A	; 10
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("| $$  | $$    \\$$$   | $$  | $$      | $$  | $$ \\$$     \\| $$       \\$$    $$"));
    13bc:	8c e2       	ldi	r24, 0x2C	; 44
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	9f 93       	push	r25
    13c2:	8f 93       	push	r24
    13c4:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,12);
    13c8:	6c e0       	ldi	r22, 0x0C	; 12
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	8a e0       	ldi	r24, 0x0A	; 10
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR(" \\$$   \\$$     \\$     \\$$   \\$$       \\$$   \\$$  \\$$$$$$$ \\$$        \\$$$$$$"));
    13d4:	8f ed       	ldi	r24, 0xDF	; 223
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9f 93       	push	r25
    13da:	8f 93       	push	r24
    13dc:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,14);
    13e0:	6e e0       	ldi	r22, 0x0E	; 14
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	8a e0       	ldi	r24, 0x0A	; 10
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	// change this to your name and student number; remove the chevrons <>
	printf_P(PSTR("CSSE2010/7201 A2 by Alvin Benny - 48012836"));
    13ec:	84 eb       	ldi	r24, 0xB4	; 180
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	
	// Output the static start screen and wait for a push button 
	// to be pushed or a serial input of 's'
	show_start_screen();
    13f8:	0e 94 a0 02 	call	0x540	; 0x540 <show_start_screen>

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
    13fc:	0e 94 a4 11 	call	0x2348	; 0x2348 <get_current_time>
    1400:	4b 01       	movw	r8, r22
    1402:	5c 01       	movw	r10, r24
	
	uint8_t frame_number = 0;
	move_terminal_cursor(10,18);
    1404:	62 e1       	ldi	r22, 0x12	; 18
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	8a e0       	ldi	r24, 0x0A	; 10
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	clear_to_end_of_line();
    1410:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
	game_speed = 1000;
    1414:	88 ee       	ldi	r24, 0xE8	; 232
    1416:	93 e0       	ldi	r25, 0x03	; 3
    1418:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <game_speed+0x1>
    141c:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <game_speed>
	printf("Game Speed: Normal");
    1420:	80 eb       	ldi	r24, 0xB0	; 176
    1422:	94 e0       	ldi	r25, 0x04	; 4
    1424:	9f 93       	push	r25
    1426:	8f 93       	push	r24
    1428:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
	current_track = 0;
    142c:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <current_track>
	move_terminal_cursor(10,20);
    1430:	64 e1       	ldi	r22, 0x14	; 20
    1432:	70 e0       	ldi	r23, 0x00	; 0
    1434:	8a e0       	ldi	r24, 0x0A	; 10
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf("Selected Track: Through the Fire and Flames");
    143c:	8d e2       	ldi	r24, 0x2D	; 45
    143e:	95 e0       	ldi	r25, 0x05	; 5
    1440:	9f 93       	push	r25
    1442:	8f 93       	push	r24
    1444:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    1448:	8d b7       	in	r24, 0x3d	; 61
    144a:	9e b7       	in	r25, 0x3e	; 62
    144c:	48 96       	adiw	r24, 0x18	; 24
    144e:	0f b6       	in	r0, 0x3f	; 63
    1450:	f8 94       	cli
    1452:	9e bf       	out	0x3e, r25	; 62
    1454:	0f be       	out	0x3f, r0	; 63
    1456:	8d bf       	out	0x3d, r24	; 61
	show_start_screen();

	uint32_t last_screen_update, current_time;
	last_screen_update = get_current_time();
	
	uint8_t frame_number = 0;
    1458:	d0 e0       	ldi	r29, 0x00	; 0
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
		if (serial_input_available())
    145a:	0e 94 79 10 	call	0x20f2	; 0x20f2 <serial_input_available>
    145e:	88 23       	and	r24, r24
    1460:	41 f0       	breq	.+16     	; 0x1472 <start_screen+0x1a2>
		{
			serial_input = fgetc(stdin);
    1462:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <__iob>
    1466:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <__iob+0x1>
    146a:	0e 94 25 14 	call	0x284a	; 0x284a <fgetc>
    146e:	c8 2f       	mov	r28, r24
    1470:	01 c0       	rjmp	.+2      	; 0x1474 <start_screen+0x1a4>
		
		// First check for if a 's' is pressed
		// There are two steps to this
		// 1) collect any serial input (if available)
		// 2) check if the input is equal to the character 's'
		char serial_input = -1;
    1472:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
			serial_input = fgetc(stdin);
		}
		
		move_terminal_cursor(10,16);
    1474:	60 e1       	ldi	r22, 0x10	; 16
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	8a e0       	ldi	r24, 0x0A	; 10
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		//manual mode
		if ((serial_input == 'M' || serial_input == 'm') && !manual_mode){
    1480:	cd 34       	cpi	r28, 0x4D	; 77
    1482:	11 f0       	breq	.+4      	; 0x1488 <start_screen+0x1b8>
    1484:	cd 36       	cpi	r28, 0x6D	; 109
    1486:	81 f4       	brne	.+32     	; 0x14a8 <start_screen+0x1d8>
    1488:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <manual_mode>
    148c:	81 11       	cpse	r24, r1
    148e:	0c c0       	rjmp	.+24     	; 0x14a8 <start_screen+0x1d8>
			printf("Manual Mode");
    1490:	89 e5       	ldi	r24, 0x59	; 89
    1492:	95 e0       	ldi	r25, 0x05	; 5
    1494:	9f 93       	push	r25
    1496:	8f 93       	push	r24
    1498:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
			manual_mode = 1;
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <manual_mode>
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0c c0       	rjmp	.+24     	; 0x14c0 <start_screen+0x1f0>
		}
		else if ((serial_input == 'M' || serial_input == 'm') && manual_mode) {
    14a8:	cd 34       	cpi	r28, 0x4D	; 77
    14aa:	11 f0       	breq	.+4      	; 0x14b0 <start_screen+0x1e0>
    14ac:	cd 36       	cpi	r28, 0x6D	; 109
    14ae:	41 f4       	brne	.+16     	; 0x14c0 <start_screen+0x1f0>
    14b0:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <manual_mode>
    14b4:	88 23       	and	r24, r24
    14b6:	21 f0       	breq	.+8      	; 0x14c0 <start_screen+0x1f0>
			clear_to_end_of_line();
    14b8:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			manual_mode = 0;
    14bc:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <manual_mode>
		}
		
		if (serial_input == '1') {
    14c0:	c1 33       	cpi	r28, 0x31	; 49
    14c2:	b9 f4       	brne	.+46     	; 0x14f2 <start_screen+0x222>
			game_speed = 1000;
    14c4:	88 ee       	ldi	r24, 0xE8	; 232
    14c6:	93 e0       	ldi	r25, 0x03	; 3
    14c8:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <game_speed+0x1>
    14cc:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <game_speed>
			move_terminal_cursor(10,18);
    14d0:	62 e1       	ldi	r22, 0x12	; 18
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	8a e0       	ldi	r24, 0x0A	; 10
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			clear_to_end_of_line();
    14dc:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			printf("Game Speed: Normal");
    14e0:	80 eb       	ldi	r24, 0xB0	; 176
    14e2:	94 e0       	ldi	r25, 0x04	; 4
    14e4:	9f 93       	push	r25
    14e6:	8f 93       	push	r24
    14e8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	31 c0       	rjmp	.+98     	; 0x1554 <start_screen+0x284>
		}
		else if (serial_input == '2'){
    14f2:	c2 33       	cpi	r28, 0x32	; 50
    14f4:	b9 f4       	brne	.+46     	; 0x1524 <start_screen+0x254>
			game_speed = 500;
    14f6:	84 ef       	ldi	r24, 0xF4	; 244
    14f8:	91 e0       	ldi	r25, 0x01	; 1
    14fa:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <game_speed+0x1>
    14fe:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <game_speed>
			move_terminal_cursor(10,18);
    1502:	62 e1       	ldi	r22, 0x12	; 18
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	8a e0       	ldi	r24, 0x0A	; 10
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			clear_to_end_of_line();
    150e:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			printf("Game Speed: Fast");
    1512:	83 ec       	ldi	r24, 0xC3	; 195
    1514:	94 e0       	ldi	r25, 0x04	; 4
    1516:	9f 93       	push	r25
    1518:	8f 93       	push	r24
    151a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	18 c0       	rjmp	.+48     	; 0x1554 <start_screen+0x284>
				
		}
		else if (serial_input == '3') {
    1524:	c3 33       	cpi	r28, 0x33	; 51
    1526:	b1 f4       	brne	.+44     	; 0x1554 <start_screen+0x284>
			game_speed = 250;
    1528:	8a ef       	ldi	r24, 0xFA	; 250
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <game_speed+0x1>
    1530:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <game_speed>
			move_terminal_cursor(10,18);
    1534:	62 e1       	ldi	r22, 0x12	; 18
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	8a e0       	ldi	r24, 0x0A	; 10
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			clear_to_end_of_line();
    1540:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			printf("Game Speed: Extreme");
    1544:	84 ed       	ldi	r24, 0xD4	; 212
    1546:	94 e0       	ldi	r25, 0x04	; 4
    1548:	9f 93       	push	r25
    154a:	8f 93       	push	r24
    154c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
			
		}
		
		
		//Currently hardcoded
		if ((serial_input == 'T' || serial_input == 't')) {
    1554:	c4 35       	cpi	r28, 0x54	; 84
    1556:	11 f0       	breq	.+4      	; 0x155c <start_screen+0x28c>
    1558:	c4 37       	cpi	r28, 0x74	; 116
    155a:	89 f5       	brne	.+98     	; 0x15be <start_screen+0x2ee>
			current_track = current_track + 1;
    155c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <current_track>
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	80 93 84 05 	sts	0x0584, r24	; 0x800584 <current_track>
			move_terminal_cursor(10,20);
    1566:	64 e1       	ldi	r22, 0x14	; 20
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	8a e0       	ldi	r24, 0x0A	; 10
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			clear_to_end_of_line();
    1572:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			if (current_track > 2) {
    1576:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <current_track>
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	58 f0       	brcs	.+22     	; 0x1594 <start_screen+0x2c4>
				current_track = 0;
    157e:	10 92 84 05 	sts	0x0584, r1	; 0x800584 <current_track>
				printf("Selected Track: Through the Fire and Flames");
    1582:	8d e2       	ldi	r24, 0x2D	; 45
    1584:	95 e0       	ldi	r25, 0x05	; 5
    1586:	9f 93       	push	r25
    1588:	8f 93       	push	r24
    158a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	15 c0       	rjmp	.+42     	; 0x15be <start_screen+0x2ee>
			}
			else if (current_track == 2){
    1594:	82 30       	cpi	r24, 0x02	; 2
    1596:	49 f4       	brne	.+18     	; 0x15aa <start_screen+0x2da>
				printf("Selected Track: A Battle For Time");
    1598:	88 ee       	ldi	r24, 0xE8	; 232
    159a:	94 e0       	ldi	r25, 0x04	; 4
    159c:	9f 93       	push	r25
    159e:	8f 93       	push	r24
    15a0:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0a c0       	rjmp	.+20     	; 0x15be <start_screen+0x2ee>
			}
			else if (current_track == 1) {
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	41 f4       	brne	.+16     	; 0x15be <start_screen+0x2ee>
				printf("Selected Track: How Far I Could Go");
    15ae:	8a e0       	ldi	r24, 0x0A	; 10
    15b0:	95 e0       	ldi	r25, 0x05	; 5
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
			}
		}

		
		// If the serial input is 's', then exit the start screen
		if (serial_input == 's' || serial_input == 'S')
    15be:	c3 37       	cpi	r28, 0x73	; 115
    15c0:	b1 f1       	breq	.+108    	; 0x162e <start_screen+0x35e>
    15c2:	c3 35       	cpi	r28, 0x53	; 83
    15c4:	a1 f1       	breq	.+104    	; 0x162e <start_screen+0x35e>
		{
			break;
		}
		
		// Next check for any button presses
		int8_t btn = button_pushed();
    15c6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
		if (btn != NO_BUTTON_PUSHED)
    15ca:	8f 3f       	cpi	r24, 0xFF	; 255
    15cc:	81 f5       	brne	.+96     	; 0x162e <start_screen+0x35e>
		{
			break;
		}

		// every 200 ms, update the animation
		current_time = get_current_time();
    15ce:	0e 94 a4 11 	call	0x2348	; 0x2348 <get_current_time>
    15d2:	6b 01       	movw	r12, r22
    15d4:	7c 01       	movw	r14, r24
		if (current_time - last_screen_update > game_speed/5)
    15d6:	2b 01       	movw	r4, r22
    15d8:	3c 01       	movw	r6, r24
    15da:	48 18       	sub	r4, r8
    15dc:	59 08       	sbc	r5, r9
    15de:	6a 08       	sbc	r6, r10
    15e0:	7b 08       	sbc	r7, r11
    15e2:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <game_speed>
    15e6:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <game_speed+0x1>
    15ea:	ad ec       	ldi	r26, 0xCD	; 205
    15ec:	bc ec       	ldi	r27, 0xCC	; 204
    15ee:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
    15f2:	96 95       	lsr	r25
    15f4:	87 95       	ror	r24
    15f6:	96 95       	lsr	r25
    15f8:	87 95       	ror	r24
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	84 15       	cp	r24, r4
    1600:	95 05       	cpc	r25, r5
    1602:	a6 05       	cpc	r26, r6
    1604:	b7 05       	cpc	r27, r7
    1606:	08 f0       	brcs	.+2      	; 0x160a <start_screen+0x33a>
    1608:	28 cf       	rjmp	.-432    	; 0x145a <start_screen+0x18a>
		{
			update_start_screen(frame_number);
    160a:	8d 2f       	mov	r24, r29
    160c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <update_start_screen>
			frame_number = (frame_number + 1) % 32;
    1610:	8d 2f       	mov	r24, r29
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	01 96       	adiw	r24, 0x01	; 1
    1616:	8f 71       	andi	r24, 0x1F	; 31
    1618:	90 78       	andi	r25, 0x80	; 128
    161a:	99 23       	and	r25, r25
    161c:	24 f4       	brge	.+8      	; 0x1626 <start_screen+0x356>
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	80 6e       	ori	r24, 0xE0	; 224
    1622:	9f 6f       	ori	r25, 0xFF	; 255
    1624:	01 96       	adiw	r24, 0x01	; 1
    1626:	d8 2f       	mov	r29, r24
			last_screen_update = current_time;
    1628:	46 01       	movw	r8, r12
    162a:	57 01       	movw	r10, r14
    162c:	16 cf       	rjmp	.-468    	; 0x145a <start_screen+0x18a>
		}
	}
}
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	08 95       	ret

0000164c <play_game>:
	(void)button_pushed();
	clear_serial_input_buffer();
}

void play_game(void)
{
    164c:	4f 92       	push	r4
    164e:	5f 92       	push	r5
    1650:	6f 92       	push	r6
    1652:	7f 92       	push	r7
    1654:	8f 92       	push	r8
    1656:	9f 92       	push	r9
    1658:	af 92       	push	r10
    165a:	bf 92       	push	r11
    165c:	cf 92       	push	r12
    165e:	df 92       	push	r13
    1660:	ef 92       	push	r14
    1662:	ff 92       	push	r15
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
	
	uint32_t last_advance_time, current_time, last_off_time;
	uint8_t btn; // The button pushed
	
	last_advance_time = get_current_time();
    1668:	0e 94 a4 11 	call	0x2348	; 0x2348 <get_current_time>
    166c:	2b 01       	movw	r4, r22
    166e:	3c 01       	movw	r6, r24
	last_off_time = get_current_time();
    1670:	0e 94 a4 11 	call	0x2348	; 0x2348 <get_current_time>
    1674:	4b 01       	movw	r8, r22
    1676:	5c 01       	movw	r10, r24
	notes_pressed = 0; //initialise the notes passed to 0
    1678:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <notes_pressed>
	
	
	// We play the game until it's over
	while (!is_game_over())
    167c:	1c c1       	rjmp	.+568    	; 0x18b6 <play_game+0x26a>
	{
		
		update_ssd();
    167e:	0e 94 c7 08 	call	0x118e	; 0x118e <update_ssd>
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
    1682:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
    1686:	d8 2f       	mov	r29, r24
		char serial_input = -1; //collect serial input
		if (serial_input_available())
    1688:	0e 94 79 10 	call	0x20f2	; 0x20f2 <serial_input_available>
    168c:	88 23       	and	r24, r24
    168e:	41 f0       	breq	.+16     	; 0x16a0 <play_game+0x54>
		{
		serial_input = fgetc(stdin);
    1690:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <__iob>
    1694:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <__iob+0x1>
    1698:	0e 94 25 14 	call	0x284a	; 0x284a <fgetc>
    169c:	c8 2f       	mov	r28, r24
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <play_game+0x56>
		// We need to check if any button has been pushed, this will be
		// NO_BUTTON_PUSHED if no button has been pushed
		// Checkout the function comment in `buttons.h` and the implementation
		// in `buttons.c`.
		btn = button_pushed();
		char serial_input = -1; //collect serial input
    16a0:	cf ef       	ldi	r28, 0xFF	; 255
		if (serial_input_available())
		{
		serial_input = fgetc(stdin);
		}
		if (((btn == BUTTON0_PUSHED) || serial_input == 'f' || serial_input == 'F')&& !game_paused)
    16a2:	dd 23       	and	r29, r29
    16a4:	21 f0       	breq	.+8      	; 0x16ae <play_game+0x62>
    16a6:	c6 36       	cpi	r28, 0x66	; 102
    16a8:	11 f0       	breq	.+4      	; 0x16ae <play_game+0x62>
    16aa:	c6 34       	cpi	r28, 0x46	; 70
    16ac:	41 f4       	brne	.+16     	; 0x16be <play_game+0x72>
    16ae:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    16b2:	81 11       	cpse	r24, r1
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <play_game+0x72>
		{
			// If button 0 play the lowest note (right lane)
			play_note(3);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <play_note>
    16bc:	28 c0       	rjmp	.+80     	; 0x170e <play_game+0xc2>
		}
		
		else if (((btn == BUTTON1_PUSHED) || serial_input == 'd' || serial_input == 'D') && !game_paused)
    16be:	d1 30       	cpi	r29, 0x01	; 1
    16c0:	21 f0       	breq	.+8      	; 0x16ca <play_game+0x7e>
    16c2:	c4 36       	cpi	r28, 0x64	; 100
    16c4:	11 f0       	breq	.+4      	; 0x16ca <play_game+0x7e>
    16c6:	c4 34       	cpi	r28, 0x44	; 68
    16c8:	41 f4       	brne	.+16     	; 0x16da <play_game+0x8e>
    16ca:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    16ce:	81 11       	cpse	r24, r1
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <play_game+0x8e>
		{
			play_note(2);
    16d2:	82 e0       	ldi	r24, 0x02	; 2
    16d4:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <play_note>
    16d8:	1a c0       	rjmp	.+52     	; 0x170e <play_game+0xc2>
		}
		
		else if (((btn == BUTTON2_PUSHED) || serial_input == 's' || serial_input == 'S' )&& !game_paused){
    16da:	d2 30       	cpi	r29, 0x02	; 2
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <play_game+0x9a>
    16de:	c3 37       	cpi	r28, 0x73	; 115
    16e0:	11 f0       	breq	.+4      	; 0x16e6 <play_game+0x9a>
    16e2:	c3 35       	cpi	r28, 0x53	; 83
    16e4:	41 f4       	brne	.+16     	; 0x16f6 <play_game+0xaa>
    16e6:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    16ea:	81 11       	cpse	r24, r1
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <play_game+0xaa>
			play_note(1);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <play_note>
    16f4:	0c c0       	rjmp	.+24     	; 0x170e <play_game+0xc2>
		}
		
		else if (((btn == BUTTON3_PUSHED) || serial_input == 'a' || serial_input == 'A')&& !game_paused) {
    16f6:	d3 30       	cpi	r29, 0x03	; 3
    16f8:	21 f0       	breq	.+8      	; 0x1702 <play_game+0xb6>
    16fa:	c1 36       	cpi	r28, 0x61	; 97
    16fc:	11 f0       	breq	.+4      	; 0x1702 <play_game+0xb6>
    16fe:	c1 34       	cpi	r28, 0x41	; 65
    1700:	31 f4       	brne	.+12     	; 0x170e <play_game+0xc2>
    1702:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    1706:	81 11       	cpse	r24, r1
    1708:	02 c0       	rjmp	.+4      	; 0x170e <play_game+0xc2>
			play_note(0);
    170a:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <play_note>
		}

	
		if ((serial_input == 'M' || serial_input == 'm') && !manual_mode){
    170e:	cd 34       	cpi	r28, 0x4D	; 77
    1710:	11 f0       	breq	.+4      	; 0x1716 <play_game+0xca>
    1712:	cd 36       	cpi	r28, 0x6D	; 109
    1714:	c1 f4       	brne	.+48     	; 0x1746 <play_game+0xfa>
    1716:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <manual_mode>
    171a:	81 11       	cpse	r24, r1
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <play_game+0xfa>
			move_terminal_cursor(10,6);
    171e:	66 e0       	ldi	r22, 0x06	; 6
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	8a e0       	ldi	r24, 0x0A	; 10
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			printf("Manual Mode");
    172a:	89 e5       	ldi	r24, 0x59	; 89
    172c:	95 e0       	ldi	r25, 0x05	; 5
    172e:	9f 93       	push	r25
    1730:	8f 93       	push	r24
    1732:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
			manual_mode = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	80 93 7b 05 	sts	0x057B, r24	; 0x80057b <manual_mode>
			notes_pressed = 0;
    173c:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <notes_pressed>
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	12 c0       	rjmp	.+36     	; 0x176a <play_game+0x11e>
			
		}
		else if ((serial_input == 'M' || serial_input == 'm') && manual_mode) {
    1746:	cd 34       	cpi	r28, 0x4D	; 77
    1748:	11 f0       	breq	.+4      	; 0x174e <play_game+0x102>
    174a:	cd 36       	cpi	r28, 0x6D	; 109
    174c:	71 f4       	brne	.+28     	; 0x176a <play_game+0x11e>
    174e:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <manual_mode>
    1752:	88 23       	and	r24, r24
    1754:	51 f0       	breq	.+20     	; 0x176a <play_game+0x11e>
			move_terminal_cursor(10,6);
    1756:	66 e0       	ldi	r22, 0x06	; 6
    1758:	70 e0       	ldi	r23, 0x00	; 0
    175a:	8a e0       	ldi	r24, 0x0A	; 10
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			clear_to_end_of_line();
    1762:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			manual_mode = 0;	
    1766:	10 92 7b 05 	sts	0x057B, r1	; 0x80057b <manual_mode>
		}
		
		if ((serial_input == 'P' || serial_input == 'p') && !game_paused){
    176a:	c0 35       	cpi	r28, 0x50	; 80
    176c:	11 f0       	breq	.+4      	; 0x1772 <play_game+0x126>
    176e:	c0 37       	cpi	r28, 0x70	; 112
    1770:	e9 f4       	brne	.+58     	; 0x17ac <play_game+0x160>
    1772:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    1776:	81 11       	cpse	r24, r1
    1778:	19 c0       	rjmp	.+50     	; 0x17ac <play_game+0x160>
			move_terminal_cursor(10,10);
    177a:	6a e0       	ldi	r22, 0x0A	; 10
    177c:	70 e0       	ldi	r23, 0x00	; 0
    177e:	8a e0       	ldi	r24, 0x0A	; 10
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			printf("Game Paused");
    1786:	85 e6       	ldi	r24, 0x65	; 101
    1788:	95 e0       	ldi	r25, 0x05	; 5
    178a:	9f 93       	push	r25
    178c:	8f 93       	push	r24
    178e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
			game_paused = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <game_paused>
			PORTD |= (1 << PORTD3);
    1798:	8b b1       	in	r24, 0x0b	; 11
    179a:	88 60       	ori	r24, 0x08	; 8
    179c:	8b b9       	out	0x0b, r24	; 11
			OCR1B = 0;
    179e:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    17a2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	21 c0       	rjmp	.+66     	; 0x17ee <play_game+0x1a2>
			
		}
		else if ((serial_input == 'P' || serial_input == 'p') && game_paused){
    17ac:	c0 35       	cpi	r28, 0x50	; 80
    17ae:	11 f0       	breq	.+4      	; 0x17b4 <play_game+0x168>
    17b0:	c0 37       	cpi	r28, 0x70	; 112
    17b2:	e9 f4       	brne	.+58     	; 0x17ee <play_game+0x1a2>
    17b4:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    17b8:	88 23       	and	r24, r24
    17ba:	c9 f0       	breq	.+50     	; 0x17ee <play_game+0x1a2>
			move_terminal_cursor(10,10);	
    17bc:	6a e0       	ldi	r22, 0x0A	; 10
    17be:	70 e0       	ldi	r23, 0x00	; 0
    17c0:	8a e0       	ldi	r24, 0x0A	; 10
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
			clear_to_end_of_line();
    17c8:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
			game_paused = 0;
    17cc:	10 92 7a 05 	sts	0x057A, r1	; 0x80057a <game_paused>
			PORTD &= ~(1 << PORTD3);
    17d0:	8b b1       	in	r24, 0x0b	; 11
    17d2:	87 7f       	andi	r24, 0xF7	; 247
    17d4:	8b b9       	out	0x0b, r24	; 11
			OCR1B = 1 - pulsewidth;
    17d6:	20 91 0b 06 	lds	r18, 0x060B	; 0x80060b <pulsewidth>
    17da:	30 91 0c 06 	lds	r19, 0x060C	; 0x80060c <pulsewidth+0x1>
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	82 1b       	sub	r24, r18
    17e4:	93 0b       	sbc	r25, r19
    17e6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    17ea:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		}
		
		
		current_time = get_current_time();
    17ee:	0e 94 a4 11 	call	0x2348	; 0x2348 <get_current_time>
    17f2:	6b 01       	movw	r12, r22
    17f4:	7c 01       	movw	r14, r24
		if (manual_mode == 0) {
    17f6:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <manual_mode>
    17fa:	81 11       	cpse	r24, r1
    17fc:	35 c0       	rjmp	.+106    	; 0x1868 <play_game+0x21c>
			
			if (current_time >= last_off_time + game_speed){
    17fe:	80 91 14 06 	lds	r24, 0x0614	; 0x800614 <game_speed>
    1802:	90 91 15 06 	lds	r25, 0x0615	; 0x800615 <game_speed+0x1>
    1806:	a5 01       	movw	r20, r10
    1808:	94 01       	movw	r18, r8
    180a:	28 0f       	add	r18, r24
    180c:	39 1f       	adc	r19, r25
    180e:	41 1d       	adc	r20, r1
    1810:	51 1d       	adc	r21, r1
    1812:	c2 16       	cp	r12, r18
    1814:	d3 06       	cpc	r13, r19
    1816:	e4 06       	cpc	r14, r20
    1818:	f5 06       	cpc	r15, r21
    181a:	30 f0       	brcs	.+12     	; 0x1828 <play_game+0x1dc>
				//turn off any notes 
				OCR1B = 0;
    181c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1820:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
				last_off_time = current_time;
    1824:	46 01       	movw	r8, r12
    1826:	57 01       	movw	r10, r14
			}
			
			if (current_time >= last_advance_time + game_speed/5)
    1828:	20 91 14 06 	lds	r18, 0x0614	; 0x800614 <game_speed>
    182c:	30 91 15 06 	lds	r19, 0x0615	; 0x800615 <game_speed+0x1>
    1830:	ad ec       	ldi	r26, 0xCD	; 205
    1832:	bc ec       	ldi	r27, 0xCC	; 204
    1834:	0e 94 02 14 	call	0x2804	; 0x2804 <__umulhisi3>
    1838:	96 95       	lsr	r25
    183a:	87 95       	ror	r24
    183c:	96 95       	lsr	r25
    183e:	87 95       	ror	r24
    1840:	a3 01       	movw	r20, r6
    1842:	92 01       	movw	r18, r4
    1844:	28 0f       	add	r18, r24
    1846:	39 1f       	adc	r19, r25
    1848:	41 1d       	adc	r20, r1
    184a:	51 1d       	adc	r21, r1
    184c:	c2 16       	cp	r12, r18
    184e:	d3 06       	cpc	r13, r19
    1850:	e4 06       	cpc	r14, r20
    1852:	f5 06       	cpc	r15, r21
    1854:	80 f1       	brcs	.+96     	; 0x18b6 <play_game+0x26a>
			{
				// 200ms (0.2 second) has passed since the last time we advance the
				// notes here, so update the advance the notes
			
				if (!game_paused){
    1856:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <game_paused>
    185a:	81 11       	cpse	r24, r1
    185c:	2a c0       	rjmp	.+84     	; 0x18b2 <play_game+0x266>
					advance_note();
    185e:	0e 94 81 06 	call	0xd02	; 0xd02 <advance_note>

				}
				// Update the most recent time the notes were advance
				last_advance_time = current_time;	
    1862:	26 01       	movw	r4, r12
    1864:	37 01       	movw	r6, r14
    1866:	27 c0       	rjmp	.+78     	; 0x18b6 <play_game+0x26a>

			}
		}
		else {
			if ((serial_input == 'N') | (serial_input == 'n')) {
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	ce 34       	cpi	r28, 0x4E	; 78
    186c:	09 f0       	breq	.+2      	; 0x1870 <play_game+0x224>
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	ce 36       	cpi	r28, 0x6E	; 110
    1874:	09 f0       	breq	.+2      	; 0x1878 <play_game+0x22c>
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	89 2b       	or	r24, r25
    187a:	e9 f0       	breq	.+58     	; 0x18b6 <play_game+0x26a>
				advance_note();
    187c:	0e 94 81 06 	call	0xd02	; 0xd02 <advance_note>
				
				//if a note is currently being played
				if (OCR1B) {
    1880:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
    1884:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    1888:	89 2b       	or	r24, r25
    188a:	31 f0       	breq	.+12     	; 0x1898 <play_game+0x24c>
					notes_pressed = notes_pressed + 1;
    188c:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <notes_pressed>
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <notes_pressed>
    1896:	02 c0       	rjmp	.+4      	; 0x189c <play_game+0x250>
				}
				else {
					notes_pressed = 0;
    1898:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <notes_pressed>
				}

				if (notes_pressed == 5){
    189c:	80 91 16 06 	lds	r24, 0x0616	; 0x800616 <notes_pressed>
    18a0:	85 30       	cpi	r24, 0x05	; 5
    18a2:	49 f4       	brne	.+18     	; 0x18b6 <play_game+0x26a>
					
					OCR1B = 0;
    18a4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
    18a8:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
					notes_pressed = 0;
    18ac:	10 92 16 06 	sts	0x0616, r1	; 0x800616 <notes_pressed>
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <play_game+0x26a>
				if (!game_paused){
					advance_note();

				}
				// Update the most recent time the notes were advance
				last_advance_time = current_time;	
    18b2:	26 01       	movw	r4, r12
    18b4:	37 01       	movw	r6, r14
	last_off_time = get_current_time();
	notes_pressed = 0; //initialise the notes passed to 0
	
	
	// We play the game until it's over
	while (!is_game_over())
    18b6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <is_game_over>
    18ba:	88 23       	and	r24, r24
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <play_game+0x274>
    18be:	df ce       	rjmp	.-578    	; 0x167e <play_game+0x32>

		}

	}
	// We get here if the game is over.
}
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	df 90       	pop	r13
    18ca:	cf 90       	pop	r12
    18cc:	bf 90       	pop	r11
    18ce:	af 90       	pop	r10
    18d0:	9f 90       	pop	r9
    18d2:	8f 90       	pop	r8
    18d4:	7f 90       	pop	r7
    18d6:	6f 90       	pop	r6
    18d8:	5f 90       	pop	r5
    18da:	4f 90       	pop	r4
    18dc:	08 95       	ret

000018de <handle_game_over>:

void handle_game_over()
{
    18de:	cf 93       	push	r28
	move_terminal_cursor(10,4);
    18e0:	64 e0       	ldi	r22, 0x04	; 4
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	8a e0       	ldi	r24, 0x0A	; 10
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	update_terminal_score(score);
    18ec:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <score>
    18f0:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <score+0x1>
    18f4:	0e 94 34 04 	call	0x868	; 0x868 <update_terminal_score>
	move_terminal_cursor(10,6);
    18f8:	66 e0       	ldi	r22, 0x06	; 6
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	8a e0       	ldi	r24, 0x0A	; 10
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	print_track();
    1904:	0e 94 32 09 	call	0x1264	; 0x1264 <print_track>
	move_terminal_cursor(10,14);
    1908:	6e e0       	ldi	r22, 0x0E	; 14
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	8a e0       	ldi	r24, 0x0A	; 10
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	clear_to_end_of_line();
    1914:	0e 94 66 11 	call	0x22cc	; 0x22cc <clear_to_end_of_line>
	printf_P(PSTR("GAME OVER"));
    1918:	8a ea       	ldi	r24, 0xAA	; 170
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9f 93       	push	r25
    191e:	8f 93       	push	r24
    1920:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	move_terminal_cursor(10,15);
    1924:	6f e0       	ldi	r22, 0x0F	; 15
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	8a e0       	ldi	r24, 0x0A	; 10
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
    1930:	8c e7       	ldi	r24, 0x7C	; 124
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	9f 93       	push	r25
    1936:	8f 93       	push	r24
    1938:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game

	char serial_input = -1; //collect serial input

	while (button_pushed() == NO_BUTTON_PUSHED)
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
	printf_P(PSTR("Press a button or 's'/'S' to start a new game"));
	
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game

	char serial_input = -1; //collect serial input
    1944:	cf ef       	ldi	r28, 0xFF	; 255

	while (button_pushed() == NO_BUTTON_PUSHED)
    1946:	11 c0       	rjmp	.+34     	; 0x196a <handle_game_over+0x8c>
	{
		update_ssd();
    1948:	0e 94 c7 08 	call	0x118e	; 0x118e <update_ssd>
		if (serial_input_available()){
    194c:	0e 94 79 10 	call	0x20f2	; 0x20f2 <serial_input_available>
    1950:	88 23       	and	r24, r24
    1952:	39 f0       	breq	.+14     	; 0x1962 <handle_game_over+0x84>
				serial_input = fgetc(stdin);
    1954:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <__iob>
    1958:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <__iob+0x1>
    195c:	0e 94 25 14 	call	0x284a	; 0x284a <fgetc>
    1960:	c8 2f       	mov	r28, r24
		}
		if (serial_input == 's' || serial_input == 'S'){
    1962:	c3 37       	cpi	r28, 0x73	; 115
    1964:	31 f0       	breq	.+12     	; 0x1972 <handle_game_over+0x94>
    1966:	c3 35       	cpi	r28, 0x53	; 83
    1968:	21 f0       	breq	.+8      	; 0x1972 <handle_game_over+0x94>
	// Do nothing until a button is pushed. Hint: 's'/'S' should also start a
	// new game

	char serial_input = -1; //collect serial input

	while (button_pushed() == NO_BUTTON_PUSHED)
    196a:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
    196e:	8f 3f       	cpi	r24, 0xFF	; 255
    1970:	59 f3       	breq	.-42     	; 0x1948 <handle_game_over+0x6a>
		}
		if (serial_input == 's' || serial_input == 'S'){
			break;
		}
	}
	start_screen();
    1972:	0e 94 68 09 	call	0x12d0	; 0x12d0 <start_screen>
	
}
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <game_count_down>:
void game_count_down(void) {
    197a:	8f 92       	push	r8
    197c:	9f 92       	push	r9
    197e:	af 92       	push	r10
    1980:	bf 92       	push	r11
    1982:	cf 92       	push	r12
    1984:	df 92       	push	r13
    1986:	ef 92       	push	r14
    1988:	ff 92       	push	r15
	
	//Number 3
	ledmatrix_clear();
    198a:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
	ledmatrix_update_pixel(3, 2, COLOUR_RED);
    198e:	4f e0       	ldi	r20, 0x0F	; 15
    1990:	62 e0       	ldi	r22, 0x02	; 2
    1992:	83 e0       	ldi	r24, 0x03	; 3
    1994:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 3, COLOUR_RED);
    1998:	4f e0       	ldi	r20, 0x0F	; 15
    199a:	63 e0       	ldi	r22, 0x03	; 3
    199c:	83 e0       	ldi	r24, 0x03	; 3
    199e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 4, COLOUR_RED);
    19a2:	4f e0       	ldi	r20, 0x0F	; 15
    19a4:	64 e0       	ldi	r22, 0x04	; 4
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 5, COLOUR_RED);
    19ac:	4f e0       	ldi	r20, 0x0F	; 15
    19ae:	65 e0       	ldi	r22, 0x05	; 5
    19b0:	83 e0       	ldi	r24, 0x03	; 3
    19b2:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 5, COLOUR_RED);
    19b6:	4f e0       	ldi	r20, 0x0F	; 15
    19b8:	65 e0       	ldi	r22, 0x05	; 5
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 5, COLOUR_RED);
    19c0:	4f e0       	ldi	r20, 0x0F	; 15
    19c2:	65 e0       	ldi	r22, 0x05	; 5
    19c4:	85 e0       	ldi	r24, 0x05	; 5
    19c6:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 5, COLOUR_RED);
    19ca:	4f e0       	ldi	r20, 0x0F	; 15
    19cc:	65 e0       	ldi	r22, 0x05	; 5
    19ce:	86 e0       	ldi	r24, 0x06	; 6
    19d0:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 4, COLOUR_RED);
    19d4:	4f e0       	ldi	r20, 0x0F	; 15
    19d6:	64 e0       	ldi	r22, 0x04	; 4
    19d8:	86 e0       	ldi	r24, 0x06	; 6
    19da:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 3, COLOUR_RED);
    19de:	4f e0       	ldi	r20, 0x0F	; 15
    19e0:	63 e0       	ldi	r22, 0x03	; 3
    19e2:	86 e0       	ldi	r24, 0x06	; 6
    19e4:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 2, COLOUR_RED);
    19e8:	4f e0       	ldi	r20, 0x0F	; 15
    19ea:	62 e0       	ldi	r22, 0x02	; 2
    19ec:	86 e0       	ldi	r24, 0x06	; 6
    19ee:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 5, COLOUR_RED);
    19f2:	4f e0       	ldi	r20, 0x0F	; 15
    19f4:	65 e0       	ldi	r22, 0x05	; 5
    19f6:	87 e0       	ldi	r24, 0x07	; 7
    19f8:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 5, COLOUR_RED);
    19fc:	4f e0       	ldi	r20, 0x0F	; 15
    19fe:	65 e0       	ldi	r22, 0x05	; 5
    1a00:	88 e0       	ldi	r24, 0x08	; 8
    1a02:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 5, COLOUR_RED);
    1a06:	4f e0       	ldi	r20, 0x0F	; 15
    1a08:	65 e0       	ldi	r22, 0x05	; 5
    1a0a:	89 e0       	ldi	r24, 0x09	; 9
    1a0c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 4, COLOUR_RED);
    1a10:	4f e0       	ldi	r20, 0x0F	; 15
    1a12:	64 e0       	ldi	r22, 0x04	; 4
    1a14:	89 e0       	ldi	r24, 0x09	; 9
    1a16:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 3, COLOUR_RED);
    1a1a:	4f e0       	ldi	r20, 0x0F	; 15
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	89 e0       	ldi	r24, 0x09	; 9
    1a20:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 2, COLOUR_RED);
    1a24:	4f e0       	ldi	r20, 0x0F	; 15
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	89 e0       	ldi	r24, 0x09	; 9
    1a2a:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	_delay_ms(game_speed*2); 
    1a2e:	60 91 14 06 	lds	r22, 0x0614	; 0x800614 <game_speed>
    1a32:	70 91 15 06 	lds	r23, 0x0615	; 0x800615 <game_speed+0x1>
    1a36:	66 0f       	add	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1a42:	4b 01       	movw	r8, r22
    1a44:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a ef       	ldi	r20, 0xFA	; 250
    1a4c:	54 e4       	ldi	r21, 0x44	; 68
    1a4e:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1a52:	6b 01       	movw	r12, r22
    1a54:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__cmpsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	24 f1       	brlt	.+72     	; 0x1aae <game_count_down+0x134>
		__ticks = 1;
	else if (__tmp > 65535)
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	c7 01       	movw	r24, r14
    1a70:	b6 01       	movw	r22, r12
    1a72:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1a76:	18 16       	cp	r1, r24
    1a78:	ac f4       	brge	.+42     	; 0x1aa4 <game_count_down+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	c5 01       	movw	r24, r10
    1a84:	b4 01       	movw	r22, r8
    1a86:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1a8a:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1a8e:	06 c0       	rjmp	.+12     	; 0x1a9c <game_count_down+0x122>
    1a90:	88 ec       	ldi	r24, 0xC8	; 200
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	01 97       	sbiw	r24, 0x01	; 1
    1a96:	f1 f7       	brne	.-4      	; 0x1a94 <game_count_down+0x11a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a98:	61 50       	subi	r22, 0x01	; 1
    1a9a:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9c:	61 15       	cp	r22, r1
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	b9 f7       	brne	.-18     	; 0x1a90 <game_count_down+0x116>
    1aa2:	0a c0       	rjmp	.+20     	; 0x1ab8 <game_count_down+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aa4:	c7 01       	movw	r24, r14
    1aa6:	b6 01       	movw	r22, r12
    1aa8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <game_count_down+0x138>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <game_count_down+0x13a>
	
	//Number 2
	ledmatrix_clear();
    1ab8:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
	ledmatrix_update_pixel(3, 2, COLOUR_RED);
    1abc:	4f e0       	ldi	r20, 0x0F	; 15
    1abe:	62 e0       	ldi	r22, 0x02	; 2
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 3, COLOUR_RED);
    1ac6:	4f e0       	ldi	r20, 0x0F	; 15
    1ac8:	63 e0       	ldi	r22, 0x03	; 3
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 4, COLOUR_RED);
    1ad0:	4f e0       	ldi	r20, 0x0F	; 15
    1ad2:	64 e0       	ldi	r22, 0x04	; 4
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 5, COLOUR_RED);
    1ada:	4f e0       	ldi	r20, 0x0F	; 15
    1adc:	65 e0       	ldi	r22, 0x05	; 5
    1ade:	83 e0       	ldi	r24, 0x03	; 3
    1ae0:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 5, COLOUR_RED);
    1ae4:	4f e0       	ldi	r20, 0x0F	; 15
    1ae6:	65 e0       	ldi	r22, 0x05	; 5
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 5, COLOUR_RED);
    1aee:	4f e0       	ldi	r20, 0x0F	; 15
    1af0:	65 e0       	ldi	r22, 0x05	; 5
    1af2:	85 e0       	ldi	r24, 0x05	; 5
    1af4:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 5, COLOUR_RED);
    1af8:	4f e0       	ldi	r20, 0x0F	; 15
    1afa:	65 e0       	ldi	r22, 0x05	; 5
    1afc:	86 e0       	ldi	r24, 0x06	; 6
    1afe:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 4, COLOUR_RED);
    1b02:	4f e0       	ldi	r20, 0x0F	; 15
    1b04:	64 e0       	ldi	r22, 0x04	; 4
    1b06:	86 e0       	ldi	r24, 0x06	; 6
    1b08:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 3, COLOUR_RED);
    1b0c:	4f e0       	ldi	r20, 0x0F	; 15
    1b0e:	63 e0       	ldi	r22, 0x03	; 3
    1b10:	86 e0       	ldi	r24, 0x06	; 6
    1b12:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 2, COLOUR_RED);
    1b16:	4f e0       	ldi	r20, 0x0F	; 15
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	86 e0       	ldi	r24, 0x06	; 6
    1b1c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 2, COLOUR_RED);
    1b20:	4f e0       	ldi	r20, 0x0F	; 15
    1b22:	62 e0       	ldi	r22, 0x02	; 2
    1b24:	87 e0       	ldi	r24, 0x07	; 7
    1b26:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 2, COLOUR_RED);
    1b2a:	4f e0       	ldi	r20, 0x0F	; 15
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	88 e0       	ldi	r24, 0x08	; 8
    1b30:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 2, COLOUR_RED);
    1b34:	4f e0       	ldi	r20, 0x0F	; 15
    1b36:	62 e0       	ldi	r22, 0x02	; 2
    1b38:	89 e0       	ldi	r24, 0x09	; 9
    1b3a:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 3, COLOUR_RED);
    1b3e:	4f e0       	ldi	r20, 0x0F	; 15
    1b40:	63 e0       	ldi	r22, 0x03	; 3
    1b42:	89 e0       	ldi	r24, 0x09	; 9
    1b44:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 4, COLOUR_RED);
    1b48:	4f e0       	ldi	r20, 0x0F	; 15
    1b4a:	64 e0       	ldi	r22, 0x04	; 4
    1b4c:	89 e0       	ldi	r24, 0x09	; 9
    1b4e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 5, COLOUR_RED);
    1b52:	4f e0       	ldi	r20, 0x0F	; 15
    1b54:	65 e0       	ldi	r22, 0x05	; 5
    1b56:	89 e0       	ldi	r24, 0x09	; 9
    1b58:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	_delay_ms(game_speed*2);
    1b5c:	60 91 14 06 	lds	r22, 0x0614	; 0x800614 <game_speed>
    1b60:	70 91 15 06 	lds	r23, 0x0615	; 0x800615 <game_speed+0x1>
    1b64:	66 0f       	add	r22, r22
    1b66:	77 1f       	adc	r23, r23
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1b70:	4b 01       	movw	r8, r22
    1b72:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a ef       	ldi	r20, 0xFA	; 250
    1b7a:	54 e4       	ldi	r21, 0x44	; 68
    1b7c:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1b80:	6b 01       	movw	r12, r22
    1b82:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	40 e8       	ldi	r20, 0x80	; 128
    1b8a:	5f e3       	ldi	r21, 0x3F	; 63
    1b8c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__cmpsf2>
    1b90:	88 23       	and	r24, r24
    1b92:	24 f1       	brlt	.+72     	; 0x1bdc <game_count_down+0x262>
		__ticks = 1;
	else if (__tmp > 65535)
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	c7 01       	movw	r24, r14
    1b9e:	b6 01       	movw	r22, r12
    1ba0:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	ac f4       	brge	.+42     	; 0x1bd2 <game_count_down+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e2       	ldi	r20, 0x20	; 32
    1bae:	51 e4       	ldi	r21, 0x41	; 65
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	b4 01       	movw	r22, r8
    1bb4:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1bb8:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1bbc:	06 c0       	rjmp	.+12     	; 0x1bca <game_count_down+0x250>
    1bbe:	88 ec       	ldi	r24, 0xC8	; 200
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <game_count_down+0x248>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc6:	61 50       	subi	r22, 0x01	; 1
    1bc8:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bca:	61 15       	cp	r22, r1
    1bcc:	71 05       	cpc	r23, r1
    1bce:	b9 f7       	brne	.-18     	; 0x1bbe <game_count_down+0x244>
    1bd0:	0a c0       	rjmp	.+20     	; 0x1be6 <game_count_down+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	c7 01       	movw	r24, r14
    1bd4:	b6 01       	movw	r22, r12
    1bd6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1bda:	02 c0       	rjmp	.+4      	; 0x1be0 <game_count_down+0x266>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1bdc:	61 e0       	ldi	r22, 0x01	; 1
    1bde:	70 e0       	ldi	r23, 0x00	; 0
    1be0:	cb 01       	movw	r24, r22
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <game_count_down+0x268>
	
	//Number 1
	ledmatrix_clear();
    1be6:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
	ledmatrix_update_pixel(3, 3, COLOUR_RED);
    1bea:	4f e0       	ldi	r20, 0x0F	; 15
    1bec:	63 e0       	ldi	r22, 0x03	; 3
    1bee:	83 e0       	ldi	r24, 0x03	; 3
    1bf0:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 4, COLOUR_RED);
    1bf4:	4f e0       	ldi	r20, 0x0F	; 15
    1bf6:	64 e0       	ldi	r22, 0x04	; 4
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 3, COLOUR_RED);
    1bfe:	4f e0       	ldi	r20, 0x0F	; 15
    1c00:	63 e0       	ldi	r22, 0x03	; 3
    1c02:	84 e0       	ldi	r24, 0x04	; 4
    1c04:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 4, COLOUR_RED);
    1c08:	4f e0       	ldi	r20, 0x0F	; 15
    1c0a:	64 e0       	ldi	r22, 0x04	; 4
    1c0c:	84 e0       	ldi	r24, 0x04	; 4
    1c0e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 3, COLOUR_RED);
    1c12:	4f e0       	ldi	r20, 0x0F	; 15
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 4, COLOUR_RED);
    1c1c:	4f e0       	ldi	r20, 0x0F	; 15
    1c1e:	64 e0       	ldi	r22, 0x04	; 4
    1c20:	85 e0       	ldi	r24, 0x05	; 5
    1c22:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 3, COLOUR_RED);
    1c26:	4f e0       	ldi	r20, 0x0F	; 15
    1c28:	63 e0       	ldi	r22, 0x03	; 3
    1c2a:	86 e0       	ldi	r24, 0x06	; 6
    1c2c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 4, COLOUR_RED);
    1c30:	4f e0       	ldi	r20, 0x0F	; 15
    1c32:	64 e0       	ldi	r22, 0x04	; 4
    1c34:	86 e0       	ldi	r24, 0x06	; 6
    1c36:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 3, COLOUR_RED);
    1c3a:	4f e0       	ldi	r20, 0x0F	; 15
    1c3c:	63 e0       	ldi	r22, 0x03	; 3
    1c3e:	87 e0       	ldi	r24, 0x07	; 7
    1c40:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 4, COLOUR_RED);
    1c44:	4f e0       	ldi	r20, 0x0F	; 15
    1c46:	64 e0       	ldi	r22, 0x04	; 4
    1c48:	87 e0       	ldi	r24, 0x07	; 7
    1c4a:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 3, COLOUR_RED);
    1c4e:	4f e0       	ldi	r20, 0x0F	; 15
    1c50:	63 e0       	ldi	r22, 0x03	; 3
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 4, COLOUR_RED);
    1c58:	4f e0       	ldi	r20, 0x0F	; 15
    1c5a:	64 e0       	ldi	r22, 0x04	; 4
    1c5c:	88 e0       	ldi	r24, 0x08	; 8
    1c5e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 3, COLOUR_RED);
    1c62:	4f e0       	ldi	r20, 0x0F	; 15
    1c64:	63 e0       	ldi	r22, 0x03	; 3
    1c66:	89 e0       	ldi	r24, 0x09	; 9
    1c68:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 4, COLOUR_RED);
    1c6c:	4f e0       	ldi	r20, 0x0F	; 15
    1c6e:	64 e0       	ldi	r22, 0x04	; 4
    1c70:	89 e0       	ldi	r24, 0x09	; 9
    1c72:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(10, 3, COLOUR_RED);
    1c76:	4f e0       	ldi	r20, 0x0F	; 15
    1c78:	63 e0       	ldi	r22, 0x03	; 3
    1c7a:	8a e0       	ldi	r24, 0x0A	; 10
    1c7c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(10, 4, COLOUR_RED);
    1c80:	4f e0       	ldi	r20, 0x0F	; 15
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	8a e0       	ldi	r24, 0x0A	; 10
    1c86:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	_delay_ms(game_speed*2);
    1c8a:	60 91 14 06 	lds	r22, 0x0614	; 0x800614 <game_speed>
    1c8e:	70 91 15 06 	lds	r23, 0x0615	; 0x800615 <game_speed+0x1>
    1c92:	66 0f       	add	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1c9e:	4b 01       	movw	r8, r22
    1ca0:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	4a ef       	ldi	r20, 0xFA	; 250
    1ca8:	54 e4       	ldi	r21, 0x44	; 68
    1caa:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1cae:	6b 01       	movw	r12, r22
    1cb0:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__cmpsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	24 f1       	brlt	.+72     	; 0x1d0a <game_count_down+0x390>
		__ticks = 1;
	else if (__tmp > 65535)
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	3f ef       	ldi	r19, 0xFF	; 255
    1cc6:	4f e7       	ldi	r20, 0x7F	; 127
    1cc8:	57 e4       	ldi	r21, 0x47	; 71
    1cca:	c7 01       	movw	r24, r14
    1ccc:	b6 01       	movw	r22, r12
    1cce:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	ac f4       	brge	.+42     	; 0x1d00 <game_count_down+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	c5 01       	movw	r24, r10
    1ce0:	b4 01       	movw	r22, r8
    1ce2:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1ce6:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1cea:	06 c0       	rjmp	.+12     	; 0x1cf8 <game_count_down+0x37e>
    1cec:	88 ec       	ldi	r24, 0xC8	; 200
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <game_count_down+0x376>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	61 50       	subi	r22, 0x01	; 1
    1cf6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cf8:	61 15       	cp	r22, r1
    1cfa:	71 05       	cpc	r23, r1
    1cfc:	b9 f7       	brne	.-18     	; 0x1cec <game_count_down+0x372>
    1cfe:	0a c0       	rjmp	.+20     	; 0x1d14 <game_count_down+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d00:	c7 01       	movw	r24, r14
    1d02:	b6 01       	movw	r22, r12
    1d04:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <game_count_down+0x394>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	70 e0       	ldi	r23, 0x00	; 0
    1d0e:	cb 01       	movw	r24, r22
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	f1 f7       	brne	.-4      	; 0x1d10 <game_count_down+0x396>
	
	//GOOOOOOOO
	ledmatrix_clear();
    1d14:	0e 94 81 08 	call	0x1102	; 0x1102 <ledmatrix_clear>
	ledmatrix_update_pixel(3, 0, COLOUR_GREEN);
    1d18:	40 ef       	ldi	r20, 0xF0	; 240
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 1, COLOUR_GREEN);
    1d22:	40 ef       	ldi	r20, 0xF0	; 240
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	83 e0       	ldi	r24, 0x03	; 3
    1d28:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 2, COLOUR_GREEN);
    1d2c:	40 ef       	ldi	r20, 0xF0	; 240
    1d2e:	62 e0       	ldi	r22, 0x02	; 2
    1d30:	83 e0       	ldi	r24, 0x03	; 3
    1d32:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 3, COLOUR_GREEN);
    1d36:	40 ef       	ldi	r20, 0xF0	; 240
    1d38:	63 e0       	ldi	r22, 0x03	; 3
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 0, COLOUR_GREEN);
    1d40:	40 ef       	ldi	r20, 0xF0	; 240
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 0, COLOUR_GREEN);
    1d4a:	40 ef       	ldi	r20, 0xF0	; 240
    1d4c:	60 e0       	ldi	r22, 0x00	; 0
    1d4e:	85 e0       	ldi	r24, 0x05	; 5
    1d50:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 0, COLOUR_GREEN);
    1d54:	40 ef       	ldi	r20, 0xF0	; 240
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	86 e0       	ldi	r24, 0x06	; 6
    1d5a:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 0, COLOUR_GREEN);
    1d5e:	40 ef       	ldi	r20, 0xF0	; 240
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	87 e0       	ldi	r24, 0x07	; 7
    1d64:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 0, COLOUR_GREEN);
    1d68:	40 ef       	ldi	r20, 0xF0	; 240
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	88 e0       	ldi	r24, 0x08	; 8
    1d6e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 0, COLOUR_GREEN);
    1d72:	40 ef       	ldi	r20, 0xF0	; 240
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	89 e0       	ldi	r24, 0x09	; 9
    1d78:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 1, COLOUR_GREEN);
    1d7c:	40 ef       	ldi	r20, 0xF0	; 240
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	89 e0       	ldi	r24, 0x09	; 9
    1d82:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 2, COLOUR_GREEN);
    1d86:	40 ef       	ldi	r20, 0xF0	; 240
    1d88:	62 e0       	ldi	r22, 0x02	; 2
    1d8a:	89 e0       	ldi	r24, 0x09	; 9
    1d8c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 3, COLOUR_GREEN);
    1d90:	40 ef       	ldi	r20, 0xF0	; 240
    1d92:	63 e0       	ldi	r22, 0x03	; 3
    1d94:	89 e0       	ldi	r24, 0x09	; 9
    1d96:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 3, COLOUR_GREEN);
    1d9a:	40 ef       	ldi	r20, 0xF0	; 240
    1d9c:	63 e0       	ldi	r22, 0x03	; 3
    1d9e:	88 e0       	ldi	r24, 0x08	; 8
    1da0:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 3, COLOUR_GREEN);
    1da4:	40 ef       	ldi	r20, 0xF0	; 240
    1da6:	63 e0       	ldi	r22, 0x03	; 3
    1da8:	87 e0       	ldi	r24, 0x07	; 7
    1daa:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 2, COLOUR_GREEN);
    1dae:	40 ef       	ldi	r20, 0xF0	; 240
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	87 e0       	ldi	r24, 0x07	; 7
    1db4:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	
	//Letter O
	ledmatrix_update_pixel(3, 5, COLOUR_GREEN);
    1db8:	40 ef       	ldi	r20, 0xF0	; 240
    1dba:	65 e0       	ldi	r22, 0x05	; 5
    1dbc:	83 e0       	ldi	r24, 0x03	; 3
    1dbe:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 6, COLOUR_GREEN);
    1dc2:	40 ef       	ldi	r20, 0xF0	; 240
    1dc4:	66 e0       	ldi	r22, 0x06	; 6
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(3, 7, COLOUR_GREEN);
    1dcc:	40 ef       	ldi	r20, 0xF0	; 240
    1dce:	67 e0       	ldi	r22, 0x07	; 7
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 5, COLOUR_GREEN);
    1dd6:	40 ef       	ldi	r20, 0xF0	; 240
    1dd8:	65 e0       	ldi	r22, 0x05	; 5
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 5, COLOUR_GREEN);
    1de0:	40 ef       	ldi	r20, 0xF0	; 240
    1de2:	65 e0       	ldi	r22, 0x05	; 5
    1de4:	85 e0       	ldi	r24, 0x05	; 5
    1de6:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 5, COLOUR_GREEN);
    1dea:	40 ef       	ldi	r20, 0xF0	; 240
    1dec:	65 e0       	ldi	r22, 0x05	; 5
    1dee:	86 e0       	ldi	r24, 0x06	; 6
    1df0:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 5, COLOUR_GREEN);
    1df4:	40 ef       	ldi	r20, 0xF0	; 240
    1df6:	65 e0       	ldi	r22, 0x05	; 5
    1df8:	87 e0       	ldi	r24, 0x07	; 7
    1dfa:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 5, COLOUR_GREEN);
    1dfe:	40 ef       	ldi	r20, 0xF0	; 240
    1e00:	65 e0       	ldi	r22, 0x05	; 5
    1e02:	88 e0       	ldi	r24, 0x08	; 8
    1e04:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 5, COLOUR_GREEN);
    1e08:	40 ef       	ldi	r20, 0xF0	; 240
    1e0a:	65 e0       	ldi	r22, 0x05	; 5
    1e0c:	89 e0       	ldi	r24, 0x09	; 9
    1e0e:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 6, COLOUR_GREEN);
    1e12:	40 ef       	ldi	r20, 0xF0	; 240
    1e14:	66 e0       	ldi	r22, 0x06	; 6
    1e16:	89 e0       	ldi	r24, 0x09	; 9
    1e18:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(9, 7, COLOUR_GREEN);
    1e1c:	40 ef       	ldi	r20, 0xF0	; 240
    1e1e:	67 e0       	ldi	r22, 0x07	; 7
    1e20:	89 e0       	ldi	r24, 0x09	; 9
    1e22:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(8, 7, COLOUR_GREEN);
    1e26:	40 ef       	ldi	r20, 0xF0	; 240
    1e28:	67 e0       	ldi	r22, 0x07	; 7
    1e2a:	88 e0       	ldi	r24, 0x08	; 8
    1e2c:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(7, 7, COLOUR_GREEN);
    1e30:	40 ef       	ldi	r20, 0xF0	; 240
    1e32:	67 e0       	ldi	r22, 0x07	; 7
    1e34:	87 e0       	ldi	r24, 0x07	; 7
    1e36:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(6, 7, COLOUR_GREEN);
    1e3a:	40 ef       	ldi	r20, 0xF0	; 240
    1e3c:	67 e0       	ldi	r22, 0x07	; 7
    1e3e:	86 e0       	ldi	r24, 0x06	; 6
    1e40:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(5, 7, COLOUR_GREEN);
    1e44:	40 ef       	ldi	r20, 0xF0	; 240
    1e46:	67 e0       	ldi	r22, 0x07	; 7
    1e48:	85 e0       	ldi	r24, 0x05	; 5
    1e4a:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	ledmatrix_update_pixel(4, 7, COLOUR_GREEN);
    1e4e:	40 ef       	ldi	r20, 0xF0	; 240
    1e50:	67 e0       	ldi	r22, 0x07	; 7
    1e52:	84 e0       	ldi	r24, 0x04	; 4
    1e54:	0e 94 45 08 	call	0x108a	; 0x108a <ledmatrix_update_pixel>
	_delay_ms(game_speed*2);
    1e58:	60 91 14 06 	lds	r22, 0x0614	; 0x800614 <game_speed>
    1e5c:	70 91 15 06 	lds	r23, 0x0615	; 0x800615 <game_speed+0x1>
    1e60:	66 0f       	add	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0e 94 89 12 	call	0x2512	; 0x2512 <__floatunsisf>
    1e6c:	4b 01       	movw	r8, r22
    1e6e:	5c 01       	movw	r10, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1e7c:	6b 01       	movw	r12, r22
    1e7e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__cmpsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	24 f1       	brlt	.+72     	; 0x1ed8 <game_count_down+0x55e>
		__ticks = 1;
	else if (__tmp > 65535)
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	3f ef       	ldi	r19, 0xFF	; 255
    1e94:	4f e7       	ldi	r20, 0x7F	; 127
    1e96:	57 e4       	ldi	r21, 0x47	; 71
    1e98:	c7 01       	movw	r24, r14
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	0e 94 3b 13 	call	0x2676	; 0x2676 <__gesf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	ac f4       	brge	.+42     	; 0x1ece <game_count_down+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	c5 01       	movw	r24, r10
    1eae:	b4 01       	movw	r22, r8
    1eb0:	0e 94 40 13 	call	0x2680	; 0x2680 <__mulsf3>
    1eb4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1eb8:	06 c0       	rjmp	.+12     	; 0x1ec6 <game_count_down+0x54c>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <game_count_down+0x544>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec2:	61 50       	subi	r22, 0x01	; 1
    1ec4:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	61 15       	cp	r22, r1
    1ec8:	71 05       	cpc	r23, r1
    1eca:	b9 f7       	brne	.-18     	; 0x1eba <game_count_down+0x540>
    1ecc:	0a c0       	rjmp	.+20     	; 0x1ee2 <game_count_down+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__fixunssfsi>
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <game_count_down+0x562>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
    1ed8:	61 e0       	ldi	r22, 0x01	; 1
    1eda:	70 e0       	ldi	r23, 0x00	; 0
    1edc:	cb 01       	movw	r24, r22
    1ede:	01 97       	sbiw	r24, 0x01	; 1
    1ee0:	f1 f7       	brne	.-4      	; 0x1ede <game_count_down+0x564>
	
}
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	af 90       	pop	r10
    1eee:	9f 90       	pop	r9
    1ef0:	8f 90       	pop	r8
    1ef2:	08 95       	ret

00001ef4 <new_game>:

void new_game(void)
{
	
	
	game_over_flag = 0; //ensure flag is off8
    1ef4:	10 92 81 05 	sts	0x0581, r1	; 0x800581 <game_over_flag>
	score = 0; //reset the score for the new game
    1ef8:	10 92 83 05 	sts	0x0583, r1	; 0x800583 <score+0x1>
    1efc:	10 92 82 05 	sts	0x0582, r1	; 0x800582 <score>
	combo = 0;
    1f00:	10 92 85 05 	sts	0x0585, r1	; 0x800585 <combo>
	DDRC = 0xFF; //For SSD score
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<DDD2); //Set pin for cc
    1f08:	8a b1       	in	r24, 0x0a	; 10
    1f0a:	84 60       	ori	r24, 0x04	; 4
    1f0c:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<DDD3); //Set pin for LED7 (pause)
    1f0e:	8a b1       	in	r24, 0x0a	; 10
    1f10:	88 60       	ori	r24, 0x08	; 8
    1f12:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD7) | (1<<DDD5) | (1<<DDD6); //Set pins for combo LEDs
    1f14:	8a b1       	in	r24, 0x0a	; 10
    1f16:	80 6e       	ori	r24, 0xE0	; 224
    1f18:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1 << DDD4); // Make pin OC1B be an output (port D, pin 4)	
    1f1a:	8a b1       	in	r24, 0x0a	; 10
    1f1c:	80 61       	ori	r24, 0x10	; 16
    1f1e:	8a b9       	out	0x0a, r24	; 10
	
	// Clear the serial terminal
	clear_terminal();
    1f20:	0e 94 5d 11 	call	0x22ba	; 0x22ba <clear_terminal>
	
	// Initialise the game and display
	
	if (manual_mode) {
    1f24:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <manual_mode>
    1f28:	88 23       	and	r24, r24
    1f2a:	71 f0       	breq	.+28     	; 0x1f48 <new_game+0x54>
		move_terminal_cursor(10,6);
    1f2c:	66 e0       	ldi	r22, 0x06	; 6
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	8a e0       	ldi	r24, 0x0A	; 10
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
		printf("Manual Mode");
    1f38:	89 e5       	ldi	r24, 0x59	; 89
    1f3a:	95 e0       	ldi	r25, 0x05	; 5
    1f3c:	9f 93       	push	r25
    1f3e:	8f 93       	push	r24
    1f40:	0e 94 63 14 	call	0x28c6	; 0x28c6 <printf>
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
	}
	display_game_speed();
    1f48:	0e 94 85 08 	call	0x110a	; 0x110a <display_game_speed>
	PORTC = seven_seg[score]; //Display score during count down
    1f4c:	e0 91 82 05 	lds	r30, 0x0582	; 0x800582 <score>
    1f50:	f0 91 83 05 	lds	r31, 0x0583	; 0x800583 <score+0x1>
    1f54:	e2 5f       	subi	r30, 0xF2	; 242
    1f56:	fe 4f       	sbci	r31, 0xFE	; 254
    1f58:	80 81       	ld	r24, Z
    1f5a:	88 b9       	out	0x08, r24	; 8
	move_terminal_cursor(10,14);
    1f5c:	6e e0       	ldi	r22, 0x0E	; 14
    1f5e:	70 e0       	ldi	r23, 0x00	; 0
    1f60:	8a e0       	ldi	r24, 0x0A	; 10
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	0e 94 4c 11 	call	0x2298	; 0x2298 <move_terminal_cursor>
	print_track();
    1f68:	0e 94 32 09 	call	0x1264	; 0x1264 <print_track>
	update_combo();
    1f6c:	0e 94 49 03 	call	0x692	; 0x692 <update_combo>
	game_count_down(); //do the count down
    1f70:	0e 94 bd 0c 	call	0x197a	; 0x197a <game_count_down>
	initialise_game();
    1f74:	0e 94 b1 04 	call	0x962	; 0x962 <initialise_game>

	
	
	// Clear a button push or serial input if any are waiting
	// (The cast to void means the return value is ignored.)
	(void)button_pushed();
    1f78:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <button_pushed>
	clear_serial_input_buffer();
    1f7c:	0e 94 80 10 	call	0x2100	; 0x2100 <clear_serial_input_buffer>
    1f80:	08 95       	ret

00001f82 <main>:
/////////////////////////////// main //////////////////////////////////
int main(void)
{
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1f82:	0e 94 55 09 	call	0x12aa	; 0x12aa <initialise_hardware>
	
	// Show the splash screen message. Returns when display
	// is complete.
	start_screen();
    1f86:	0e 94 68 09 	call	0x12d0	; 0x12d0 <start_screen>
	
	// Loop forever and continuously play the game.
	while(1)
	{
		new_game();
    1f8a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <new_game>
		play_game();
    1f8e:	0e 94 26 0b 	call	0x164c	; 0x164c <play_game>
		handle_game_over();
    1f92:	0e 94 6f 0c 	call	0x18de	; 0x18de <handle_game_over>
    1f96:	f9 cf       	rjmp	.-14     	; 0x1f8a <main+0x8>

00001f98 <uart_put_char>:
    1f98:	cf 93       	push	r28
    1f9a:	c8 2f       	mov	r28, r24
    1f9c:	8a 30       	cpi	r24, 0x0A	; 10
    1f9e:	19 f4       	brne	.+6      	; 0x1fa6 <uart_put_char+0xe>
    1fa0:	8d e0       	ldi	r24, 0x0D	; 13
    1fa2:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <uart_put_char>
    1fa6:	9f b7       	in	r25, 0x3f	; 63
    1fa8:	90 78       	andi	r25, 0x80	; 128
    1faa:	02 c0       	rjmp	.+4      	; 0x1fb0 <uart_put_char+0x18>
    1fac:	99 23       	and	r25, r25
    1fae:	29 f1       	breq	.+74     	; 0x1ffa <uart_put_char+0x62>
    1fb0:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    1fb4:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb6:	d1 f3       	breq	.-12     	; 0x1fac <uart_put_char+0x14>
    1fb8:	f8 94       	cli
    1fba:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <out_insert_pos>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	8e 0f       	add	r24, r30
    1fc2:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <out_insert_pos>
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	e6 5e       	subi	r30, 0xE6	; 230
    1fca:	f9 4f       	sbci	r31, 0xF9	; 249
    1fcc:	c0 83       	st	Z, r28
    1fce:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    1fd2:	8f 5f       	subi	r24, 0xFF	; 255
    1fd4:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bytes_in_out_buffer>
    1fd8:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <out_insert_pos>
    1fdc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fde:	11 f4       	brne	.+4      	; 0x1fe4 <uart_put_char+0x4c>
    1fe0:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <out_insert_pos>
    1fe4:	e1 ec       	ldi	r30, 0xC1	; 193
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	80 62       	ori	r24, 0x20	; 32
    1fec:	80 83       	st	Z, r24
    1fee:	99 23       	and	r25, r25
    1ff0:	39 f0       	breq	.+14     	; 0x2000 <uart_put_char+0x68>
    1ff2:	78 94       	sei
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <uart_put_char+0x6c>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 c0       	rjmp	.+4      	; 0x2004 <uart_put_char+0x6c>
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	cf 91       	pop	r28
    2006:	08 95       	ret

00002008 <uart_get_char>:
    2008:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <bytes_in_input_buffer>
    200c:	88 23       	and	r24, r24
    200e:	e1 f3       	breq	.-8      	; 0x2008 <uart_get_char>
    2010:	2f b7       	in	r18, 0x3f	; 63
    2012:	20 78       	andi	r18, 0x80	; 128
    2014:	f8 94       	cli
    2016:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <input_insert_pos>
    201a:	30 91 2b 07 	lds	r19, 0x072B	; 0x80072b <bytes_in_input_buffer>
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	83 1b       	sub	r24, r19
    2022:	91 09       	sbc	r25, r1
    2024:	5a f4       	brpl	.+22     	; 0x203c <uart_get_char+0x34>
    2026:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <input_insert_pos>
    202a:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <bytes_in_input_buffer>
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	e8 1b       	sub	r30, r24
    2032:	f1 09       	sbc	r31, r1
    2034:	e6 5d       	subi	r30, 0xD6	; 214
    2036:	f8 4f       	sbci	r31, 0xF8	; 248
    2038:	80 81       	ld	r24, Z
    203a:	0a c0       	rjmp	.+20     	; 0x2050 <uart_get_char+0x48>
    203c:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <input_insert_pos>
    2040:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <bytes_in_input_buffer>
    2044:	f0 e0       	ldi	r31, 0x00	; 0
    2046:	e8 1b       	sub	r30, r24
    2048:	f1 09       	sbc	r31, r1
    204a:	e6 5e       	subi	r30, 0xE6	; 230
    204c:	f8 4f       	sbci	r31, 0xF8	; 248
    204e:	80 81       	ld	r24, Z
    2050:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <bytes_in_input_buffer>
    2054:	91 50       	subi	r25, 0x01	; 1
    2056:	90 93 2b 07 	sts	0x072B, r25	; 0x80072b <bytes_in_input_buffer>
    205a:	22 23       	and	r18, r18
    205c:	09 f0       	breq	.+2      	; 0x2060 <uart_get_char+0x58>
    205e:	78 94       	sei
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	08 95       	ret

00002064 <init_serial_stdio>:
    2064:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <out_insert_pos>
    2068:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <bytes_in_out_buffer>
    206c:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <input_insert_pos>
    2070:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <bytes_in_input_buffer>
    2074:	10 92 2a 07 	sts	0x072A, r1	; 0x80072a <input_overrun>
    2078:	40 93 7c 05 	sts	0x057C, r20	; 0x80057c <do_echo>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	aa 1f       	adc	r26, r26
    2086:	bb 1f       	adc	r27, r27
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	aa 1f       	adc	r26, r26
    208e:	bb 1f       	adc	r27, r27
    2090:	9c 01       	movw	r18, r24
    2092:	ad 01       	movw	r20, r26
    2094:	22 0f       	add	r18, r18
    2096:	33 1f       	adc	r19, r19
    2098:	44 1f       	adc	r20, r20
    209a:	55 1f       	adc	r21, r21
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	72 e1       	ldi	r23, 0x12	; 18
    20a0:	8a e7       	ldi	r24, 0x7A	; 122
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__divmodsi4>
    20a8:	ba 01       	movw	r22, r20
    20aa:	a9 01       	movw	r20, r18
    20ac:	4f 5f       	subi	r20, 0xFF	; 255
    20ae:	5f 4f       	sbci	r21, 0xFF	; 255
    20b0:	6f 4f       	sbci	r22, 0xFF	; 255
    20b2:	7f 4f       	sbci	r23, 0xFF	; 255
    20b4:	db 01       	movw	r26, r22
    20b6:	ca 01       	movw	r24, r20
    20b8:	1a f4       	brpl	.+6      	; 0x20c0 <init_serial_stdio+0x5c>
    20ba:	01 96       	adiw	r24, 0x01	; 1
    20bc:	a1 1d       	adc	r26, r1
    20be:	b1 1d       	adc	r27, r1
    20c0:	b5 95       	asr	r27
    20c2:	a7 95       	ror	r26
    20c4:	97 95       	ror	r25
    20c6:	87 95       	ror	r24
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    20ce:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    20d2:	e1 ec       	ldi	r30, 0xC1	; 193
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	88 e1       	ldi	r24, 0x18	; 24
    20d8:	80 83       	st	Z, r24
    20da:	80 81       	ld	r24, Z
    20dc:	80 68       	ori	r24, 0x80	; 128
    20de:	80 83       	st	Z, r24
    20e0:	ec e2       	ldi	r30, 0x2C	; 44
    20e2:	f7 e0       	ldi	r31, 0x07	; 7
    20e4:	88 e1       	ldi	r24, 0x18	; 24
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	93 83       	std	Z+3, r25	; 0x03
    20ea:	82 83       	std	Z+2, r24	; 0x02
    20ec:	91 83       	std	Z+1, r25	; 0x01
    20ee:	80 83       	st	Z, r24
    20f0:	08 95       	ret

000020f2 <serial_input_available>:
    20f2:	90 91 2b 07 	lds	r25, 0x072B	; 0x80072b <bytes_in_input_buffer>
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	91 11       	cpse	r25, r1
    20fa:	01 c0       	rjmp	.+2      	; 0x20fe <serial_input_available+0xc>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	08 95       	ret

00002100 <clear_serial_input_buffer>:
    2100:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <input_insert_pos>
    2104:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <bytes_in_input_buffer>
    2108:	08 95       	ret

0000210a <__vector_21>:
    210a:	1f 92       	push	r1
    210c:	0f 92       	push	r0
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	0f 92       	push	r0
    2112:	11 24       	eor	r1, r1
    2114:	2f 93       	push	r18
    2116:	8f 93       	push	r24
    2118:	9f 93       	push	r25
    211a:	ef 93       	push	r30
    211c:	ff 93       	push	r31
    211e:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    2122:	88 23       	and	r24, r24
    2124:	29 f1       	breq	.+74     	; 0x2170 <__vector_21+0x66>
    2126:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <out_insert_pos>
    212a:	20 91 19 06 	lds	r18, 0x0619	; 0x800619 <bytes_in_out_buffer>
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	82 1b       	sub	r24, r18
    2132:	91 09       	sbc	r25, r1
    2134:	5a f4       	brpl	.+22     	; 0x214c <__vector_21+0x42>
    2136:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <out_insert_pos>
    213a:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	e8 1b       	sub	r30, r24
    2142:	f1 09       	sbc	r31, r1
    2144:	e7 5e       	subi	r30, 0xE7	; 231
    2146:	f8 4f       	sbci	r31, 0xF8	; 248
    2148:	90 81       	ld	r25, Z
    214a:	0a c0       	rjmp	.+20     	; 0x2160 <__vector_21+0x56>
    214c:	e0 91 18 06 	lds	r30, 0x0618	; 0x800618 <out_insert_pos>
    2150:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	e8 1b       	sub	r30, r24
    2158:	f1 09       	sbc	r31, r1
    215a:	e6 5e       	subi	r30, 0xE6	; 230
    215c:	f9 4f       	sbci	r31, 0xF9	; 249
    215e:	90 81       	ld	r25, Z
    2160:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    2164:	81 50       	subi	r24, 0x01	; 1
    2166:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <bytes_in_out_buffer>
    216a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    216e:	05 c0       	rjmp	.+10     	; 0x217a <__vector_21+0x70>
    2170:	e1 ec       	ldi	r30, 0xC1	; 193
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	8f 7d       	andi	r24, 0xDF	; 223
    2178:	80 83       	st	Z, r24
    217a:	ff 91       	pop	r31
    217c:	ef 91       	pop	r30
    217e:	9f 91       	pop	r25
    2180:	8f 91       	pop	r24
    2182:	2f 91       	pop	r18
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	0f 90       	pop	r0
    218a:	1f 90       	pop	r1
    218c:	18 95       	reti

0000218e <__vector_20>:
    218e:	1f 92       	push	r1
    2190:	0f 92       	push	r0
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	0f 92       	push	r0
    2196:	11 24       	eor	r1, r1
    2198:	2f 93       	push	r18
    219a:	3f 93       	push	r19
    219c:	4f 93       	push	r20
    219e:	5f 93       	push	r21
    21a0:	6f 93       	push	r22
    21a2:	7f 93       	push	r23
    21a4:	8f 93       	push	r24
    21a6:	9f 93       	push	r25
    21a8:	af 93       	push	r26
    21aa:	bf 93       	push	r27
    21ac:	cf 93       	push	r28
    21ae:	ef 93       	push	r30
    21b0:	ff 93       	push	r31
    21b2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    21b6:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <do_echo>
    21ba:	88 23       	and	r24, r24
    21bc:	49 f0       	breq	.+18     	; 0x21d0 <__vector_20+0x42>
    21be:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <bytes_in_out_buffer>
    21c2:	8f 3f       	cpi	r24, 0xFF	; 255
    21c4:	29 f0       	breq	.+10     	; 0x21d0 <__vector_20+0x42>
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	8c 2f       	mov	r24, r28
    21cc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <uart_put_char>
    21d0:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <bytes_in_input_buffer>
    21d4:	80 31       	cpi	r24, 0x10	; 16
    21d6:	20 f0       	brcs	.+8      	; 0x21e0 <__vector_20+0x52>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	80 93 2a 07 	sts	0x072A, r24	; 0x80072a <input_overrun>
    21de:	18 c0       	rjmp	.+48     	; 0x2210 <__vector_20+0x82>
    21e0:	cd 30       	cpi	r28, 0x0D	; 13
    21e2:	09 f4       	brne	.+2      	; 0x21e6 <__vector_20+0x58>
    21e4:	ca e0       	ldi	r28, 0x0A	; 10
    21e6:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <input_insert_pos>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	8e 0f       	add	r24, r30
    21ee:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <input_insert_pos>
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	e6 5e       	subi	r30, 0xE6	; 230
    21f6:	f8 4f       	sbci	r31, 0xF8	; 248
    21f8:	c0 83       	st	Z, r28
    21fa:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <bytes_in_input_buffer>
    21fe:	8f 5f       	subi	r24, 0xFF	; 255
    2200:	80 93 2b 07 	sts	0x072B, r24	; 0x80072b <bytes_in_input_buffer>
    2204:	80 91 19 07 	lds	r24, 0x0719	; 0x800719 <input_insert_pos>
    2208:	80 31       	cpi	r24, 0x10	; 16
    220a:	11 f4       	brne	.+4      	; 0x2210 <__vector_20+0x82>
    220c:	10 92 19 07 	sts	0x0719, r1	; 0x800719 <input_insert_pos>
    2210:	ff 91       	pop	r31
    2212:	ef 91       	pop	r30
    2214:	cf 91       	pop	r28
    2216:	bf 91       	pop	r27
    2218:	af 91       	pop	r26
    221a:	9f 91       	pop	r25
    221c:	8f 91       	pop	r24
    221e:	7f 91       	pop	r23
    2220:	6f 91       	pop	r22
    2222:	5f 91       	pop	r21
    2224:	4f 91       	pop	r20
    2226:	3f 91       	pop	r19
    2228:	2f 91       	pop	r18
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	0f 90       	pop	r0
    2230:	1f 90       	pop	r1
    2232:	18 95       	reti

00002234 <spi_setup_master>:
    2234:	94 b1       	in	r25, 0x04	; 4
    2236:	90 6b       	ori	r25, 0xB0	; 176
    2238:	94 b9       	out	0x04, r25	; 4
    223a:	95 b1       	in	r25, 0x05	; 5
    223c:	90 61       	ori	r25, 0x10	; 16
    223e:	95 b9       	out	0x05, r25	; 5
    2240:	90 e5       	ldi	r25, 0x50	; 80
    2242:	9c bd       	out	0x2c, r25	; 44
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	21 f0       	breq	.+8      	; 0x2250 <spi_setup_master+0x1c>
    2248:	80 32       	cpi	r24, 0x20	; 32
    224a:	11 f0       	breq	.+4      	; 0x2250 <spi_setup_master+0x1c>
    224c:	82 30       	cpi	r24, 0x02	; 2
    224e:	19 f4       	brne	.+6      	; 0x2256 <spi_setup_master+0x22>
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	9d bd       	out	0x2d, r25	; 45
    2254:	01 c0       	rjmp	.+2      	; 0x2258 <spi_setup_master+0x24>
    2256:	1d bc       	out	0x2d, r1	; 45
    2258:	80 32       	cpi	r24, 0x20	; 32
    225a:	69 f0       	breq	.+26     	; 0x2276 <spi_setup_master+0x42>
    225c:	28 f4       	brcc	.+10     	; 0x2268 <spi_setup_master+0x34>
    225e:	88 30       	cpi	r24, 0x08	; 8
    2260:	71 f0       	breq	.+28     	; 0x227e <spi_setup_master+0x4a>
    2262:	80 31       	cpi	r24, 0x10	; 16
    2264:	61 f0       	breq	.+24     	; 0x227e <spi_setup_master+0x4a>
    2266:	0e c0       	rjmp	.+28     	; 0x2284 <spi_setup_master+0x50>
    2268:	80 34       	cpi	r24, 0x40	; 64
    226a:	29 f0       	breq	.+10     	; 0x2276 <spi_setup_master+0x42>
    226c:	80 38       	cpi	r24, 0x80	; 128
    226e:	51 f4       	brne	.+20     	; 0x2284 <spi_setup_master+0x50>
    2270:	8c b5       	in	r24, 0x2c	; 44
    2272:	81 60       	ori	r24, 0x01	; 1
    2274:	8c bd       	out	0x2c, r24	; 44
    2276:	8c b5       	in	r24, 0x2c	; 44
    2278:	82 60       	ori	r24, 0x02	; 2
    227a:	8c bd       	out	0x2c, r24	; 44
    227c:	03 c0       	rjmp	.+6      	; 0x2284 <spi_setup_master+0x50>
    227e:	8c b5       	in	r24, 0x2c	; 44
    2280:	81 60       	ori	r24, 0x01	; 1
    2282:	8c bd       	out	0x2c, r24	; 44
    2284:	85 b1       	in	r24, 0x05	; 5
    2286:	8f 7e       	andi	r24, 0xEF	; 239
    2288:	85 b9       	out	0x05, r24	; 5
    228a:	08 95       	ret

0000228c <spi_send_byte>:
    228c:	8e bd       	out	0x2e, r24	; 46
    228e:	0d b4       	in	r0, 0x2d	; 45
    2290:	07 fe       	sbrs	r0, 7
    2292:	fd cf       	rjmp	.-6      	; 0x228e <spi_send_byte+0x2>
    2294:	8e b5       	in	r24, 0x2e	; 46
    2296:	08 95       	ret

00002298 <move_terminal_cursor>:
    2298:	9f 93       	push	r25
    229a:	8f 93       	push	r24
    229c:	7f 93       	push	r23
    229e:	6f 93       	push	r22
    22a0:	89 e7       	ldi	r24, 0x79	; 121
    22a2:	93 e0       	ldi	r25, 0x03	; 3
    22a4:	9f 93       	push	r25
    22a6:	8f 93       	push	r24
    22a8:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	08 95       	ret

000022ba <clear_terminal>:
    22ba:	84 e7       	ldi	r24, 0x74	; 116
    22bc:	93 e0       	ldi	r25, 0x03	; 3
    22be:	9f 93       	push	r25
    22c0:	8f 93       	push	r24
    22c2:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	08 95       	ret

000022cc <clear_to_end_of_line>:
    22cc:	80 e7       	ldi	r24, 0x70	; 112
    22ce:	93 e0       	ldi	r25, 0x03	; 3
    22d0:	9f 93       	push	r25
    22d2:	8f 93       	push	r24
    22d4:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	08 95       	ret

000022de <set_display_attribute>:
    22de:	1f 92       	push	r1
    22e0:	8f 93       	push	r24
    22e2:	8a e6       	ldi	r24, 0x6A	; 106
    22e4:	93 e0       	ldi	r25, 0x03	; 3
    22e6:	9f 93       	push	r25
    22e8:	8f 93       	push	r24
    22ea:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	08 95       	ret

000022f8 <hide_cursor>:
    22f8:	83 e6       	ldi	r24, 0x63	; 99
    22fa:	93 e0       	ldi	r25, 0x03	; 3
    22fc:	9f 93       	push	r25
    22fe:	8f 93       	push	r24
    2300:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
    2304:	0f 90       	pop	r0
    2306:	0f 90       	pop	r0
    2308:	08 95       	ret

0000230a <show_cursor>:
    230a:	8c e5       	ldi	r24, 0x5C	; 92
    230c:	93 e0       	ldi	r25, 0x03	; 3
    230e:	9f 93       	push	r25
    2310:	8f 93       	push	r24
    2312:	0e 94 79 14 	call	0x28f2	; 0x28f2 <printf_P>
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	08 95       	ret

0000231c <init_timer0>:
    231c:	10 92 7d 05 	sts	0x057D, r1	; 0x80057d <clock_ticks_ms>
    2320:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <clock_ticks_ms+0x1>
    2324:	10 92 7f 05 	sts	0x057F, r1	; 0x80057f <clock_ticks_ms+0x2>
    2328:	10 92 80 05 	sts	0x0580, r1	; 0x800580 <clock_ticks_ms+0x3>
    232c:	16 bc       	out	0x26, r1	; 38
    232e:	8c e7       	ldi	r24, 0x7C	; 124
    2330:	87 bd       	out	0x27, r24	; 39
    2332:	92 e0       	ldi	r25, 0x02	; 2
    2334:	94 bd       	out	0x24, r25	; 36
    2336:	83 e0       	ldi	r24, 0x03	; 3
    2338:	85 bd       	out	0x25, r24	; 37
    233a:	ee e6       	ldi	r30, 0x6E	; 110
    233c:	f0 e0       	ldi	r31, 0x00	; 0
    233e:	80 81       	ld	r24, Z
    2340:	82 60       	ori	r24, 0x02	; 2
    2342:	80 83       	st	Z, r24
    2344:	95 bb       	out	0x15, r25	; 21
    2346:	08 95       	ret

00002348 <get_current_time>:
    2348:	8f b7       	in	r24, 0x3f	; 63
    234a:	28 2f       	mov	r18, r24
    234c:	20 78       	andi	r18, 0x80	; 128
    234e:	f8 94       	cli
    2350:	60 91 7d 05 	lds	r22, 0x057D	; 0x80057d <clock_ticks_ms>
    2354:	70 91 7e 05 	lds	r23, 0x057E	; 0x80057e <clock_ticks_ms+0x1>
    2358:	80 91 7f 05 	lds	r24, 0x057F	; 0x80057f <clock_ticks_ms+0x2>
    235c:	90 91 80 05 	lds	r25, 0x0580	; 0x800580 <clock_ticks_ms+0x3>
    2360:	22 23       	and	r18, r18
    2362:	09 f0       	breq	.+2      	; 0x2366 <get_current_time+0x1e>
    2364:	78 94       	sei
    2366:	08 95       	ret

00002368 <__vector_16>:
    2368:	1f 92       	push	r1
    236a:	0f 92       	push	r0
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	0f 92       	push	r0
    2370:	11 24       	eor	r1, r1
    2372:	8f 93       	push	r24
    2374:	9f 93       	push	r25
    2376:	af 93       	push	r26
    2378:	bf 93       	push	r27
    237a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <clock_ticks_ms>
    237e:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <clock_ticks_ms+0x1>
    2382:	a0 91 7f 05 	lds	r26, 0x057F	; 0x80057f <clock_ticks_ms+0x2>
    2386:	b0 91 80 05 	lds	r27, 0x0580	; 0x800580 <clock_ticks_ms+0x3>
    238a:	01 96       	adiw	r24, 0x01	; 1
    238c:	a1 1d       	adc	r26, r1
    238e:	b1 1d       	adc	r27, r1
    2390:	80 93 7d 05 	sts	0x057D, r24	; 0x80057d <clock_ticks_ms>
    2394:	90 93 7e 05 	sts	0x057E, r25	; 0x80057e <clock_ticks_ms+0x1>
    2398:	a0 93 7f 05 	sts	0x057F, r26	; 0x80057f <clock_ticks_ms+0x2>
    239c:	b0 93 80 05 	sts	0x0580, r27	; 0x800580 <clock_ticks_ms+0x3>
    23a0:	bf 91       	pop	r27
    23a2:	af 91       	pop	r26
    23a4:	9f 91       	pop	r25
    23a6:	8f 91       	pop	r24
    23a8:	0f 90       	pop	r0
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	0f 90       	pop	r0
    23ae:	1f 90       	pop	r1
    23b0:	18 95       	reti

000023b2 <init_timer1>:
    23b2:	83 e2       	ldi	r24, 0x23	; 35
    23b4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    23b8:	8a e1       	ldi	r24, 0x1A	; 26
    23ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
    23be:	08 95       	ret

000023c0 <init_timer2>:
    23c0:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
    23c4:	08 95       	ret

000023c6 <__cmpsf2>:
    23c6:	0e 94 c6 12 	call	0x258c	; 0x258c <__fp_cmp>
    23ca:	08 f4       	brcc	.+2      	; 0x23ce <__cmpsf2+0x8>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	08 95       	ret

000023d0 <__divsf3>:
    23d0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <__divsf3x>
    23d4:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    23d8:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    23dc:	58 f0       	brcs	.+22     	; 0x23f4 <__divsf3+0x24>
    23de:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    23e2:	40 f0       	brcs	.+16     	; 0x23f4 <__divsf3+0x24>
    23e4:	29 f4       	brne	.+10     	; 0x23f0 <__divsf3+0x20>
    23e6:	5f 3f       	cpi	r21, 0xFF	; 255
    23e8:	29 f0       	breq	.+10     	; 0x23f4 <__divsf3+0x24>
    23ea:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    23ee:	51 11       	cpse	r21, r1
    23f0:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    23f4:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>

000023f8 <__divsf3x>:
    23f8:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    23fc:	68 f3       	brcs	.-38     	; 0x23d8 <__divsf3+0x8>

000023fe <__divsf3_pse>:
    23fe:	99 23       	and	r25, r25
    2400:	b1 f3       	breq	.-20     	; 0x23ee <__divsf3+0x1e>
    2402:	55 23       	and	r21, r21
    2404:	91 f3       	breq	.-28     	; 0x23ea <__divsf3+0x1a>
    2406:	95 1b       	sub	r25, r21
    2408:	55 0b       	sbc	r21, r21
    240a:	bb 27       	eor	r27, r27
    240c:	aa 27       	eor	r26, r26
    240e:	62 17       	cp	r22, r18
    2410:	73 07       	cpc	r23, r19
    2412:	84 07       	cpc	r24, r20
    2414:	38 f0       	brcs	.+14     	; 0x2424 <__divsf3_pse+0x26>
    2416:	9f 5f       	subi	r25, 0xFF	; 255
    2418:	5f 4f       	sbci	r21, 0xFF	; 255
    241a:	22 0f       	add	r18, r18
    241c:	33 1f       	adc	r19, r19
    241e:	44 1f       	adc	r20, r20
    2420:	aa 1f       	adc	r26, r26
    2422:	a9 f3       	breq	.-22     	; 0x240e <__divsf3_pse+0x10>
    2424:	35 d0       	rcall	.+106    	; 0x2490 <__divsf3_pse+0x92>
    2426:	0e 2e       	mov	r0, r30
    2428:	3a f0       	brmi	.+14     	; 0x2438 <__divsf3_pse+0x3a>
    242a:	e0 e8       	ldi	r30, 0x80	; 128
    242c:	32 d0       	rcall	.+100    	; 0x2492 <__divsf3_pse+0x94>
    242e:	91 50       	subi	r25, 0x01	; 1
    2430:	50 40       	sbci	r21, 0x00	; 0
    2432:	e6 95       	lsr	r30
    2434:	00 1c       	adc	r0, r0
    2436:	ca f7       	brpl	.-14     	; 0x242a <__divsf3_pse+0x2c>
    2438:	2b d0       	rcall	.+86     	; 0x2490 <__divsf3_pse+0x92>
    243a:	fe 2f       	mov	r31, r30
    243c:	29 d0       	rcall	.+82     	; 0x2490 <__divsf3_pse+0x92>
    243e:	66 0f       	add	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	88 1f       	adc	r24, r24
    2444:	bb 1f       	adc	r27, r27
    2446:	26 17       	cp	r18, r22
    2448:	37 07       	cpc	r19, r23
    244a:	48 07       	cpc	r20, r24
    244c:	ab 07       	cpc	r26, r27
    244e:	b0 e8       	ldi	r27, 0x80	; 128
    2450:	09 f0       	breq	.+2      	; 0x2454 <__divsf3_pse+0x56>
    2452:	bb 0b       	sbc	r27, r27
    2454:	80 2d       	mov	r24, r0
    2456:	bf 01       	movw	r22, r30
    2458:	ff 27       	eor	r31, r31
    245a:	93 58       	subi	r25, 0x83	; 131
    245c:	5f 4f       	sbci	r21, 0xFF	; 255
    245e:	3a f0       	brmi	.+14     	; 0x246e <__divsf3_pse+0x70>
    2460:	9e 3f       	cpi	r25, 0xFE	; 254
    2462:	51 05       	cpc	r21, r1
    2464:	78 f0       	brcs	.+30     	; 0x2484 <__divsf3_pse+0x86>
    2466:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    246a:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    246e:	5f 3f       	cpi	r21, 0xFF	; 255
    2470:	e4 f3       	brlt	.-8      	; 0x246a <__divsf3_pse+0x6c>
    2472:	98 3e       	cpi	r25, 0xE8	; 232
    2474:	d4 f3       	brlt	.-12     	; 0x246a <__divsf3_pse+0x6c>
    2476:	86 95       	lsr	r24
    2478:	77 95       	ror	r23
    247a:	67 95       	ror	r22
    247c:	b7 95       	ror	r27
    247e:	f7 95       	ror	r31
    2480:	9f 5f       	subi	r25, 0xFF	; 255
    2482:	c9 f7       	brne	.-14     	; 0x2476 <__divsf3_pse+0x78>
    2484:	88 0f       	add	r24, r24
    2486:	91 1d       	adc	r25, r1
    2488:	96 95       	lsr	r25
    248a:	87 95       	ror	r24
    248c:	97 f9       	bld	r25, 7
    248e:	08 95       	ret
    2490:	e1 e0       	ldi	r30, 0x01	; 1
    2492:	66 0f       	add	r22, r22
    2494:	77 1f       	adc	r23, r23
    2496:	88 1f       	adc	r24, r24
    2498:	bb 1f       	adc	r27, r27
    249a:	62 17       	cp	r22, r18
    249c:	73 07       	cpc	r23, r19
    249e:	84 07       	cpc	r24, r20
    24a0:	ba 07       	cpc	r27, r26
    24a2:	20 f0       	brcs	.+8      	; 0x24ac <__divsf3_pse+0xae>
    24a4:	62 1b       	sub	r22, r18
    24a6:	73 0b       	sbc	r23, r19
    24a8:	84 0b       	sbc	r24, r20
    24aa:	ba 0b       	sbc	r27, r26
    24ac:	ee 1f       	adc	r30, r30
    24ae:	88 f7       	brcc	.-30     	; 0x2492 <__divsf3_pse+0x94>
    24b0:	e0 95       	com	r30
    24b2:	08 95       	ret

000024b4 <__fixunssfsi>:
    24b4:	0e 94 1a 13 	call	0x2634	; 0x2634 <__fp_splitA>
    24b8:	88 f0       	brcs	.+34     	; 0x24dc <__fixunssfsi+0x28>
    24ba:	9f 57       	subi	r25, 0x7F	; 127
    24bc:	98 f0       	brcs	.+38     	; 0x24e4 <__fixunssfsi+0x30>
    24be:	b9 2f       	mov	r27, r25
    24c0:	99 27       	eor	r25, r25
    24c2:	b7 51       	subi	r27, 0x17	; 23
    24c4:	b0 f0       	brcs	.+44     	; 0x24f2 <__fixunssfsi+0x3e>
    24c6:	e1 f0       	breq	.+56     	; 0x2500 <__fixunssfsi+0x4c>
    24c8:	66 0f       	add	r22, r22
    24ca:	77 1f       	adc	r23, r23
    24cc:	88 1f       	adc	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	1a f0       	brmi	.+6      	; 0x24d8 <__fixunssfsi+0x24>
    24d2:	ba 95       	dec	r27
    24d4:	c9 f7       	brne	.-14     	; 0x24c8 <__fixunssfsi+0x14>
    24d6:	14 c0       	rjmp	.+40     	; 0x2500 <__fixunssfsi+0x4c>
    24d8:	b1 30       	cpi	r27, 0x01	; 1
    24da:	91 f0       	breq	.+36     	; 0x2500 <__fixunssfsi+0x4c>
    24dc:	0e 94 34 13 	call	0x2668	; 0x2668 <__fp_zero>
    24e0:	b1 e0       	ldi	r27, 0x01	; 1
    24e2:	08 95       	ret
    24e4:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__fp_zero>
    24e8:	67 2f       	mov	r22, r23
    24ea:	78 2f       	mov	r23, r24
    24ec:	88 27       	eor	r24, r24
    24ee:	b8 5f       	subi	r27, 0xF8	; 248
    24f0:	39 f0       	breq	.+14     	; 0x2500 <__fixunssfsi+0x4c>
    24f2:	b9 3f       	cpi	r27, 0xF9	; 249
    24f4:	cc f3       	brlt	.-14     	; 0x24e8 <__fixunssfsi+0x34>
    24f6:	86 95       	lsr	r24
    24f8:	77 95       	ror	r23
    24fa:	67 95       	ror	r22
    24fc:	b3 95       	inc	r27
    24fe:	d9 f7       	brne	.-10     	; 0x24f6 <__fixunssfsi+0x42>
    2500:	3e f4       	brtc	.+14     	; 0x2510 <__fixunssfsi+0x5c>
    2502:	90 95       	com	r25
    2504:	80 95       	com	r24
    2506:	70 95       	com	r23
    2508:	61 95       	neg	r22
    250a:	7f 4f       	sbci	r23, 0xFF	; 255
    250c:	8f 4f       	sbci	r24, 0xFF	; 255
    250e:	9f 4f       	sbci	r25, 0xFF	; 255
    2510:	08 95       	ret

00002512 <__floatunsisf>:
    2512:	e8 94       	clt
    2514:	09 c0       	rjmp	.+18     	; 0x2528 <__floatsisf+0x12>

00002516 <__floatsisf>:
    2516:	97 fb       	bst	r25, 7
    2518:	3e f4       	brtc	.+14     	; 0x2528 <__floatsisf+0x12>
    251a:	90 95       	com	r25
    251c:	80 95       	com	r24
    251e:	70 95       	com	r23
    2520:	61 95       	neg	r22
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	8f 4f       	sbci	r24, 0xFF	; 255
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	99 23       	and	r25, r25
    252a:	a9 f0       	breq	.+42     	; 0x2556 <__floatsisf+0x40>
    252c:	f9 2f       	mov	r31, r25
    252e:	96 e9       	ldi	r25, 0x96	; 150
    2530:	bb 27       	eor	r27, r27
    2532:	93 95       	inc	r25
    2534:	f6 95       	lsr	r31
    2536:	87 95       	ror	r24
    2538:	77 95       	ror	r23
    253a:	67 95       	ror	r22
    253c:	b7 95       	ror	r27
    253e:	f1 11       	cpse	r31, r1
    2540:	f8 cf       	rjmp	.-16     	; 0x2532 <__floatsisf+0x1c>
    2542:	fa f4       	brpl	.+62     	; 0x2582 <__floatsisf+0x6c>
    2544:	bb 0f       	add	r27, r27
    2546:	11 f4       	brne	.+4      	; 0x254c <__floatsisf+0x36>
    2548:	60 ff       	sbrs	r22, 0
    254a:	1b c0       	rjmp	.+54     	; 0x2582 <__floatsisf+0x6c>
    254c:	6f 5f       	subi	r22, 0xFF	; 255
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	16 c0       	rjmp	.+44     	; 0x2582 <__floatsisf+0x6c>
    2556:	88 23       	and	r24, r24
    2558:	11 f0       	breq	.+4      	; 0x255e <__floatsisf+0x48>
    255a:	96 e9       	ldi	r25, 0x96	; 150
    255c:	11 c0       	rjmp	.+34     	; 0x2580 <__floatsisf+0x6a>
    255e:	77 23       	and	r23, r23
    2560:	21 f0       	breq	.+8      	; 0x256a <__floatsisf+0x54>
    2562:	9e e8       	ldi	r25, 0x8E	; 142
    2564:	87 2f       	mov	r24, r23
    2566:	76 2f       	mov	r23, r22
    2568:	05 c0       	rjmp	.+10     	; 0x2574 <__floatsisf+0x5e>
    256a:	66 23       	and	r22, r22
    256c:	71 f0       	breq	.+28     	; 0x258a <__floatsisf+0x74>
    256e:	96 e8       	ldi	r25, 0x86	; 134
    2570:	86 2f       	mov	r24, r22
    2572:	70 e0       	ldi	r23, 0x00	; 0
    2574:	60 e0       	ldi	r22, 0x00	; 0
    2576:	2a f0       	brmi	.+10     	; 0x2582 <__floatsisf+0x6c>
    2578:	9a 95       	dec	r25
    257a:	66 0f       	add	r22, r22
    257c:	77 1f       	adc	r23, r23
    257e:	88 1f       	adc	r24, r24
    2580:	da f7       	brpl	.-10     	; 0x2578 <__floatsisf+0x62>
    2582:	88 0f       	add	r24, r24
    2584:	96 95       	lsr	r25
    2586:	87 95       	ror	r24
    2588:	97 f9       	bld	r25, 7
    258a:	08 95       	ret

0000258c <__fp_cmp>:
    258c:	99 0f       	add	r25, r25
    258e:	00 08       	sbc	r0, r0
    2590:	55 0f       	add	r21, r21
    2592:	aa 0b       	sbc	r26, r26
    2594:	e0 e8       	ldi	r30, 0x80	; 128
    2596:	fe ef       	ldi	r31, 0xFE	; 254
    2598:	16 16       	cp	r1, r22
    259a:	17 06       	cpc	r1, r23
    259c:	e8 07       	cpc	r30, r24
    259e:	f9 07       	cpc	r31, r25
    25a0:	c0 f0       	brcs	.+48     	; 0x25d2 <__fp_cmp+0x46>
    25a2:	12 16       	cp	r1, r18
    25a4:	13 06       	cpc	r1, r19
    25a6:	e4 07       	cpc	r30, r20
    25a8:	f5 07       	cpc	r31, r21
    25aa:	98 f0       	brcs	.+38     	; 0x25d2 <__fp_cmp+0x46>
    25ac:	62 1b       	sub	r22, r18
    25ae:	73 0b       	sbc	r23, r19
    25b0:	84 0b       	sbc	r24, r20
    25b2:	95 0b       	sbc	r25, r21
    25b4:	39 f4       	brne	.+14     	; 0x25c4 <__fp_cmp+0x38>
    25b6:	0a 26       	eor	r0, r26
    25b8:	61 f0       	breq	.+24     	; 0x25d2 <__fp_cmp+0x46>
    25ba:	23 2b       	or	r18, r19
    25bc:	24 2b       	or	r18, r20
    25be:	25 2b       	or	r18, r21
    25c0:	21 f4       	brne	.+8      	; 0x25ca <__fp_cmp+0x3e>
    25c2:	08 95       	ret
    25c4:	0a 26       	eor	r0, r26
    25c6:	09 f4       	brne	.+2      	; 0x25ca <__fp_cmp+0x3e>
    25c8:	a1 40       	sbci	r26, 0x01	; 1
    25ca:	a6 95       	lsr	r26
    25cc:	8f ef       	ldi	r24, 0xFF	; 255
    25ce:	81 1d       	adc	r24, r1
    25d0:	81 1d       	adc	r24, r1
    25d2:	08 95       	ret

000025d4 <__fp_inf>:
    25d4:	97 f9       	bld	r25, 7
    25d6:	9f 67       	ori	r25, 0x7F	; 127
    25d8:	80 e8       	ldi	r24, 0x80	; 128
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	60 e0       	ldi	r22, 0x00	; 0
    25de:	08 95       	ret

000025e0 <__fp_nan>:
    25e0:	9f ef       	ldi	r25, 0xFF	; 255
    25e2:	80 ec       	ldi	r24, 0xC0	; 192
    25e4:	08 95       	ret

000025e6 <__fp_pscA>:
    25e6:	00 24       	eor	r0, r0
    25e8:	0a 94       	dec	r0
    25ea:	16 16       	cp	r1, r22
    25ec:	17 06       	cpc	r1, r23
    25ee:	18 06       	cpc	r1, r24
    25f0:	09 06       	cpc	r0, r25
    25f2:	08 95       	ret

000025f4 <__fp_pscB>:
    25f4:	00 24       	eor	r0, r0
    25f6:	0a 94       	dec	r0
    25f8:	12 16       	cp	r1, r18
    25fa:	13 06       	cpc	r1, r19
    25fc:	14 06       	cpc	r1, r20
    25fe:	05 06       	cpc	r0, r21
    2600:	08 95       	ret

00002602 <__fp_round>:
    2602:	09 2e       	mov	r0, r25
    2604:	03 94       	inc	r0
    2606:	00 0c       	add	r0, r0
    2608:	11 f4       	brne	.+4      	; 0x260e <__fp_round+0xc>
    260a:	88 23       	and	r24, r24
    260c:	52 f0       	brmi	.+20     	; 0x2622 <__fp_round+0x20>
    260e:	bb 0f       	add	r27, r27
    2610:	40 f4       	brcc	.+16     	; 0x2622 <__fp_round+0x20>
    2612:	bf 2b       	or	r27, r31
    2614:	11 f4       	brne	.+4      	; 0x261a <__fp_round+0x18>
    2616:	60 ff       	sbrs	r22, 0
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <__fp_round+0x20>
    261a:	6f 5f       	subi	r22, 0xFF	; 255
    261c:	7f 4f       	sbci	r23, 0xFF	; 255
    261e:	8f 4f       	sbci	r24, 0xFF	; 255
    2620:	9f 4f       	sbci	r25, 0xFF	; 255
    2622:	08 95       	ret

00002624 <__fp_split3>:
    2624:	57 fd       	sbrc	r21, 7
    2626:	90 58       	subi	r25, 0x80	; 128
    2628:	44 0f       	add	r20, r20
    262a:	55 1f       	adc	r21, r21
    262c:	59 f0       	breq	.+22     	; 0x2644 <__fp_splitA+0x10>
    262e:	5f 3f       	cpi	r21, 0xFF	; 255
    2630:	71 f0       	breq	.+28     	; 0x264e <__fp_splitA+0x1a>
    2632:	47 95       	ror	r20

00002634 <__fp_splitA>:
    2634:	88 0f       	add	r24, r24
    2636:	97 fb       	bst	r25, 7
    2638:	99 1f       	adc	r25, r25
    263a:	61 f0       	breq	.+24     	; 0x2654 <__fp_splitA+0x20>
    263c:	9f 3f       	cpi	r25, 0xFF	; 255
    263e:	79 f0       	breq	.+30     	; 0x265e <__fp_splitA+0x2a>
    2640:	87 95       	ror	r24
    2642:	08 95       	ret
    2644:	12 16       	cp	r1, r18
    2646:	13 06       	cpc	r1, r19
    2648:	14 06       	cpc	r1, r20
    264a:	55 1f       	adc	r21, r21
    264c:	f2 cf       	rjmp	.-28     	; 0x2632 <__fp_split3+0xe>
    264e:	46 95       	lsr	r20
    2650:	f1 df       	rcall	.-30     	; 0x2634 <__fp_splitA>
    2652:	08 c0       	rjmp	.+16     	; 0x2664 <__fp_splitA+0x30>
    2654:	16 16       	cp	r1, r22
    2656:	17 06       	cpc	r1, r23
    2658:	18 06       	cpc	r1, r24
    265a:	99 1f       	adc	r25, r25
    265c:	f1 cf       	rjmp	.-30     	; 0x2640 <__fp_splitA+0xc>
    265e:	86 95       	lsr	r24
    2660:	71 05       	cpc	r23, r1
    2662:	61 05       	cpc	r22, r1
    2664:	08 94       	sec
    2666:	08 95       	ret

00002668 <__fp_zero>:
    2668:	e8 94       	clt

0000266a <__fp_szero>:
    266a:	bb 27       	eor	r27, r27
    266c:	66 27       	eor	r22, r22
    266e:	77 27       	eor	r23, r23
    2670:	cb 01       	movw	r24, r22
    2672:	97 f9       	bld	r25, 7
    2674:	08 95       	ret

00002676 <__gesf2>:
    2676:	0e 94 c6 12 	call	0x258c	; 0x258c <__fp_cmp>
    267a:	08 f4       	brcc	.+2      	; 0x267e <__gesf2+0x8>
    267c:	8f ef       	ldi	r24, 0xFF	; 255
    267e:	08 95       	ret

00002680 <__mulsf3>:
    2680:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__mulsf3x>
    2684:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_round>
    2688:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <__fp_pscA>
    268c:	38 f0       	brcs	.+14     	; 0x269c <__mulsf3+0x1c>
    268e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fp_pscB>
    2692:	20 f0       	brcs	.+8      	; 0x269c <__mulsf3+0x1c>
    2694:	95 23       	and	r25, r21
    2696:	11 f0       	breq	.+4      	; 0x269c <__mulsf3+0x1c>
    2698:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    269c:	0c 94 f0 12 	jmp	0x25e0	; 0x25e0 <__fp_nan>
    26a0:	11 24       	eor	r1, r1
    26a2:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>

000026a6 <__mulsf3x>:
    26a6:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_split3>
    26aa:	70 f3       	brcs	.-36     	; 0x2688 <__mulsf3+0x8>

000026ac <__mulsf3_pse>:
    26ac:	95 9f       	mul	r25, r21
    26ae:	c1 f3       	breq	.-16     	; 0x26a0 <__mulsf3+0x20>
    26b0:	95 0f       	add	r25, r21
    26b2:	50 e0       	ldi	r21, 0x00	; 0
    26b4:	55 1f       	adc	r21, r21
    26b6:	62 9f       	mul	r22, r18
    26b8:	f0 01       	movw	r30, r0
    26ba:	72 9f       	mul	r23, r18
    26bc:	bb 27       	eor	r27, r27
    26be:	f0 0d       	add	r31, r0
    26c0:	b1 1d       	adc	r27, r1
    26c2:	63 9f       	mul	r22, r19
    26c4:	aa 27       	eor	r26, r26
    26c6:	f0 0d       	add	r31, r0
    26c8:	b1 1d       	adc	r27, r1
    26ca:	aa 1f       	adc	r26, r26
    26cc:	64 9f       	mul	r22, r20
    26ce:	66 27       	eor	r22, r22
    26d0:	b0 0d       	add	r27, r0
    26d2:	a1 1d       	adc	r26, r1
    26d4:	66 1f       	adc	r22, r22
    26d6:	82 9f       	mul	r24, r18
    26d8:	22 27       	eor	r18, r18
    26da:	b0 0d       	add	r27, r0
    26dc:	a1 1d       	adc	r26, r1
    26de:	62 1f       	adc	r22, r18
    26e0:	73 9f       	mul	r23, r19
    26e2:	b0 0d       	add	r27, r0
    26e4:	a1 1d       	adc	r26, r1
    26e6:	62 1f       	adc	r22, r18
    26e8:	83 9f       	mul	r24, r19
    26ea:	a0 0d       	add	r26, r0
    26ec:	61 1d       	adc	r22, r1
    26ee:	22 1f       	adc	r18, r18
    26f0:	74 9f       	mul	r23, r20
    26f2:	33 27       	eor	r19, r19
    26f4:	a0 0d       	add	r26, r0
    26f6:	61 1d       	adc	r22, r1
    26f8:	23 1f       	adc	r18, r19
    26fa:	84 9f       	mul	r24, r20
    26fc:	60 0d       	add	r22, r0
    26fe:	21 1d       	adc	r18, r1
    2700:	82 2f       	mov	r24, r18
    2702:	76 2f       	mov	r23, r22
    2704:	6a 2f       	mov	r22, r26
    2706:	11 24       	eor	r1, r1
    2708:	9f 57       	subi	r25, 0x7F	; 127
    270a:	50 40       	sbci	r21, 0x00	; 0
    270c:	9a f0       	brmi	.+38     	; 0x2734 <__mulsf3_pse+0x88>
    270e:	f1 f0       	breq	.+60     	; 0x274c <__mulsf3_pse+0xa0>
    2710:	88 23       	and	r24, r24
    2712:	4a f0       	brmi	.+18     	; 0x2726 <__mulsf3_pse+0x7a>
    2714:	ee 0f       	add	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	bb 1f       	adc	r27, r27
    271a:	66 1f       	adc	r22, r22
    271c:	77 1f       	adc	r23, r23
    271e:	88 1f       	adc	r24, r24
    2720:	91 50       	subi	r25, 0x01	; 1
    2722:	50 40       	sbci	r21, 0x00	; 0
    2724:	a9 f7       	brne	.-22     	; 0x2710 <__mulsf3_pse+0x64>
    2726:	9e 3f       	cpi	r25, 0xFE	; 254
    2728:	51 05       	cpc	r21, r1
    272a:	80 f0       	brcs	.+32     	; 0x274c <__mulsf3_pse+0xa0>
    272c:	0c 94 ea 12 	jmp	0x25d4	; 0x25d4 <__fp_inf>
    2730:	0c 94 35 13 	jmp	0x266a	; 0x266a <__fp_szero>
    2734:	5f 3f       	cpi	r21, 0xFF	; 255
    2736:	e4 f3       	brlt	.-8      	; 0x2730 <__mulsf3_pse+0x84>
    2738:	98 3e       	cpi	r25, 0xE8	; 232
    273a:	d4 f3       	brlt	.-12     	; 0x2730 <__mulsf3_pse+0x84>
    273c:	86 95       	lsr	r24
    273e:	77 95       	ror	r23
    2740:	67 95       	ror	r22
    2742:	b7 95       	ror	r27
    2744:	f7 95       	ror	r31
    2746:	e7 95       	ror	r30
    2748:	9f 5f       	subi	r25, 0xFF	; 255
    274a:	c1 f7       	brne	.-16     	; 0x273c <__mulsf3_pse+0x90>
    274c:	fe 2b       	or	r31, r30
    274e:	88 0f       	add	r24, r24
    2750:	91 1d       	adc	r25, r1
    2752:	96 95       	lsr	r25
    2754:	87 95       	ror	r24
    2756:	97 f9       	bld	r25, 7
    2758:	08 95       	ret

0000275a <__divmodhi4>:
    275a:	97 fb       	bst	r25, 7
    275c:	07 2e       	mov	r0, r23
    275e:	16 f4       	brtc	.+4      	; 0x2764 <__divmodhi4+0xa>
    2760:	00 94       	com	r0
    2762:	07 d0       	rcall	.+14     	; 0x2772 <__divmodhi4_neg1>
    2764:	77 fd       	sbrc	r23, 7
    2766:	09 d0       	rcall	.+18     	; 0x277a <__divmodhi4_neg2>
    2768:	0e 94 11 14 	call	0x2822	; 0x2822 <__udivmodhi4>
    276c:	07 fc       	sbrc	r0, 7
    276e:	05 d0       	rcall	.+10     	; 0x277a <__divmodhi4_neg2>
    2770:	3e f4       	brtc	.+14     	; 0x2780 <__divmodhi4_exit>

00002772 <__divmodhi4_neg1>:
    2772:	90 95       	com	r25
    2774:	81 95       	neg	r24
    2776:	9f 4f       	sbci	r25, 0xFF	; 255
    2778:	08 95       	ret

0000277a <__divmodhi4_neg2>:
    277a:	70 95       	com	r23
    277c:	61 95       	neg	r22
    277e:	7f 4f       	sbci	r23, 0xFF	; 255

00002780 <__divmodhi4_exit>:
    2780:	08 95       	ret

00002782 <__udivmodsi4>:
    2782:	a1 e2       	ldi	r26, 0x21	; 33
    2784:	1a 2e       	mov	r1, r26
    2786:	aa 1b       	sub	r26, r26
    2788:	bb 1b       	sub	r27, r27
    278a:	fd 01       	movw	r30, r26
    278c:	0d c0       	rjmp	.+26     	; 0x27a8 <__udivmodsi4_ep>

0000278e <__udivmodsi4_loop>:
    278e:	aa 1f       	adc	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	ee 1f       	adc	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	a2 17       	cp	r26, r18
    2798:	b3 07       	cpc	r27, r19
    279a:	e4 07       	cpc	r30, r20
    279c:	f5 07       	cpc	r31, r21
    279e:	20 f0       	brcs	.+8      	; 0x27a8 <__udivmodsi4_ep>
    27a0:	a2 1b       	sub	r26, r18
    27a2:	b3 0b       	sbc	r27, r19
    27a4:	e4 0b       	sbc	r30, r20
    27a6:	f5 0b       	sbc	r31, r21

000027a8 <__udivmodsi4_ep>:
    27a8:	66 1f       	adc	r22, r22
    27aa:	77 1f       	adc	r23, r23
    27ac:	88 1f       	adc	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	1a 94       	dec	r1
    27b2:	69 f7       	brne	.-38     	; 0x278e <__udivmodsi4_loop>
    27b4:	60 95       	com	r22
    27b6:	70 95       	com	r23
    27b8:	80 95       	com	r24
    27ba:	90 95       	com	r25
    27bc:	9b 01       	movw	r18, r22
    27be:	ac 01       	movw	r20, r24
    27c0:	bd 01       	movw	r22, r26
    27c2:	cf 01       	movw	r24, r30
    27c4:	08 95       	ret

000027c6 <__divmodsi4>:
    27c6:	05 2e       	mov	r0, r21
    27c8:	97 fb       	bst	r25, 7
    27ca:	1e f4       	brtc	.+6      	; 0x27d2 <__divmodsi4+0xc>
    27cc:	00 94       	com	r0
    27ce:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <__negsi2>
    27d2:	57 fd       	sbrc	r21, 7
    27d4:	07 d0       	rcall	.+14     	; 0x27e4 <__divmodsi4_neg2>
    27d6:	0e 94 c1 13 	call	0x2782	; 0x2782 <__udivmodsi4>
    27da:	07 fc       	sbrc	r0, 7
    27dc:	03 d0       	rcall	.+6      	; 0x27e4 <__divmodsi4_neg2>
    27de:	4e f4       	brtc	.+18     	; 0x27f2 <__divmodsi4_exit>
    27e0:	0c 94 fa 13 	jmp	0x27f4	; 0x27f4 <__negsi2>

000027e4 <__divmodsi4_neg2>:
    27e4:	50 95       	com	r21
    27e6:	40 95       	com	r20
    27e8:	30 95       	com	r19
    27ea:	21 95       	neg	r18
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	4f 4f       	sbci	r20, 0xFF	; 255
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255

000027f2 <__divmodsi4_exit>:
    27f2:	08 95       	ret

000027f4 <__negsi2>:
    27f4:	90 95       	com	r25
    27f6:	80 95       	com	r24
    27f8:	70 95       	com	r23
    27fa:	61 95       	neg	r22
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	08 95       	ret

00002804 <__umulhisi3>:
    2804:	a2 9f       	mul	r26, r18
    2806:	b0 01       	movw	r22, r0
    2808:	b3 9f       	mul	r27, r19
    280a:	c0 01       	movw	r24, r0
    280c:	a3 9f       	mul	r26, r19
    280e:	70 0d       	add	r23, r0
    2810:	81 1d       	adc	r24, r1
    2812:	11 24       	eor	r1, r1
    2814:	91 1d       	adc	r25, r1
    2816:	b2 9f       	mul	r27, r18
    2818:	70 0d       	add	r23, r0
    281a:	81 1d       	adc	r24, r1
    281c:	11 24       	eor	r1, r1
    281e:	91 1d       	adc	r25, r1
    2820:	08 95       	ret

00002822 <__udivmodhi4>:
    2822:	aa 1b       	sub	r26, r26
    2824:	bb 1b       	sub	r27, r27
    2826:	51 e1       	ldi	r21, 0x11	; 17
    2828:	07 c0       	rjmp	.+14     	; 0x2838 <__udivmodhi4_ep>

0000282a <__udivmodhi4_loop>:
    282a:	aa 1f       	adc	r26, r26
    282c:	bb 1f       	adc	r27, r27
    282e:	a6 17       	cp	r26, r22
    2830:	b7 07       	cpc	r27, r23
    2832:	10 f0       	brcs	.+4      	; 0x2838 <__udivmodhi4_ep>
    2834:	a6 1b       	sub	r26, r22
    2836:	b7 0b       	sbc	r27, r23

00002838 <__udivmodhi4_ep>:
    2838:	88 1f       	adc	r24, r24
    283a:	99 1f       	adc	r25, r25
    283c:	5a 95       	dec	r21
    283e:	a9 f7       	brne	.-22     	; 0x282a <__udivmodhi4_loop>
    2840:	80 95       	com	r24
    2842:	90 95       	com	r25
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	08 95       	ret

0000284a <fgetc>:
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	ec 01       	movw	r28, r24
    2850:	2b 81       	ldd	r18, Y+3	; 0x03
    2852:	20 ff       	sbrs	r18, 0
    2854:	33 c0       	rjmp	.+102    	; 0x28bc <fgetc+0x72>
    2856:	26 ff       	sbrs	r18, 6
    2858:	0a c0       	rjmp	.+20     	; 0x286e <fgetc+0x24>
    285a:	2f 7b       	andi	r18, 0xBF	; 191
    285c:	2b 83       	std	Y+3, r18	; 0x03
    285e:	8e 81       	ldd	r24, Y+6	; 0x06
    2860:	9f 81       	ldd	r25, Y+7	; 0x07
    2862:	01 96       	adiw	r24, 0x01	; 1
    2864:	9f 83       	std	Y+7, r25	; 0x07
    2866:	8e 83       	std	Y+6, r24	; 0x06
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	29 c0       	rjmp	.+82     	; 0x28c0 <fgetc+0x76>
    286e:	22 ff       	sbrs	r18, 2
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <fgetc+0x46>
    2872:	e8 81       	ld	r30, Y
    2874:	f9 81       	ldd	r31, Y+1	; 0x01
    2876:	80 81       	ld	r24, Z
    2878:	08 2e       	mov	r0, r24
    287a:	00 0c       	add	r0, r0
    287c:	99 0b       	sbc	r25, r25
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	19 f4       	brne	.+6      	; 0x2888 <fgetc+0x3e>
    2882:	20 62       	ori	r18, 0x20	; 32
    2884:	2b 83       	std	Y+3, r18	; 0x03
    2886:	1a c0       	rjmp	.+52     	; 0x28bc <fgetc+0x72>
    2888:	31 96       	adiw	r30, 0x01	; 1
    288a:	f9 83       	std	Y+1, r31	; 0x01
    288c:	e8 83       	st	Y, r30
    288e:	0e c0       	rjmp	.+28     	; 0x28ac <fgetc+0x62>
    2890:	ea 85       	ldd	r30, Y+10	; 0x0a
    2892:	fb 85       	ldd	r31, Y+11	; 0x0b
    2894:	09 95       	icall
    2896:	97 ff       	sbrs	r25, 7
    2898:	09 c0       	rjmp	.+18     	; 0x28ac <fgetc+0x62>
    289a:	2b 81       	ldd	r18, Y+3	; 0x03
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	11 f0       	breq	.+4      	; 0x28a4 <fgetc+0x5a>
    28a0:	80 e2       	ldi	r24, 0x20	; 32
    28a2:	01 c0       	rjmp	.+2      	; 0x28a6 <fgetc+0x5c>
    28a4:	80 e1       	ldi	r24, 0x10	; 16
    28a6:	82 2b       	or	r24, r18
    28a8:	8b 83       	std	Y+3, r24	; 0x03
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <fgetc+0x72>
    28ac:	2e 81       	ldd	r18, Y+6	; 0x06
    28ae:	3f 81       	ldd	r19, Y+7	; 0x07
    28b0:	2f 5f       	subi	r18, 0xFF	; 255
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	3f 83       	std	Y+7, r19	; 0x07
    28b6:	2e 83       	std	Y+6, r18	; 0x06
    28b8:	99 27       	eor	r25, r25
    28ba:	02 c0       	rjmp	.+4      	; 0x28c0 <fgetc+0x76>
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	9f ef       	ldi	r25, 0xFF	; 255
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	08 95       	ret

000028c6 <printf>:
    28c6:	a0 e0       	ldi	r26, 0x00	; 0
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e9 e6       	ldi	r30, 0x69	; 105
    28cc:	f4 e1       	ldi	r31, 0x14	; 20
    28ce:	0c 94 47 17 	jmp	0x2e8e	; 0x2e8e <__prologue_saves__+0x20>
    28d2:	ae 01       	movw	r20, r28
    28d4:	4b 5f       	subi	r20, 0xFB	; 251
    28d6:	5f 4f       	sbci	r21, 0xFF	; 255
    28d8:	fa 01       	movw	r30, r20
    28da:	61 91       	ld	r22, Z+
    28dc:	71 91       	ld	r23, Z+
    28de:	af 01       	movw	r20, r30
    28e0:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <__iob+0x2>
    28e4:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <__iob+0x3>
    28e8:	0e 94 a6 14 	call	0x294c	; 0x294c <vfprintf>
    28ec:	e2 e0       	ldi	r30, 0x02	; 2
    28ee:	0c 94 63 17 	jmp	0x2ec6	; 0x2ec6 <__epilogue_restores__+0x20>

000028f2 <printf_P>:
    28f2:	a0 e0       	ldi	r26, 0x00	; 0
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ef e7       	ldi	r30, 0x7F	; 127
    28f8:	f4 e1       	ldi	r31, 0x14	; 20
    28fa:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x1c>
    28fe:	ae 01       	movw	r20, r28
    2900:	49 5f       	subi	r20, 0xF9	; 249
    2902:	5f 4f       	sbci	r21, 0xFF	; 255
    2904:	da 01       	movw	r26, r20
    2906:	6d 91       	ld	r22, X+
    2908:	7d 91       	ld	r23, X+
    290a:	ad 01       	movw	r20, r26
    290c:	0c e2       	ldi	r16, 0x2C	; 44
    290e:	17 e0       	ldi	r17, 0x07	; 7
    2910:	f8 01       	movw	r30, r16
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	dc 01       	movw	r26, r24
    2918:	13 96       	adiw	r26, 0x03	; 3
    291a:	2c 91       	ld	r18, X
    291c:	13 97       	sbiw	r26, 0x03	; 3
    291e:	28 60       	ori	r18, 0x08	; 8
    2920:	13 96       	adiw	r26, 0x03	; 3
    2922:	2c 93       	st	X, r18
    2924:	0e 94 a6 14 	call	0x294c	; 0x294c <vfprintf>
    2928:	d8 01       	movw	r26, r16
    292a:	12 96       	adiw	r26, 0x02	; 2
    292c:	ed 91       	ld	r30, X+
    292e:	fc 91       	ld	r31, X
    2930:	13 97       	sbiw	r26, 0x03	; 3
    2932:	23 81       	ldd	r18, Z+3	; 0x03
    2934:	27 7f       	andi	r18, 0xF7	; 247
    2936:	23 83       	std	Z+3, r18	; 0x03
    2938:	e4 e0       	ldi	r30, 0x04	; 4
    293a:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x1c>

0000293e <putchar>:
    293e:	60 91 2e 07 	lds	r22, 0x072E	; 0x80072e <__iob+0x2>
    2942:	70 91 2f 07 	lds	r23, 0x072F	; 0x80072f <__iob+0x3>
    2946:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    294a:	08 95       	ret

0000294c <vfprintf>:
    294c:	ab e0       	ldi	r26, 0x0B	; 11
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	ec ea       	ldi	r30, 0xAC	; 172
    2952:	f4 e1       	ldi	r31, 0x14	; 20
    2954:	0c 94 37 17 	jmp	0x2e6e	; 0x2e6e <__prologue_saves__>
    2958:	6c 01       	movw	r12, r24
    295a:	7b 01       	movw	r14, r22
    295c:	8a 01       	movw	r16, r20
    295e:	fc 01       	movw	r30, r24
    2960:	17 82       	std	Z+7, r1	; 0x07
    2962:	16 82       	std	Z+6, r1	; 0x06
    2964:	83 81       	ldd	r24, Z+3	; 0x03
    2966:	81 ff       	sbrs	r24, 1
    2968:	cc c1       	rjmp	.+920    	; 0x2d02 <vfprintf+0x3b6>
    296a:	ce 01       	movw	r24, r28
    296c:	01 96       	adiw	r24, 0x01	; 1
    296e:	3c 01       	movw	r6, r24
    2970:	f6 01       	movw	r30, r12
    2972:	93 81       	ldd	r25, Z+3	; 0x03
    2974:	f7 01       	movw	r30, r14
    2976:	93 fd       	sbrc	r25, 3
    2978:	85 91       	lpm	r24, Z+
    297a:	93 ff       	sbrs	r25, 3
    297c:	81 91       	ld	r24, Z+
    297e:	7f 01       	movw	r14, r30
    2980:	88 23       	and	r24, r24
    2982:	09 f4       	brne	.+2      	; 0x2986 <vfprintf+0x3a>
    2984:	ba c1       	rjmp	.+884    	; 0x2cfa <vfprintf+0x3ae>
    2986:	85 32       	cpi	r24, 0x25	; 37
    2988:	39 f4       	brne	.+14     	; 0x2998 <vfprintf+0x4c>
    298a:	93 fd       	sbrc	r25, 3
    298c:	85 91       	lpm	r24, Z+
    298e:	93 ff       	sbrs	r25, 3
    2990:	81 91       	ld	r24, Z+
    2992:	7f 01       	movw	r14, r30
    2994:	85 32       	cpi	r24, 0x25	; 37
    2996:	29 f4       	brne	.+10     	; 0x29a2 <vfprintf+0x56>
    2998:	b6 01       	movw	r22, r12
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    29a0:	e7 cf       	rjmp	.-50     	; 0x2970 <vfprintf+0x24>
    29a2:	91 2c       	mov	r9, r1
    29a4:	21 2c       	mov	r2, r1
    29a6:	31 2c       	mov	r3, r1
    29a8:	ff e1       	ldi	r31, 0x1F	; 31
    29aa:	f3 15       	cp	r31, r3
    29ac:	d8 f0       	brcs	.+54     	; 0x29e4 <vfprintf+0x98>
    29ae:	8b 32       	cpi	r24, 0x2B	; 43
    29b0:	79 f0       	breq	.+30     	; 0x29d0 <vfprintf+0x84>
    29b2:	38 f4       	brcc	.+14     	; 0x29c2 <vfprintf+0x76>
    29b4:	80 32       	cpi	r24, 0x20	; 32
    29b6:	79 f0       	breq	.+30     	; 0x29d6 <vfprintf+0x8a>
    29b8:	83 32       	cpi	r24, 0x23	; 35
    29ba:	a1 f4       	brne	.+40     	; 0x29e4 <vfprintf+0x98>
    29bc:	23 2d       	mov	r18, r3
    29be:	20 61       	ori	r18, 0x10	; 16
    29c0:	1d c0       	rjmp	.+58     	; 0x29fc <vfprintf+0xb0>
    29c2:	8d 32       	cpi	r24, 0x2D	; 45
    29c4:	61 f0       	breq	.+24     	; 0x29de <vfprintf+0x92>
    29c6:	80 33       	cpi	r24, 0x30	; 48
    29c8:	69 f4       	brne	.+26     	; 0x29e4 <vfprintf+0x98>
    29ca:	23 2d       	mov	r18, r3
    29cc:	21 60       	ori	r18, 0x01	; 1
    29ce:	16 c0       	rjmp	.+44     	; 0x29fc <vfprintf+0xb0>
    29d0:	83 2d       	mov	r24, r3
    29d2:	82 60       	ori	r24, 0x02	; 2
    29d4:	38 2e       	mov	r3, r24
    29d6:	e3 2d       	mov	r30, r3
    29d8:	e4 60       	ori	r30, 0x04	; 4
    29da:	3e 2e       	mov	r3, r30
    29dc:	2a c0       	rjmp	.+84     	; 0x2a32 <vfprintf+0xe6>
    29de:	f3 2d       	mov	r31, r3
    29e0:	f8 60       	ori	r31, 0x08	; 8
    29e2:	1d c0       	rjmp	.+58     	; 0x2a1e <vfprintf+0xd2>
    29e4:	37 fc       	sbrc	r3, 7
    29e6:	2d c0       	rjmp	.+90     	; 0x2a42 <vfprintf+0xf6>
    29e8:	20 ed       	ldi	r18, 0xD0	; 208
    29ea:	28 0f       	add	r18, r24
    29ec:	2a 30       	cpi	r18, 0x0A	; 10
    29ee:	40 f0       	brcs	.+16     	; 0x2a00 <vfprintf+0xb4>
    29f0:	8e 32       	cpi	r24, 0x2E	; 46
    29f2:	b9 f4       	brne	.+46     	; 0x2a22 <vfprintf+0xd6>
    29f4:	36 fc       	sbrc	r3, 6
    29f6:	81 c1       	rjmp	.+770    	; 0x2cfa <vfprintf+0x3ae>
    29f8:	23 2d       	mov	r18, r3
    29fa:	20 64       	ori	r18, 0x40	; 64
    29fc:	32 2e       	mov	r3, r18
    29fe:	19 c0       	rjmp	.+50     	; 0x2a32 <vfprintf+0xe6>
    2a00:	36 fe       	sbrs	r3, 6
    2a02:	06 c0       	rjmp	.+12     	; 0x2a10 <vfprintf+0xc4>
    2a04:	8a e0       	ldi	r24, 0x0A	; 10
    2a06:	98 9e       	mul	r9, r24
    2a08:	20 0d       	add	r18, r0
    2a0a:	11 24       	eor	r1, r1
    2a0c:	92 2e       	mov	r9, r18
    2a0e:	11 c0       	rjmp	.+34     	; 0x2a32 <vfprintf+0xe6>
    2a10:	ea e0       	ldi	r30, 0x0A	; 10
    2a12:	2e 9e       	mul	r2, r30
    2a14:	20 0d       	add	r18, r0
    2a16:	11 24       	eor	r1, r1
    2a18:	22 2e       	mov	r2, r18
    2a1a:	f3 2d       	mov	r31, r3
    2a1c:	f0 62       	ori	r31, 0x20	; 32
    2a1e:	3f 2e       	mov	r3, r31
    2a20:	08 c0       	rjmp	.+16     	; 0x2a32 <vfprintf+0xe6>
    2a22:	8c 36       	cpi	r24, 0x6C	; 108
    2a24:	21 f4       	brne	.+8      	; 0x2a2e <vfprintf+0xe2>
    2a26:	83 2d       	mov	r24, r3
    2a28:	80 68       	ori	r24, 0x80	; 128
    2a2a:	38 2e       	mov	r3, r24
    2a2c:	02 c0       	rjmp	.+4      	; 0x2a32 <vfprintf+0xe6>
    2a2e:	88 36       	cpi	r24, 0x68	; 104
    2a30:	41 f4       	brne	.+16     	; 0x2a42 <vfprintf+0xf6>
    2a32:	f7 01       	movw	r30, r14
    2a34:	93 fd       	sbrc	r25, 3
    2a36:	85 91       	lpm	r24, Z+
    2a38:	93 ff       	sbrs	r25, 3
    2a3a:	81 91       	ld	r24, Z+
    2a3c:	7f 01       	movw	r14, r30
    2a3e:	81 11       	cpse	r24, r1
    2a40:	b3 cf       	rjmp	.-154    	; 0x29a8 <vfprintf+0x5c>
    2a42:	98 2f       	mov	r25, r24
    2a44:	9f 7d       	andi	r25, 0xDF	; 223
    2a46:	95 54       	subi	r25, 0x45	; 69
    2a48:	93 30       	cpi	r25, 0x03	; 3
    2a4a:	28 f4       	brcc	.+10     	; 0x2a56 <vfprintf+0x10a>
    2a4c:	0c 5f       	subi	r16, 0xFC	; 252
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	9f e3       	ldi	r25, 0x3F	; 63
    2a52:	99 83       	std	Y+1, r25	; 0x01
    2a54:	0d c0       	rjmp	.+26     	; 0x2a70 <vfprintf+0x124>
    2a56:	83 36       	cpi	r24, 0x63	; 99
    2a58:	31 f0       	breq	.+12     	; 0x2a66 <vfprintf+0x11a>
    2a5a:	83 37       	cpi	r24, 0x73	; 115
    2a5c:	71 f0       	breq	.+28     	; 0x2a7a <vfprintf+0x12e>
    2a5e:	83 35       	cpi	r24, 0x53	; 83
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <vfprintf+0x118>
    2a62:	59 c0       	rjmp	.+178    	; 0x2b16 <vfprintf+0x1ca>
    2a64:	21 c0       	rjmp	.+66     	; 0x2aa8 <vfprintf+0x15c>
    2a66:	f8 01       	movw	r30, r16
    2a68:	80 81       	ld	r24, Z
    2a6a:	89 83       	std	Y+1, r24	; 0x01
    2a6c:	0e 5f       	subi	r16, 0xFE	; 254
    2a6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a70:	88 24       	eor	r8, r8
    2a72:	83 94       	inc	r8
    2a74:	91 2c       	mov	r9, r1
    2a76:	53 01       	movw	r10, r6
    2a78:	13 c0       	rjmp	.+38     	; 0x2aa0 <vfprintf+0x154>
    2a7a:	28 01       	movw	r4, r16
    2a7c:	f2 e0       	ldi	r31, 0x02	; 2
    2a7e:	4f 0e       	add	r4, r31
    2a80:	51 1c       	adc	r5, r1
    2a82:	f8 01       	movw	r30, r16
    2a84:	a0 80       	ld	r10, Z
    2a86:	b1 80       	ldd	r11, Z+1	; 0x01
    2a88:	36 fe       	sbrs	r3, 6
    2a8a:	03 c0       	rjmp	.+6      	; 0x2a92 <vfprintf+0x146>
    2a8c:	69 2d       	mov	r22, r9
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <vfprintf+0x14a>
    2a92:	6f ef       	ldi	r22, 0xFF	; 255
    2a94:	7f ef       	ldi	r23, 0xFF	; 255
    2a96:	c5 01       	movw	r24, r10
    2a98:	0e 94 92 16 	call	0x2d24	; 0x2d24 <strnlen>
    2a9c:	4c 01       	movw	r8, r24
    2a9e:	82 01       	movw	r16, r4
    2aa0:	f3 2d       	mov	r31, r3
    2aa2:	ff 77       	andi	r31, 0x7F	; 127
    2aa4:	3f 2e       	mov	r3, r31
    2aa6:	16 c0       	rjmp	.+44     	; 0x2ad4 <vfprintf+0x188>
    2aa8:	28 01       	movw	r4, r16
    2aaa:	22 e0       	ldi	r18, 0x02	; 2
    2aac:	42 0e       	add	r4, r18
    2aae:	51 1c       	adc	r5, r1
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	a0 80       	ld	r10, Z
    2ab4:	b1 80       	ldd	r11, Z+1	; 0x01
    2ab6:	36 fe       	sbrs	r3, 6
    2ab8:	03 c0       	rjmp	.+6      	; 0x2ac0 <vfprintf+0x174>
    2aba:	69 2d       	mov	r22, r9
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <vfprintf+0x178>
    2ac0:	6f ef       	ldi	r22, 0xFF	; 255
    2ac2:	7f ef       	ldi	r23, 0xFF	; 255
    2ac4:	c5 01       	movw	r24, r10
    2ac6:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <strnlen_P>
    2aca:	4c 01       	movw	r8, r24
    2acc:	f3 2d       	mov	r31, r3
    2ace:	f0 68       	ori	r31, 0x80	; 128
    2ad0:	3f 2e       	mov	r3, r31
    2ad2:	82 01       	movw	r16, r4
    2ad4:	33 fc       	sbrc	r3, 3
    2ad6:	1b c0       	rjmp	.+54     	; 0x2b0e <vfprintf+0x1c2>
    2ad8:	82 2d       	mov	r24, r2
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	88 16       	cp	r8, r24
    2ade:	99 06       	cpc	r9, r25
    2ae0:	b0 f4       	brcc	.+44     	; 0x2b0e <vfprintf+0x1c2>
    2ae2:	b6 01       	movw	r22, r12
    2ae4:	80 e2       	ldi	r24, 0x20	; 32
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2aec:	2a 94       	dec	r2
    2aee:	f4 cf       	rjmp	.-24     	; 0x2ad8 <vfprintf+0x18c>
    2af0:	f5 01       	movw	r30, r10
    2af2:	37 fc       	sbrc	r3, 7
    2af4:	85 91       	lpm	r24, Z+
    2af6:	37 fe       	sbrs	r3, 7
    2af8:	81 91       	ld	r24, Z+
    2afa:	5f 01       	movw	r10, r30
    2afc:	b6 01       	movw	r22, r12
    2afe:	90 e0       	ldi	r25, 0x00	; 0
    2b00:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2b04:	21 10       	cpse	r2, r1
    2b06:	2a 94       	dec	r2
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	82 1a       	sub	r8, r18
    2b0c:	91 08       	sbc	r9, r1
    2b0e:	81 14       	cp	r8, r1
    2b10:	91 04       	cpc	r9, r1
    2b12:	71 f7       	brne	.-36     	; 0x2af0 <vfprintf+0x1a4>
    2b14:	e8 c0       	rjmp	.+464    	; 0x2ce6 <vfprintf+0x39a>
    2b16:	84 36       	cpi	r24, 0x64	; 100
    2b18:	11 f0       	breq	.+4      	; 0x2b1e <vfprintf+0x1d2>
    2b1a:	89 36       	cpi	r24, 0x69	; 105
    2b1c:	41 f5       	brne	.+80     	; 0x2b6e <vfprintf+0x222>
    2b1e:	f8 01       	movw	r30, r16
    2b20:	37 fe       	sbrs	r3, 7
    2b22:	07 c0       	rjmp	.+14     	; 0x2b32 <vfprintf+0x1e6>
    2b24:	60 81       	ld	r22, Z
    2b26:	71 81       	ldd	r23, Z+1	; 0x01
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	0c 5f       	subi	r16, 0xFC	; 252
    2b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b30:	08 c0       	rjmp	.+16     	; 0x2b42 <vfprintf+0x1f6>
    2b32:	60 81       	ld	r22, Z
    2b34:	71 81       	ldd	r23, Z+1	; 0x01
    2b36:	07 2e       	mov	r0, r23
    2b38:	00 0c       	add	r0, r0
    2b3a:	88 0b       	sbc	r24, r24
    2b3c:	99 0b       	sbc	r25, r25
    2b3e:	0e 5f       	subi	r16, 0xFE	; 254
    2b40:	1f 4f       	sbci	r17, 0xFF	; 255
    2b42:	f3 2d       	mov	r31, r3
    2b44:	ff 76       	andi	r31, 0x6F	; 111
    2b46:	3f 2e       	mov	r3, r31
    2b48:	97 ff       	sbrs	r25, 7
    2b4a:	09 c0       	rjmp	.+18     	; 0x2b5e <vfprintf+0x212>
    2b4c:	90 95       	com	r25
    2b4e:	80 95       	com	r24
    2b50:	70 95       	com	r23
    2b52:	61 95       	neg	r22
    2b54:	7f 4f       	sbci	r23, 0xFF	; 255
    2b56:	8f 4f       	sbci	r24, 0xFF	; 255
    2b58:	9f 4f       	sbci	r25, 0xFF	; 255
    2b5a:	f0 68       	ori	r31, 0x80	; 128
    2b5c:	3f 2e       	mov	r3, r31
    2b5e:	2a e0       	ldi	r18, 0x0A	; 10
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	a3 01       	movw	r20, r6
    2b64:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__ultoa_invert>
    2b68:	88 2e       	mov	r8, r24
    2b6a:	86 18       	sub	r8, r6
    2b6c:	45 c0       	rjmp	.+138    	; 0x2bf8 <vfprintf+0x2ac>
    2b6e:	85 37       	cpi	r24, 0x75	; 117
    2b70:	31 f4       	brne	.+12     	; 0x2b7e <vfprintf+0x232>
    2b72:	23 2d       	mov	r18, r3
    2b74:	2f 7e       	andi	r18, 0xEF	; 239
    2b76:	b2 2e       	mov	r11, r18
    2b78:	2a e0       	ldi	r18, 0x0A	; 10
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	25 c0       	rjmp	.+74     	; 0x2bc8 <vfprintf+0x27c>
    2b7e:	93 2d       	mov	r25, r3
    2b80:	99 7f       	andi	r25, 0xF9	; 249
    2b82:	b9 2e       	mov	r11, r25
    2b84:	8f 36       	cpi	r24, 0x6F	; 111
    2b86:	c1 f0       	breq	.+48     	; 0x2bb8 <vfprintf+0x26c>
    2b88:	18 f4       	brcc	.+6      	; 0x2b90 <vfprintf+0x244>
    2b8a:	88 35       	cpi	r24, 0x58	; 88
    2b8c:	79 f0       	breq	.+30     	; 0x2bac <vfprintf+0x260>
    2b8e:	b5 c0       	rjmp	.+362    	; 0x2cfa <vfprintf+0x3ae>
    2b90:	80 37       	cpi	r24, 0x70	; 112
    2b92:	19 f0       	breq	.+6      	; 0x2b9a <vfprintf+0x24e>
    2b94:	88 37       	cpi	r24, 0x78	; 120
    2b96:	21 f0       	breq	.+8      	; 0x2ba0 <vfprintf+0x254>
    2b98:	b0 c0       	rjmp	.+352    	; 0x2cfa <vfprintf+0x3ae>
    2b9a:	e9 2f       	mov	r30, r25
    2b9c:	e0 61       	ori	r30, 0x10	; 16
    2b9e:	be 2e       	mov	r11, r30
    2ba0:	b4 fe       	sbrs	r11, 4
    2ba2:	0d c0       	rjmp	.+26     	; 0x2bbe <vfprintf+0x272>
    2ba4:	fb 2d       	mov	r31, r11
    2ba6:	f4 60       	ori	r31, 0x04	; 4
    2ba8:	bf 2e       	mov	r11, r31
    2baa:	09 c0       	rjmp	.+18     	; 0x2bbe <vfprintf+0x272>
    2bac:	34 fe       	sbrs	r3, 4
    2bae:	0a c0       	rjmp	.+20     	; 0x2bc4 <vfprintf+0x278>
    2bb0:	29 2f       	mov	r18, r25
    2bb2:	26 60       	ori	r18, 0x06	; 6
    2bb4:	b2 2e       	mov	r11, r18
    2bb6:	06 c0       	rjmp	.+12     	; 0x2bc4 <vfprintf+0x278>
    2bb8:	28 e0       	ldi	r18, 0x08	; 8
    2bba:	30 e0       	ldi	r19, 0x00	; 0
    2bbc:	05 c0       	rjmp	.+10     	; 0x2bc8 <vfprintf+0x27c>
    2bbe:	20 e1       	ldi	r18, 0x10	; 16
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	02 c0       	rjmp	.+4      	; 0x2bc8 <vfprintf+0x27c>
    2bc4:	20 e1       	ldi	r18, 0x10	; 16
    2bc6:	32 e0       	ldi	r19, 0x02	; 2
    2bc8:	f8 01       	movw	r30, r16
    2bca:	b7 fe       	sbrs	r11, 7
    2bcc:	07 c0       	rjmp	.+14     	; 0x2bdc <vfprintf+0x290>
    2bce:	60 81       	ld	r22, Z
    2bd0:	71 81       	ldd	r23, Z+1	; 0x01
    2bd2:	82 81       	ldd	r24, Z+2	; 0x02
    2bd4:	93 81       	ldd	r25, Z+3	; 0x03
    2bd6:	0c 5f       	subi	r16, 0xFC	; 252
    2bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2bda:	06 c0       	rjmp	.+12     	; 0x2be8 <vfprintf+0x29c>
    2bdc:	60 81       	ld	r22, Z
    2bde:	71 81       	ldd	r23, Z+1	; 0x01
    2be0:	80 e0       	ldi	r24, 0x00	; 0
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 5f       	subi	r16, 0xFE	; 254
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	a3 01       	movw	r20, r6
    2bea:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <__ultoa_invert>
    2bee:	88 2e       	mov	r8, r24
    2bf0:	86 18       	sub	r8, r6
    2bf2:	fb 2d       	mov	r31, r11
    2bf4:	ff 77       	andi	r31, 0x7F	; 127
    2bf6:	3f 2e       	mov	r3, r31
    2bf8:	36 fe       	sbrs	r3, 6
    2bfa:	0d c0       	rjmp	.+26     	; 0x2c16 <vfprintf+0x2ca>
    2bfc:	23 2d       	mov	r18, r3
    2bfe:	2e 7f       	andi	r18, 0xFE	; 254
    2c00:	a2 2e       	mov	r10, r18
    2c02:	89 14       	cp	r8, r9
    2c04:	58 f4       	brcc	.+22     	; 0x2c1c <vfprintf+0x2d0>
    2c06:	34 fe       	sbrs	r3, 4
    2c08:	0b c0       	rjmp	.+22     	; 0x2c20 <vfprintf+0x2d4>
    2c0a:	32 fc       	sbrc	r3, 2
    2c0c:	09 c0       	rjmp	.+18     	; 0x2c20 <vfprintf+0x2d4>
    2c0e:	83 2d       	mov	r24, r3
    2c10:	8e 7e       	andi	r24, 0xEE	; 238
    2c12:	a8 2e       	mov	r10, r24
    2c14:	05 c0       	rjmp	.+10     	; 0x2c20 <vfprintf+0x2d4>
    2c16:	b8 2c       	mov	r11, r8
    2c18:	a3 2c       	mov	r10, r3
    2c1a:	03 c0       	rjmp	.+6      	; 0x2c22 <vfprintf+0x2d6>
    2c1c:	b8 2c       	mov	r11, r8
    2c1e:	01 c0       	rjmp	.+2      	; 0x2c22 <vfprintf+0x2d6>
    2c20:	b9 2c       	mov	r11, r9
    2c22:	a4 fe       	sbrs	r10, 4
    2c24:	0f c0       	rjmp	.+30     	; 0x2c44 <vfprintf+0x2f8>
    2c26:	fe 01       	movw	r30, r28
    2c28:	e8 0d       	add	r30, r8
    2c2a:	f1 1d       	adc	r31, r1
    2c2c:	80 81       	ld	r24, Z
    2c2e:	80 33       	cpi	r24, 0x30	; 48
    2c30:	21 f4       	brne	.+8      	; 0x2c3a <vfprintf+0x2ee>
    2c32:	9a 2d       	mov	r25, r10
    2c34:	99 7e       	andi	r25, 0xE9	; 233
    2c36:	a9 2e       	mov	r10, r25
    2c38:	09 c0       	rjmp	.+18     	; 0x2c4c <vfprintf+0x300>
    2c3a:	a2 fe       	sbrs	r10, 2
    2c3c:	06 c0       	rjmp	.+12     	; 0x2c4a <vfprintf+0x2fe>
    2c3e:	b3 94       	inc	r11
    2c40:	b3 94       	inc	r11
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <vfprintf+0x300>
    2c44:	8a 2d       	mov	r24, r10
    2c46:	86 78       	andi	r24, 0x86	; 134
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <vfprintf+0x300>
    2c4a:	b3 94       	inc	r11
    2c4c:	a3 fc       	sbrc	r10, 3
    2c4e:	11 c0       	rjmp	.+34     	; 0x2c72 <vfprintf+0x326>
    2c50:	a0 fe       	sbrs	r10, 0
    2c52:	06 c0       	rjmp	.+12     	; 0x2c60 <vfprintf+0x314>
    2c54:	b2 14       	cp	r11, r2
    2c56:	88 f4       	brcc	.+34     	; 0x2c7a <vfprintf+0x32e>
    2c58:	28 0c       	add	r2, r8
    2c5a:	92 2c       	mov	r9, r2
    2c5c:	9b 18       	sub	r9, r11
    2c5e:	0e c0       	rjmp	.+28     	; 0x2c7c <vfprintf+0x330>
    2c60:	b2 14       	cp	r11, r2
    2c62:	60 f4       	brcc	.+24     	; 0x2c7c <vfprintf+0x330>
    2c64:	b6 01       	movw	r22, r12
    2c66:	80 e2       	ldi	r24, 0x20	; 32
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2c6e:	b3 94       	inc	r11
    2c70:	f7 cf       	rjmp	.-18     	; 0x2c60 <vfprintf+0x314>
    2c72:	b2 14       	cp	r11, r2
    2c74:	18 f4       	brcc	.+6      	; 0x2c7c <vfprintf+0x330>
    2c76:	2b 18       	sub	r2, r11
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <vfprintf+0x332>
    2c7a:	98 2c       	mov	r9, r8
    2c7c:	21 2c       	mov	r2, r1
    2c7e:	a4 fe       	sbrs	r10, 4
    2c80:	10 c0       	rjmp	.+32     	; 0x2ca2 <vfprintf+0x356>
    2c82:	b6 01       	movw	r22, r12
    2c84:	80 e3       	ldi	r24, 0x30	; 48
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2c8c:	a2 fe       	sbrs	r10, 2
    2c8e:	17 c0       	rjmp	.+46     	; 0x2cbe <vfprintf+0x372>
    2c90:	a1 fc       	sbrc	r10, 1
    2c92:	03 c0       	rjmp	.+6      	; 0x2c9a <vfprintf+0x34e>
    2c94:	88 e7       	ldi	r24, 0x78	; 120
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	02 c0       	rjmp	.+4      	; 0x2c9e <vfprintf+0x352>
    2c9a:	88 e5       	ldi	r24, 0x58	; 88
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	b6 01       	movw	r22, r12
    2ca0:	0c c0       	rjmp	.+24     	; 0x2cba <vfprintf+0x36e>
    2ca2:	8a 2d       	mov	r24, r10
    2ca4:	86 78       	andi	r24, 0x86	; 134
    2ca6:	59 f0       	breq	.+22     	; 0x2cbe <vfprintf+0x372>
    2ca8:	a1 fe       	sbrs	r10, 1
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <vfprintf+0x364>
    2cac:	8b e2       	ldi	r24, 0x2B	; 43
    2cae:	01 c0       	rjmp	.+2      	; 0x2cb2 <vfprintf+0x366>
    2cb0:	80 e2       	ldi	r24, 0x20	; 32
    2cb2:	a7 fc       	sbrc	r10, 7
    2cb4:	8d e2       	ldi	r24, 0x2D	; 45
    2cb6:	b6 01       	movw	r22, r12
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2cbe:	89 14       	cp	r8, r9
    2cc0:	38 f4       	brcc	.+14     	; 0x2cd0 <vfprintf+0x384>
    2cc2:	b6 01       	movw	r22, r12
    2cc4:	80 e3       	ldi	r24, 0x30	; 48
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2ccc:	9a 94       	dec	r9
    2cce:	f7 cf       	rjmp	.-18     	; 0x2cbe <vfprintf+0x372>
    2cd0:	8a 94       	dec	r8
    2cd2:	f3 01       	movw	r30, r6
    2cd4:	e8 0d       	add	r30, r8
    2cd6:	f1 1d       	adc	r31, r1
    2cd8:	80 81       	ld	r24, Z
    2cda:	b6 01       	movw	r22, r12
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2ce2:	81 10       	cpse	r8, r1
    2ce4:	f5 cf       	rjmp	.-22     	; 0x2cd0 <vfprintf+0x384>
    2ce6:	22 20       	and	r2, r2
    2ce8:	09 f4       	brne	.+2      	; 0x2cec <vfprintf+0x3a0>
    2cea:	42 ce       	rjmp	.-892    	; 0x2970 <vfprintf+0x24>
    2cec:	b6 01       	movw	r22, r12
    2cee:	80 e2       	ldi	r24, 0x20	; 32
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <fputc>
    2cf6:	2a 94       	dec	r2
    2cf8:	f6 cf       	rjmp	.-20     	; 0x2ce6 <vfprintf+0x39a>
    2cfa:	f6 01       	movw	r30, r12
    2cfc:	86 81       	ldd	r24, Z+6	; 0x06
    2cfe:	97 81       	ldd	r25, Z+7	; 0x07
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <vfprintf+0x3ba>
    2d02:	8f ef       	ldi	r24, 0xFF	; 255
    2d04:	9f ef       	ldi	r25, 0xFF	; 255
    2d06:	2b 96       	adiw	r28, 0x0b	; 11
    2d08:	e2 e1       	ldi	r30, 0x12	; 18
    2d0a:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__epilogue_restores__>

00002d0e <strnlen_P>:
    2d0e:	fc 01       	movw	r30, r24
    2d10:	05 90       	lpm	r0, Z+
    2d12:	61 50       	subi	r22, 0x01	; 1
    2d14:	70 40       	sbci	r23, 0x00	; 0
    2d16:	01 10       	cpse	r0, r1
    2d18:	d8 f7       	brcc	.-10     	; 0x2d10 <strnlen_P+0x2>
    2d1a:	80 95       	com	r24
    2d1c:	90 95       	com	r25
    2d1e:	8e 0f       	add	r24, r30
    2d20:	9f 1f       	adc	r25, r31
    2d22:	08 95       	ret

00002d24 <strnlen>:
    2d24:	fc 01       	movw	r30, r24
    2d26:	61 50       	subi	r22, 0x01	; 1
    2d28:	70 40       	sbci	r23, 0x00	; 0
    2d2a:	01 90       	ld	r0, Z+
    2d2c:	01 10       	cpse	r0, r1
    2d2e:	d8 f7       	brcc	.-10     	; 0x2d26 <strnlen+0x2>
    2d30:	80 95       	com	r24
    2d32:	90 95       	com	r25
    2d34:	8e 0f       	add	r24, r30
    2d36:	9f 1f       	adc	r25, r31
    2d38:	08 95       	ret

00002d3a <fputc>:
    2d3a:	0f 93       	push	r16
    2d3c:	1f 93       	push	r17
    2d3e:	cf 93       	push	r28
    2d40:	df 93       	push	r29
    2d42:	fb 01       	movw	r30, r22
    2d44:	23 81       	ldd	r18, Z+3	; 0x03
    2d46:	21 fd       	sbrc	r18, 1
    2d48:	03 c0       	rjmp	.+6      	; 0x2d50 <fputc+0x16>
    2d4a:	8f ef       	ldi	r24, 0xFF	; 255
    2d4c:	9f ef       	ldi	r25, 0xFF	; 255
    2d4e:	2c c0       	rjmp	.+88     	; 0x2da8 <fputc+0x6e>
    2d50:	22 ff       	sbrs	r18, 2
    2d52:	16 c0       	rjmp	.+44     	; 0x2d80 <fputc+0x46>
    2d54:	46 81       	ldd	r20, Z+6	; 0x06
    2d56:	57 81       	ldd	r21, Z+7	; 0x07
    2d58:	24 81       	ldd	r18, Z+4	; 0x04
    2d5a:	35 81       	ldd	r19, Z+5	; 0x05
    2d5c:	42 17       	cp	r20, r18
    2d5e:	53 07       	cpc	r21, r19
    2d60:	44 f4       	brge	.+16     	; 0x2d72 <fputc+0x38>
    2d62:	a0 81       	ld	r26, Z
    2d64:	b1 81       	ldd	r27, Z+1	; 0x01
    2d66:	9d 01       	movw	r18, r26
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6c:	31 83       	std	Z+1, r19	; 0x01
    2d6e:	20 83       	st	Z, r18
    2d70:	8c 93       	st	X, r24
    2d72:	26 81       	ldd	r18, Z+6	; 0x06
    2d74:	37 81       	ldd	r19, Z+7	; 0x07
    2d76:	2f 5f       	subi	r18, 0xFF	; 255
    2d78:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7a:	37 83       	std	Z+7, r19	; 0x07
    2d7c:	26 83       	std	Z+6, r18	; 0x06
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <fputc+0x6e>
    2d80:	8b 01       	movw	r16, r22
    2d82:	ec 01       	movw	r28, r24
    2d84:	fb 01       	movw	r30, r22
    2d86:	00 84       	ldd	r0, Z+8	; 0x08
    2d88:	f1 85       	ldd	r31, Z+9	; 0x09
    2d8a:	e0 2d       	mov	r30, r0
    2d8c:	09 95       	icall
    2d8e:	89 2b       	or	r24, r25
    2d90:	e1 f6       	brne	.-72     	; 0x2d4a <fputc+0x10>
    2d92:	d8 01       	movw	r26, r16
    2d94:	16 96       	adiw	r26, 0x06	; 6
    2d96:	8d 91       	ld	r24, X+
    2d98:	9c 91       	ld	r25, X
    2d9a:	17 97       	sbiw	r26, 0x07	; 7
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	17 96       	adiw	r26, 0x07	; 7
    2da0:	9c 93       	st	X, r25
    2da2:	8e 93       	st	-X, r24
    2da4:	16 97       	sbiw	r26, 0x06	; 6
    2da6:	ce 01       	movw	r24, r28
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	1f 91       	pop	r17
    2dae:	0f 91       	pop	r16
    2db0:	08 95       	ret

00002db2 <__ultoa_invert>:
    2db2:	fa 01       	movw	r30, r20
    2db4:	aa 27       	eor	r26, r26
    2db6:	28 30       	cpi	r18, 0x08	; 8
    2db8:	51 f1       	breq	.+84     	; 0x2e0e <__ultoa_invert+0x5c>
    2dba:	20 31       	cpi	r18, 0x10	; 16
    2dbc:	81 f1       	breq	.+96     	; 0x2e1e <__ultoa_invert+0x6c>
    2dbe:	e8 94       	clt
    2dc0:	6f 93       	push	r22
    2dc2:	6e 7f       	andi	r22, 0xFE	; 254
    2dc4:	6e 5f       	subi	r22, 0xFE	; 254
    2dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	af 4f       	sbci	r26, 0xFF	; 255
    2dce:	b1 e0       	ldi	r27, 0x01	; 1
    2dd0:	3e d0       	rcall	.+124    	; 0x2e4e <__ultoa_invert+0x9c>
    2dd2:	b4 e0       	ldi	r27, 0x04	; 4
    2dd4:	3c d0       	rcall	.+120    	; 0x2e4e <__ultoa_invert+0x9c>
    2dd6:	67 0f       	add	r22, r23
    2dd8:	78 1f       	adc	r23, r24
    2dda:	89 1f       	adc	r24, r25
    2ddc:	9a 1f       	adc	r25, r26
    2dde:	a1 1d       	adc	r26, r1
    2de0:	68 0f       	add	r22, r24
    2de2:	79 1f       	adc	r23, r25
    2de4:	8a 1f       	adc	r24, r26
    2de6:	91 1d       	adc	r25, r1
    2de8:	a1 1d       	adc	r26, r1
    2dea:	6a 0f       	add	r22, r26
    2dec:	71 1d       	adc	r23, r1
    2dee:	81 1d       	adc	r24, r1
    2df0:	91 1d       	adc	r25, r1
    2df2:	a1 1d       	adc	r26, r1
    2df4:	20 d0       	rcall	.+64     	; 0x2e36 <__ultoa_invert+0x84>
    2df6:	09 f4       	brne	.+2      	; 0x2dfa <__ultoa_invert+0x48>
    2df8:	68 94       	set
    2dfa:	3f 91       	pop	r19
    2dfc:	2a e0       	ldi	r18, 0x0A	; 10
    2dfe:	26 9f       	mul	r18, r22
    2e00:	11 24       	eor	r1, r1
    2e02:	30 19       	sub	r19, r0
    2e04:	30 5d       	subi	r19, 0xD0	; 208
    2e06:	31 93       	st	Z+, r19
    2e08:	de f6       	brtc	.-74     	; 0x2dc0 <__ultoa_invert+0xe>
    2e0a:	cf 01       	movw	r24, r30
    2e0c:	08 95       	ret
    2e0e:	46 2f       	mov	r20, r22
    2e10:	47 70       	andi	r20, 0x07	; 7
    2e12:	40 5d       	subi	r20, 0xD0	; 208
    2e14:	41 93       	st	Z+, r20
    2e16:	b3 e0       	ldi	r27, 0x03	; 3
    2e18:	0f d0       	rcall	.+30     	; 0x2e38 <__ultoa_invert+0x86>
    2e1a:	c9 f7       	brne	.-14     	; 0x2e0e <__ultoa_invert+0x5c>
    2e1c:	f6 cf       	rjmp	.-20     	; 0x2e0a <__ultoa_invert+0x58>
    2e1e:	46 2f       	mov	r20, r22
    2e20:	4f 70       	andi	r20, 0x0F	; 15
    2e22:	40 5d       	subi	r20, 0xD0	; 208
    2e24:	4a 33       	cpi	r20, 0x3A	; 58
    2e26:	18 f0       	brcs	.+6      	; 0x2e2e <__ultoa_invert+0x7c>
    2e28:	49 5d       	subi	r20, 0xD9	; 217
    2e2a:	31 fd       	sbrc	r19, 1
    2e2c:	40 52       	subi	r20, 0x20	; 32
    2e2e:	41 93       	st	Z+, r20
    2e30:	02 d0       	rcall	.+4      	; 0x2e36 <__ultoa_invert+0x84>
    2e32:	a9 f7       	brne	.-22     	; 0x2e1e <__ultoa_invert+0x6c>
    2e34:	ea cf       	rjmp	.-44     	; 0x2e0a <__ultoa_invert+0x58>
    2e36:	b4 e0       	ldi	r27, 0x04	; 4
    2e38:	a6 95       	lsr	r26
    2e3a:	97 95       	ror	r25
    2e3c:	87 95       	ror	r24
    2e3e:	77 95       	ror	r23
    2e40:	67 95       	ror	r22
    2e42:	ba 95       	dec	r27
    2e44:	c9 f7       	brne	.-14     	; 0x2e38 <__ultoa_invert+0x86>
    2e46:	00 97       	sbiw	r24, 0x00	; 0
    2e48:	61 05       	cpc	r22, r1
    2e4a:	71 05       	cpc	r23, r1
    2e4c:	08 95       	ret
    2e4e:	9b 01       	movw	r18, r22
    2e50:	ac 01       	movw	r20, r24
    2e52:	0a 2e       	mov	r0, r26
    2e54:	06 94       	lsr	r0
    2e56:	57 95       	ror	r21
    2e58:	47 95       	ror	r20
    2e5a:	37 95       	ror	r19
    2e5c:	27 95       	ror	r18
    2e5e:	ba 95       	dec	r27
    2e60:	c9 f7       	brne	.-14     	; 0x2e54 <__ultoa_invert+0xa2>
    2e62:	62 0f       	add	r22, r18
    2e64:	73 1f       	adc	r23, r19
    2e66:	84 1f       	adc	r24, r20
    2e68:	95 1f       	adc	r25, r21
    2e6a:	a0 1d       	adc	r26, r0
    2e6c:	08 95       	ret

00002e6e <__prologue_saves__>:
    2e6e:	2f 92       	push	r2
    2e70:	3f 92       	push	r3
    2e72:	4f 92       	push	r4
    2e74:	5f 92       	push	r5
    2e76:	6f 92       	push	r6
    2e78:	7f 92       	push	r7
    2e7a:	8f 92       	push	r8
    2e7c:	9f 92       	push	r9
    2e7e:	af 92       	push	r10
    2e80:	bf 92       	push	r11
    2e82:	cf 92       	push	r12
    2e84:	df 92       	push	r13
    2e86:	ef 92       	push	r14
    2e88:	ff 92       	push	r15
    2e8a:	0f 93       	push	r16
    2e8c:	1f 93       	push	r17
    2e8e:	cf 93       	push	r28
    2e90:	df 93       	push	r29
    2e92:	cd b7       	in	r28, 0x3d	; 61
    2e94:	de b7       	in	r29, 0x3e	; 62
    2e96:	ca 1b       	sub	r28, r26
    2e98:	db 0b       	sbc	r29, r27
    2e9a:	0f b6       	in	r0, 0x3f	; 63
    2e9c:	f8 94       	cli
    2e9e:	de bf       	out	0x3e, r29	; 62
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	cd bf       	out	0x3d, r28	; 61
    2ea4:	09 94       	ijmp

00002ea6 <__epilogue_restores__>:
    2ea6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ea8:	39 88       	ldd	r3, Y+17	; 0x11
    2eaa:	48 88       	ldd	r4, Y+16	; 0x10
    2eac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eb0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eb2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eb6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eb8:	b9 84       	ldd	r11, Y+9	; 0x09
    2eba:	c8 84       	ldd	r12, Y+8	; 0x08
    2ebc:	df 80       	ldd	r13, Y+7	; 0x07
    2ebe:	ee 80       	ldd	r14, Y+6	; 0x06
    2ec0:	fd 80       	ldd	r15, Y+5	; 0x05
    2ec2:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec4:	1b 81       	ldd	r17, Y+3	; 0x03
    2ec6:	aa 81       	ldd	r26, Y+2	; 0x02
    2ec8:	b9 81       	ldd	r27, Y+1	; 0x01
    2eca:	ce 0f       	add	r28, r30
    2ecc:	d1 1d       	adc	r29, r1
    2ece:	0f b6       	in	r0, 0x3f	; 63
    2ed0:	f8 94       	cli
    2ed2:	de bf       	out	0x3e, r29	; 62
    2ed4:	0f be       	out	0x3f, r0	; 63
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	ed 01       	movw	r28, r26
    2eda:	08 95       	ret

00002edc <_exit>:
    2edc:	f8 94       	cli

00002ede <__stop_program>:
    2ede:	ff cf       	rjmp	.-2      	; 0x2ede <__stop_program>
